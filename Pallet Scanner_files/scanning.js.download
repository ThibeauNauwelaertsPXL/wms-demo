/**
 * Created by Andrei-Dan on 5/20/2016.
 */
var appConfig = {};

$(document).ready(function () {
    $.getJSON("appConfig.json?t=" + new Date().getTime(), function (response) {
        appConfig = response;
        $("#username").focus();
        $(function () {
            $(".icon-back").click(function () {
                var btn = $(this);
                btn.prop("disabled", true);
                window.setTimeout(function () {
                    btn.prop("disabled", false);
                }, 2000);
            });
        });

        ko.applyBindings(new PalletScannerViewModel());
    });
});

window.onerror = function (e, url, line) {
    if (appConfig.showApplicationErrors) {
        var displayError = "Application Error!";
        displayError = displayError + "\n" + e + "\n" + "On line: " + line;
        alert(displayError);
    }
};

window.onbeforeunload = function () {
    return "Refreshing the browser will result in losing the data. Are you sure you want to refresh?";
};

function PalletScannerViewModel() {
    // Data
    var self = this;
    self.showAppVersion = ko.observable(appConfig.appVersion);
    self.errorMessage = ko.observable(null);

    var WS_ROOT = appConfig.rootUrl + appConfig.serverUrl + appConfig.dataUrl;
    var WS_ROOT_SYSTEM =
        appConfig.rootUrl + appConfig.serverUrl + appConfig.systemUrl;

    //get url params function to retrieve and use CompanyCode and ConcernCode
    self.getQueryStringValue = function (key) {
        if (
            decodeURIComponent(
                window.location.search.replace(
                    new RegExp(
                        "^(?:.*[&\\?]" +
                            encodeURIComponent(key).replace(
                                /[\.\+\*]/g,
                                "\\$&"
                            ) +
                            "(?:\\=([^&]*))?)?.*$",
                        "i"
                    ),
                    "$1"
                )
            ).toString().length > 0
        ) {
            return decodeURIComponent(
                window.location.search.replace(
                    new RegExp(
                        "^(?:.*[&\\?]" +
                            encodeURIComponent(key).replace(
                                /[\.\+\*]/g,
                                "\\$&"
                            ) +
                            "(?:\\=([^&]*))?)?.*$",
                        "i"
                    ),
                    "$1"
                )
            );
        } else {
            self.errorMessage(
                "Missing URL params. Add CompanyCode and ConcernCode in the url and retry."
            );
            alert(
                "Missing URL params. Add CompanyCode and ConcernCode in the url and retry."
            );
        }
    };

    if (appConfig.isDevelopmentMode) {
        self.CompanyCode = "08";
        self.ConcernCode = "46";
        //self.CompanyCode = "69";
        //self.ConcernCode = "34";
    } else {
        self.CompanyCode = self.getQueryStringValue("CompanyCode");
        self.ConcernCode = self.getQueryStringValue("ConcernCode");
    }

    //login
    self.loggedIn = ko.observable(null);
    self.warehouseId = ko.observable();
    self.warehouseList = ko.observable();
    self.canChangeEnvironment = ko.observable(false);
    self.disableBlindCounting = ko.observable(false);
    self.passwordHashLevel = ko.observable();
    self.packageId = ko.observable();

    //current page
    self.page = ko.observable("login");
    self.pickenErrorMessage = ko.observable("");

    //login
    self.username = ko.observable();

    //pallet movement
    self.currentFunctionForPalletMove = ko.observable(); //pallet movement is started from 1.PalletMovement; 2.LoadShipment; 3.PickReplenishment
    self.scanTruck = ko.observable();
    self.defaultTruck = ko.observable("");
    self.lastUsedTruck = ko.observable("");
    self.scanPallet = ko.observable();
    self.scanLocation = ko.observable();
    self.palletMovementHeader = ko.observable("Get pallet");
    self.displayPopupBBDForReplenishmentActions = ko.observable();
    self.scanLocationFromRemember = ko.observable();
    self.scanLocationRemember = ko.observable();
    self.showMovementFilters = ko.observable(false);
    self.WarehouseLocationProductInfo = ko.observableArray();
    self.allowSplit = ko.observable("false");
    self.priceUnitDescription = ko.observable("");
    self.palletQuantityPeh = ko.observable("");
    self.splitPalletInput = ko.observable();
    self.scanLocationSplit = ko.observable();

    //store movementId
    self.movementId = ko.observable();
    self.movementStockId = ko.observable();
    self.movementOutboundId = ko.observable();
    self.movementGoodsReceiptId = ko.observable();
    self.movementAdditionalPalletId = ko.observable();
    self.palletMovementProductDescription = ko.observable("");
    //store preferred location
    self.showPreferredLocation = ko.observable(false);
    self.endLocationText = ko.observable();
    self.endLocationAK = ko.observable();
    self.dataMoveToTruck = ko.observable("");
    self.BestBeforeDateToShow = ko.observable("");
    //store move request info
    self.shipmentInfo = ko.observable();
    self.loadShipmentData = ko.observable("");
    self.palletMoveRequestId = ko.observable();

    //unfinished movement
    self.unfinishedMovement = ko.observable(false);
    self.scanLocationFrom = ko.observable();
    self.opiateClass = ko.observable("");

    //cycleCount
    self.ccLines = ko.observableArray();
    self.currentLine = ko.observable();
    self.totalLines = ko.observable();
    self.ccScanLocation = ko.observable();
    self.physicalLocationCode = ko.observable();
    self.locationBarcode = ko.observable();
    self.chosenLine = ko.observable();
    self.cycleCountId = ko.observable("");
    self.showEmptyPalletButtons = ko.observable(false);
    self.productBarcodeValidationCycle = ko.observable();
    self.enableUseProductPackingbarcodeCycle = ko.observable();
    self.cycleCountBarcode = ko.observable();
    self.currentPageCycleCountPV = ko.observable(false);
    self.currentPageZeroLines = ko.observable(false);
    //cycleCount Header Information
    self.ccSection = ko.observable();
    self.ccLocation = ko.observable();
    self.ccNumberOfEntries = ko.observable();
    self.ccNumberOfCountedEntries = ko.observable();
    self.ccNumberOfEntriesWithDifferences = ko.observable();
    self.locationCountArray = ko.observableArray();
    //final process cycle count
    self.Indication_Processed = ko.observable(false);
    self.Indication_CountAgain = ko.observable(false);
    //flag unfinished process
    self.ccUnfinishedProcess = ko.observable(false);
    self.ccHeaderGuid = ko.observable();
    self.openCycleCountFlag = ko.observable(false);
    self.selectedPallet = ko.observableArray();

    //picken
    self.cancelMoveDuringPicking = ko.observable(false);
    self.movePickingType = ko.observable();
    self.moveDuringPicking = ko.observable(false);
    self.picklists = ko.observableArray();
    self.selectedPicklist = ko.observable();

    self.skipScreenConfirmQuantity = ko.observable("false");
    self.isPressedBackIconValidateTuId = ko.observable("false");

    self.palletTypes = ko.observableArray();
    self.allPalletTypes = ko.observableArray();
    self.showPalletDropdown = ko.observable(false);
    self.selectedPalletType = ko.observable({
        Weight: ko.observable(""),
        Height: ko.observable(""),
    });
    self.palletTypeWeightObservable = ko.observable("");
    self.selectedPicklistLine = ko.observable();
    self.selectedPicklistLineIndex = ko.observable();
    self.scannedBarcode = ko.observable("");
    self.scannedCartId = ko.observable("");
    self.nextAvailablePicklistLineFound = ko.observable(false);
    self.scanPalletPicking = ko.observable();
    self.picklistEndLocation = ko.observable();
    self.pickingBarcode = ko.observable("");
    self.multiBarcodes = ko.observableArray();
    self.pickedWithBarcode = ko.observable(false);
    self.pickedManually = ko.observable(false);
    self.barcodeToConfirm = ko.observable();
    self.nextPicklistToProcess = ko.observable();
    self.LOECodeOutbound = ko.observable();
    self.globalPickingType = ko.observable("regular");
    self.pickingTUID = ko.observable("");
    self.currentTUID = ko.observable("");
    self.validateFrom = ko.observable();
    self.lastScannedLocation = ko.observable("");
    self.picklistsPIECESMULTILINE = ko.observable(0);
    self.picklistsPIECES1LINE = ko.observable(0);
    self.picklistsP2C = ko.observable(0);
    self.picklistsMIXED = ko.observable(0);
    self.picklistsFULLPALLET = ko.observable(0);
    self.picklistsTOTAL = ko.observable(0);
    self.picklistsINTERNAL = ko.observable(0);
    self.currentPickingType = ko.observable("");
    self.pickingSortElement = ko.observable("deadline");
    self.pickingSortType = ko.observable("asc");
    self.pickingFilterExpedition = ko.observable("");
    self.pickingFilterSection = ko.observable("");
    self.pickingFilterCart = ko.observable("");
    self.pickingFilterExpeditionArray = ko.observableArray();
    self.movementFiltersArray = ko.observableArray();
    self.movementFiltersValue = ko.observable("");
    self.pickingFilterSectionArray = ko.observableArray();
    self.pickingFilterCartArray = ko.observableArray([
        "With cart",
        "Without cart",
    ]);
    self.oldPickingType = ko.observable("");
    self.scanBox = ko.observable("");
    self.usePredefinedCarriers = ko.observable("false");

    self.cartLocationShow = ko.observable("");

    //picken gift categories
    self.giftCategoriesPicklistLine = ko.observableArray([]);
    self.giftCardsPicklistLine = ko.observableArray([]);
    self.samples = ko.observableArray([]);
    self.forNextPalet = ko.observable(false);
    self.showGiftSampleButton = ko.observable(false);

    //outbound LSU check
    self.scanOutboundPallet = ko.observable();
    self.fillOutboundCheck = ko.observable();
    self.fillOutboundRemarks = ko.observable();
    self.showOutboundRemarks = ko.observable(false);

    //Load shipment module
    self.scanShipment = ko.observable();

    //Load inbound module
    self.scanInbound = ko.observable();
    self.noOfPallets = ko.observable();
    self.sortingLocation = ko.observable();
    self.supplierName = ko.observable();
    self.inboundId = ko.observable();
    self.showStartInbound = ko.observable(false);
    self.currentPallet = ko.observable("");
    self.productInbound = ko.observable();
    self.productInboundQty = ko.observable();
    self.currentPalletsInbound = ko.observable();
    self.currentProductIdInbound = ko.observable();
    self.currentInboundLine = ko.observable();
    self.currentProductDescriptionInbound = ko.observable();
    self.currentProductIdInbound = ko.observable();
    self.currentProductDescriptionInboundSend = ko.observable();
    self.currentProductBarcodeInbound = ko.observable();
    self.currentAmountInbound = ko.observable();
    self.showProductScan = ko.observable(false);
    self.showNextPallet = ko.observable(true);
    self.expectedQty = ko.observable(0);
    self.remainingQty = ko.observable(0);
    self.showProductNewPallet = ko.observable(false);
    self.currentSortedPallet = ko.observable();
    self.currentSortedPalletId = ko.observable();
    self.currentDestination = ko.observable("");
    self.scanMoveInbound = ko.observable();
    self.showMoveProductButton = ko.observable(false);
    self.showFinalBottomButtons1 = ko.observable(false);
    self.showFinalBottomButtons2 = ko.observable(false);
    self.productWasMoved = ko.observable(false);
    self.palletReadyForChecking = ko.observable(false);
    self.showQtyScan = ko.observable(false);
    self.previousPage = ko.observable(false);
    self.expectedReceived = ko.observable("");
    self.totalAmountReceived = ko.observable("");
    self.moveLastPage = ko.observable(false);
    self.showExpected = ko.observable(false);
    self.brokenProduct = ko.observable(false);
    self.showBroken = ko.observable(false);
    self.currentNewPalletTotal = ko.observable();
    self.unitsPerCarton = ko.observable();
    self.cartonsPerLayer = ko.observable();
    self.layers = ko.observable();
    self.individualCartons = ko.observable();
    self.individualUnits = ko.observable();
    self.totalCartons = ko.observable();
    self.totalUnits = ko.observable();
    self.showDamagedGoods = ko.observable(false);
    self.currentTotalAmountReceived = ko.observable();
    self.twoInboundLines = ko.observable(false);
    self.LocationPhysical = ko.observable("");
    self.productList = ko.observableArray();
    self.informationActivities = ko.observableArray();
    self.informationActivitiesToShow = ko.observableArray();
    self.productBarcodeAction = ko.observable();
    self.currentSortedPalletTotalAmountReceived = ko.observable();
    self.multipleProductsPage = ko.observable(false);
    self.currentScannedBarcodeId = ko.observable();
    self.currentSearchOpenPalletId = ko.observable();
    self.currentSorterPalletInboundLine = ko.observable();
    self.boxLines = ko.observableArray();
    self.showInstructionActivities = ko.observable(false);
    self.InboundLineActivities = ko.observable();

    // Merge pallets
    self.scanMerge = ko.observable();
    self.initialMergePallet = ko.observable("");
    self.initialTransportMerge = ko.observable("");
    self.initialCustomerMerge = ko.observable("");
    self.showStartMerge = ko.observable(false);
    self.initialPalletMergeFull = ko.observable();
    self.scannedPalletsList = ko.observableArray();
    self.showScannedMerge = ko.observable(false);
    self.targetLocationMerge = ko.observable();
    self.palletTypeMerge = ko.observable();
    self.palletHeightMerge = ko.observable();
    self.maxHeightMerge = ko.observable(0);
    self.palletTypeDescriptions = ko.observableArray();
    self.palletTypeValues = ko.observableArray();
    self.selectedPalletTypeMerge = ko.observable("E");
    self.currentMergeGUID = ko.observable();
    self.newPalletId = ko.observable();

    // Pallet en locatie
    self.scanPalletEnLocatie = ko.observable("");
    self.palletEnLocatieArray = ko.observableArray();
    self.showPalletInfoList = ko.observable(false);
    self.currentPalletInfo = ko.observable(0);
    self.titleForPalletEnLocatie = ko.observable("Pallet en locatie");

    // Replenishment action
    self.replenishmentActions = ko.observableArray();
    self.replenishmentAction = ko.observable();
    self.showReplenishmentActionStep = ko.observable(null);
    self.scannerDefaultTruck = ko.observable();
    self.replenishQuantity = ko.observable("0");
    self.isDoingReplenishentRequest = ko.observable(false);
    self.replenishToLocation = ko.observable();
    self.replenishToLocationFinalize = ko.observable();
    self.replenishEndLocation = ko.observable();
    self.replenishMainTitle = ko.observable();
    self.replenishDisplayFinalize = ko.observable(false);
    self.showReplenishmentBackButton = ko.observable(false);
    self.replenishTruck = ko.observable();
    self.replenishFromLocation = ko.observable();
    self.endLocationPhysical = ko.observable();
    self.actionIsCanceled = ko.observable(false);
    self.replenishmentActionIsNotAnymoreValid = ko.observable(false);
    self.replenishmentOrder = ko.observable();
    self.processedActions = ko.observableArray();

    // Repalletize Autostore
    self.scanRepalletize = ko.observable();
    self.showStartRepalletize = ko.observable(false);
    self.repalletizeData = ko.observable();
    self.scanRepalletizeCalc = ko.observable();
    self.numberOfNewPallets = ko.observable();
    self.looseGoods = ko.observable();
    self.qtyCurrentPallet = ko.observable();
    self.showProcessButton = ko.observable(false);
    self.isFilledManually = ko.observable(false);

    // Pallet Measurement
    self.scanPalletMeasurement = ko.observable();
    self.palletMeasurementStep2 = ko.observable(false);
    self.palletMeasurementStep3 = ko.observable(false);
    self.scanScalePalletMeasurement = ko.observable();
    self.showMeasureButton = ko.observable(false);
    self.palletMeasurementKG = ko.observable();

    //error message
    self.errorMessageNavigate = ko.observable(null);

    //loader
    self.showLoader = ko.observable(false);

    //successMessage flag
    self.successMessage = ko.observable(false);

    // misc

    self.eventStarted = ko.observable(false);

    //Dictionary NL-EN warning messages

    self.Dictionary = {
        EN: {
            menu: "Menu",
            tileMenuPalletMovement: "Pallet movement",
            tileMenuCycleCount: "Count stock",
            tileMenuPickReplenishment: "Pick replenishment",
            tileMenuControlevak: "Check location",
            tileMenuPicking: "Picking",
            tileMenuLoadShipment: "Load shipment",
            tileMenuChange: "Change environment",
            tileMenuWarehouse: "Change warehouse",
            tileInboundScanning: "Inbound scanning",
            tileMenuLogoff: "Log off",
            invalidCredentials: "Invalid username / password",
            invalidPallet: "Invalid Pallet",
            invalidTruck: "Invalid truck",
            emptyLocation: "Scanned location is empty!",
            scanTruck: "No default truck available, please scan a truck",
            unfinishedMovement: "Unfinished movement",
            finishTheMovement:
                "This movement needs to be finished, scan the endlocation of the pallet",
            movementSuccessful: "Movement succesful",
            successful: "Successful",
            noReplenishment: "No replenishment requests found in this section.",
            noReplenishment2: "No replenishment requests found.",
            noMoveRequest:
                "No move requests for this shipment/resource in this warehouse.",
            noShipment: "No shipment/resource found in this warehouse.",
            difference: "Difference",
            countLine: "Count line",
            choosePicklist: "Choose picklist",
            confirmChoice: "Confirm choice",
            confirmPallet: "Confirm pallet",
            picklistCompleted: "Picklist completed",
            enterQuantity: "Enter quantity",
            palletInformation: "Pallet information",
            checkLocation: "Check location",
            shipment: "Shipment",
            pallet: "Pallet",
            scanShipment: "Scan shipment",
            scanInbound: "Scan inbound",
            closeCountSession:
                "Are you sure you want to close the counting session?",
            closeInboundSession:
                "Are you sure you want to close the inbound scanning session?",
            closeInboundSessionCancel: "Confirm canceling?",
            location: "Location",
            preferedLocation: "Pref.Loc.",
            goToLocation: "Go to location",
            moveToLocation: "Move to location",
            palletRef: "Pallet reference",
            deadline: "Deadline",
            freeze: "Freeze",
            cool: "Cool",
            dry: "Dry",
            section: "Section",
            lines: "Lines",
            counted: "Counted",
            confirm: "Confirm",
            quantity: "Quantity",
            customer: "Customer",
            started: "Started",
            weight: "Weight",
            height: "Height",
            picklist: "Picklist",
            scanNotPossible: "Scan not possible",
            requested: "Requested",
            noLinesToPick: "There are no more lines to pick",
            noLinesToPickOk:
                "There are no more lines to pick, all pallets are finished. Press OK to process picklist",
            confirmProcessPallet: "Confirm process pallet",
            carrierType: "Carrier type",
            checkId: "Check ID",
            checkRemark: "Check remark",
            newLabel: "New",
            locationNotEmpty: "Location not empty",
            checkLSU: "Check LSU Outbound",
            palletFull: "Pallet full",
            instructions: "Instructions",
            picked: "Picked",
            fullyPicked: "Fully Picked",
            missingGoods: "Missing goods",
            brokenPieces: "Broken pieces",
            extraFound: "Extra found",
            countOk: "Count OK",
            endlocation: "EndLocation",
            reference: "Reference",
            scanResult: "Scan result",
            confirmManually: "Confirm manually",
            skipLine: "Skip line",
            cancelLine: "Cancel line",
            getPallet: "Get pallet",
            placePallet: "Place pallet",
            assigned: "Assigned",
            cancelMoveRequest: "Cancel move request",
            cancelMoveRequestYN:
                "Are you sure you want to cancel the move request?",
            scanProduct: "Product",
            scanQty: "Quantity",
            nextPallet: "Next pallet",
            nextProduct: "Next product",
            printPallet: "Print palletsticker",
            moveProduct: "Move product",
            palletReady: "Pallet ready for checking",
            palletNotReady: "Set pallet not ready",
            tileMergePallets: "Merge pallets",
            scanned: "Scanned pallet",
            targetLocation: "Target location",
            palletType: "Pallet type",
            palletHeight: "Pallet height (cm)",
            tilePalletEnLocatie: "Pallet en locatie info",
            palletLocation: "Pallet/Location",
            startSession: "Start session",
            createPallet: "Create pallet",
            newSession: "New session",
            emptyBoxes: "Empty boxes",
            locationTo: "Location to",
            locationFrom: "Location from",
            inbound: "Inbound",
            supplier: "Supplier",
            supplierCode: "Supplier code",
            noOfPallets: "Number of pallets",
            productNewPallet: "This product will get a new pallet.",
            productMoveTo: "This product will be moved to",
            moveProductTo: "Move product to",
            productMovedTo: "Product moved to",
            readyForChecking: "ready for checking",
            no: "No",
            yes: "Yes",
            barcode: "Barcode",
            scanBarcode: "Scan barcode",
            productBarcode: "Product barcode",
            product: "Product",
            nextPicklist: "Next picklist",
            back: "Back",
            sortingLocation: "Sorting location",
            reprintLabel: "Reprint label",
            broken: "Broken",
            ammountAdded: "Amount added",
            palletFull: "Pallet full",
            countingAssistant: "Counting assistant",
            cancel: "Cancel",
            cancelAction: "Cancel action",
            ok: "OK",
            unitsPerCarton: "Units per carton",
            cartonsPerLayer: "Cartons per layer",
            layers: "Layers",
            individualCartons: "Individual cartons",
            individualUnits: "Individual units",
            totalCartons: "Total cartons",
            totalUnits: "Total units",
            clear: "Clear",
            damagedGoods: "Damaged goods",
            cancelPickingLine: "Are you sure you want to cancel this line?",
            twoInboundLines: "This product is expected on multiple lines.",
            physicalLocation: "Physical Location",
            replenishmentActions: "Replenishment actions",
            errorPalletsNotMoveable:
                "Not all the pallets from this location are moveable.",
            errorPalletsDontFit:
                "Present pallets on this location don't fit on truck.",
            skip: "Skip",
            start: "Start",
            truck: "Truck",
            moveRequest: "Move request",
            availableQuantity: "Available quantity",
            replenished: "Replenished",
            replenishSuccess:
                "Replenish successfull! Move remaining goods to end location.",
            finalizeMovement: "Finalize movement",
            finalize: "Finalize",
            nextAction: "Next action",
            chooseAction: "Choose action",
            movePallet: "Move pallet",
            replenishAction: "Replenish action",
            notMoveablePallet:
                "The selected replenishment action is not valid anymore. Please select another one to start replenish.",
            quantityBigger:
                "Quantity to replenish is bigger than available quantity.",
            actionComplete: "Action complete",
            fromLocationNotValid: "From location is not valid.",
            truckIsNotValid: "Truck is not valid.",
            notValidAction:
                "The selected replenishment action is not valid anymore. Please select another one to start replenish.",
            destination: "Destination",
            cancelReplenishment:
                "Are you sure you want to place the pallet on location ",
            tileMenuRepalletizeAutostore: "Repalletize Autostore",
            inboundSupplier: "Inbound - Supplier",
            qtyCurrentPallet: "Quantity current pallet",
            qtyPerNewPallet: "Quantity per new pallet",
            numberOfNewPallets: "Number of new pallets",
            looseGoods: "Loose goods",
            endLocation: "End location",
            productNumber: "Product number",
            repalletizeButton: "Process repalletize session",
            packages: "Packages",
            confirmProduct: "Confirm product",
            description: "Description",
            messageBBD:
                "This is a product with a BBD date, place the goods FIFO on the location.",
            chooseProduct: "Choose product",
            packing: "Packing",
            alcohol: "Alcohol",
            tileMenuNormal: "Regular",
            tileMenuPickToCart: "Pick to cart",
            max_height: "Max. pallet height",
            outbound_handling_instructions: "Outbound handling instructions",
            confirmBox: "Confirm box",
            boxContents: "Box contents",
            boxNotCorrect: "Box not correct",
            boxCorrect: "Box correct",
            tileMenuPalletMeasurement: "Pallet measurement",
            scale: "Scale",
            measure: "Measure",
            measureAgain: "Measure again",
            result: "Result",
            emptyTUID: "Please put goods in a new TU",
            putTUID: "Please put the goods in TU:",
            emptyTUID3: "Empty TU, scan product",
            putTUID3: ", scan product",
            emptyTUID2: "Empty TU, fill in quantity",
            putTUID2: ", fill in quantity",
            splitPalletYN:
                "You entered the full pallet quantity, are you sure you want to move the full pallet?",
        },
        NL: {
            menu: "Menu",
            tileMenuPalletMovement: "Pallet verplaatsen",
            tileMenuCycleCount: "Voorraad tellen",
            tileMenuPickReplenishment: "Grijp aanvullingen",
            tileMenuControlevak: "Controlevak",
            tileMenuPicking: "Picken",
            tileMenuLoadShipment: "Verzending laden",
            tileMenuChange: "Wijzig omgeving",
            tileMenuWarehouse: "Wijzig magazijn",
            tileMenuLogoff: "Uitloggen",
            invalidCredentials:
                "Ongeldige gebruikersnaam / wachtwoord combinatie",
            invalidPallet: "Ongeldige PalletId",
            invalidTruck: "Ongeldige truck ID",
            emptyLocation: "Gescande locatie is leeg",
            scanTruck: "Geen default truck gevonden, voer een truck in",
            unfinishedMovement: "Onafgeronde verplaatsing",
            finishTheMovement:
                "Deze verplaatsing moet worden afgerond, scan de eindlocatie van de pallet",
            movementSuccessful: "Verplaatsing succesvol",
            successful: "Succesvol",
            noReplenishment:
                "Geen grijpaanvullings verzoek gevonden voor deze sectie",
            noReplenishment2: "Geen grijpaanvullings verzoek gevonden",
            noMoveRequest: "Geen verplaatsings verzoek voor deze verzending.",
            noShipment:
                "Geen verplaatsingsverzoeken gevonden voor deze verzending/resource voor dit magazijn.",
            difference: "Verschil",
            countLine: "Tel regel",
            choosePicklist: "Kies picklijst",
            confirmChoice: "Bevestig keuze",
            confirmPallet: "Bevestig pallet",
            picklistCompleted: "Picklijst compleet",
            enterQuantity: "Voer aantal in",
            palletInformation: "Pallet gegevens",
            checkLocation: "Controlevak",
            shipment: "Verzending",
            scanShipment: "Scan verzending",
            closeCountSession:
                "De telopdracht wordt afgebroken, wilt u doorgaan?",
            location: "Locatie",
            preferedLocation: "Gew. Loc.",
            goToLocation: "Ga naar locatie",
            moveToLocation: "Verplaats locatie",
            palletRef: "Pallet referentie",
            deadline: "Deadline",
            freeze: "Vries",
            cool: "Koel",
            dry: "Droog",
            section: "Sectie",
            lines: "Regels",
            counted: "Geteld",
            confirm: "Bevestig",
            quantity: "Aantal",
            customer: "Klant",
            started: "Gestart",
            weight: "Gewicht",
            height: "Hoogte",
            picklist: "Picklijst",
            scanNotPossible: "Scan onmogelijk",
            requested: "Gevraagd",
            noLinesToPick: "Er zijn geen regels meer te picken.",
            noLinesToPickOk:
                "Er zijn geen regels meer te picken en alle pallets zijn af. Klik op OK om de picklijst op verwerkt te zetten.",
            confirmProcessPallet: "Meld pallet af",
            carrierType: "Drager type",
            checkId: "ControleId",
            checkRemark: "Controle opmerking",
            newLabel: "Nieuw",
            locationNotEmpty: "Locatie niet leeg",
            checkLSU: "Controleer uitslag-LOE",
            palletFull: "Pallet vol",
            instructions: "Instructies",
            picked: "Gepicked",
            fullyPicked: "Volledig gepicked",
            missingGoods: "Vermist",
            brokenPieces: "Breuk",
            extraFound: "Extra gevonden",
            countOk: "Telling OK",
            endlocation: "Eindlocatie",
            reference: "Referentie",
            scanResult: "Scan resultaat",
            confirmManually: "Handmatig bevestigen",
            skipLine: "Regel overslaan",
            cancelLine: "Annuleer regel",
            getPallet: "Haal pallet",
            placePallet: "Plaats pallet",
            assigned: "Toegewezen",
            cancelMoveRequest: "Annuleer verplaatsingsverzoek", //Annuleren verplaatsing,
            cancelMoveRequestYN:
                "Weet u zeker dat u het verplaatsingsverzoek wil annuleren?",
            tileMergePallets: "Pallets samenvoegen",
            scanned: "Scanned pallet",
            targetLocation: "Doel locatie",
            palletType: "Pallet type",
            palletHeight: "Pallet hoogte (cm)",
            tilePalletEnLocatie: "Pallet en locatie info",
            pallet: "Pallet",
            palletLocation: "Pallet/Location",
            startSession: "Start sessie",
            createPallet: "Pallet aanmaken",
            newSession: "Nieuwe sessie",
            emptyBoxes: "Lege dozen",
            locationTo: "Locatie naar",
            locationFrom: "Locatie van",
            tileInboundScanning: "Inslag scanning",
            inbound: "Inslag",
            supplier: "Leverancier",
            supplierCode: "Code leverancier",
            noOfPallets: "Aantal pallets",
            scanProduct: "Product",
            scanQty: "Aantal",
            productNewPallet: "Nieuwe pallet voor dit product.",
            productMoveTo: "Product wordt geplaatst op",
            nextPallet: "Volgende pallet",
            moveProduct: "Verplaats product",
            moveProductTo: "Zet product op",
            productMovedTo: "Product op pallet geplaats",
            palletReady: "Pallet klaar voor controle",
            palletNotReady: "Set pallet not ready",
            nextProduct: "Volgend product",
            readyForChecking: "klaar voor controle",
            printPallet: "Print palletsticker",
            closeInboundSession:
                "Weet u zeker dat u de inslag scanning wil beeindigen?",
            closeInboundSessionCancel: "Bevestig annuleren?",
            no: "Nee",
            yes: "Ja",
            scanBarcode: "Scan barcode",
            productBarcode: "Product barcode",
            barcode: "Barcode",
            product: "Product",
            nextPicklist: "Volgende picklists",
            back: "Back",
            sortingLocation: "Sorteer locatie",
            reprintLabel: "Reprint label",
            broken: "Breuk",
            ammountAdded: "Amount added",
            palletFull: "Pallet full",
            countingAssistant: "Tel Hulp",
            cancel: "Annuleer",
            cancelAction: "Cancel action",
            clear: "Velden leegmaken",
            damagedGoods: "Beschadigd product",
            ok: "OK",
            unitsPerCarton: "Eenheden per doos",
            cartonsPerLayer: "Dozen per laag",
            layers: "Aantal lagen",
            individualCartons: "Losse dozen",
            individualUnits: "Losse eenheden",
            totalCartons: "Totaal dozen",
            totalUnits: "Totaal eenheden",
            cancelPickingLine: "Weet je zeker dat je deze regel wil annuleren?",
            twoInboundLines:
                "Dit product is verwacht op meerdere inslagregels.",
            physicalLocation: "Fysieke locatie",
            replenishmentActions: "Replenishment actions",
            errorPalletsNotMoveable:
                "Not all the pallets from this location are moveable.",
            errorPalletsDontFit:
                "Present pallets on this location don't fit on truck.",
            skip: "Overslaan",
            start: "Start",
            truck: "Truck",
            moveRequest: "Verplaatsingsverzoek",
            availableQuantity: "Beschikbaar op pallet",
            replenished: "Grijp aangevuld",
            replenishSuccess:
                "Grijpaanvulling succesvol! Verplaats resterende goederen naar de eindlocatie.",
            finalizeMovement: "Verplaatsing afronden",
            finalize: "Afronden",
            nextAction: "Next action",
            chooseAction: "Kies actie",
            movePallet: "Verplaats pallet",
            replenishAction: "Aanvul actie",
            notMoveablePallet:
                "De geselecteerde aanvullingsactie is niet meer valide. Kies a.u.b. een andere actie.",
            quantityBigger:
                "Aantal aan te vullen is groter dan het beschikbare aantal!",
            actionComplete: "Actie compleet",
            fromLocationNotValid: "Herkomst locatie is niet geldig.",
            truckIsNotValid: "Truck is niet geldig.",
            notValidAction: "De gekozen aanvul actie is niet langer geldig.",
            destination: "Bestemming",
            cancelReplenishment:
                "Weet je zeker dat je de pallet wilt terugplaatsen op locatie ",
            tileMenuRepalletizeAutostore: "Herpalletiseer Autostore",
            inboundSupplier: "Inslag - leverancier",
            qtyCurrentPallet: "Aantal pallet huidig",
            qtyPerNewPallet: "Aantal per pallet nieuw",
            numberOfNewPallets: "Aantal LOE nieuw",
            looseGoods: "Losse goederen",
            endLocation: "Eind locatie",
            productNumber: "Productnummer",
            repalletizeButton: "Verwerk sessie",
            packages: "Colli",
            confirmProduct: "Bevestig product",
            description: "Omschrijving",
            messageBBD:
                "Dit is een THT product, plaats de goederen FIFO op de locatie.",
            chooseProduct: "Selecteer product",
            packing: "Verpakking",
            alcohol: "Alcohol",
            tileMenuNormal: "Regulier",
            tileMenuPickToCart: "Pick to cart",
            max_height: "Maximale hoogte",
            confirmBox: "Bevestig doos",
            boxContents: "Inhoud doos",
            boxNotCorrect: "Doos niet correct",
            boxCorrect: "Doos correct",
            tileMenuPalletMeasurement: "Pallet wegen",
            scale: "Weegschaal",
            measure: "Wegen",
            measureAgain: "Opnieuw wegen",
            result: "Resultaat",
            emptyTUID: "Scan een lege TU",
            putTUID: "Plaats de goederen in TU:",
            emptyTUID3: "Empty TU, scan product",
            putTUID3: ", scan product",
            emptyTUID2: "Empty TU, fill in quantity",
            putTUID2: ", fill in quantity",
            splitPalletYN:
                "You entered the full pallet quantity, are you sure you want to move the full pallet?",
        },
    };

    self.Lang = ko.observable();
    // Load Shipment - Prevent scanning a pallet with is not part of the current resource
    self.checkLoadShipment = ko.observable(false);
    self.wrongPicklistMessage = ko.observable(""); // display an message when the scanned picklist is incorrect

    /* **** FUNCTIONS **** */

    // Generate GUID
    self.guid = function () {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                .toString(16)
                .substring(1);
        }

        return (
            s4() +
            s4() +
            "-" +
            s4() +
            "-" +
            s4() +
            "-" +
            s4() +
            "-" +
            s4() +
            s4() +
            s4()
        );
    };

    self.getManifest = function () {
        self.showLoader(true);
        $.getJSON(WS_ROOT_SYSTEM + WS.manifest, function (data) {
            if (data) {
                if (!data.PackageId) {
                    self.errorMessage("Loading Manifest. PackageId is empty");
                }
                if (!data.PasswordHashLevel.toString()) {
                    self.errorMessage(
                        "Loading Manifest. PasswordHashLevel is empty"
                    );
                }
                if (data.PackageId && parseInt(data.PasswordHashLevel) >= 0) {
                    self.packageId(data.PackageId);
                    self.passwordHashLevel(data.PasswordHashLevel);
                } else {
                    self.errorMessage(
                        "LoadingManifest error. PackageId: " +
                            data.PackageId +
                            "; PasswordHashLevel: " +
                            data.PasswordHashLevel
                    );
                }
            } else {
                self.errorMessage(
                    "Loading message. Manifest could not be loaded or it is empty"
                );
            }
        })
            .done(function () {
                self.showLoader(false);
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                self.errorMessage("Loading manifest error.");
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.getManifest();

    self.loginPUT = function () {
        if (self.username() !== null && self.username() !== undefined) {
            self.showLoader(true);
            var hashedPassword = "";

            if (parseInt(self.passwordHashLevel()) === 1) {
                // Level 1: SHA2-512(MD5(password) + separator + PackageId)
                hashedPassword = CryptoJS.SHA512(
                    CryptoJS.MD5($("#password").val()) + "|" + self.packageId()
                ).toString();
            } else {
                // Level 0: MD5(password)
                hashedPassword = CryptoJS.MD5($("#password").val()).toString();
            }

            var loginGuid = self.guid();
            var jsonObj = {
                LoginRequest: {
                    GUID: loginGuid,
                    UserId: self.username(),
                    HashedPassword: hashedPassword,
                },
            };

            jsonObj = JSON.stringify(jsonObj);

            $.ajax({
                type: "PUT",
                url:
                    WS_ROOT +
                    WS.PUT_LOGIN +
                    "?ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode,
                data: jsonObj,
                contentType: "application/json; charset=utf-8",
                dataType: "text",
            })
                .done(function () {
                    self.loginGET(loginGuid);
                })
                .error(function (xhr, status, error) {
                    if (xhr.responseText) {
                        self.showLoader(false);
                        var message = JSON.parse(xhr.responseText).message;
                        self.errorMessage(message);
                        self.hideErrorMessage();
                    }
                })
                .always(function () {
                    self.showLoader(false);
                });
        }
    };

    self.loginGET = function (requestGuid) {
        $.getJSON(
            WS_ROOT +
                WS.GET_LOGIN +
                "?RequestGUID=" +
                requestGuid +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            function (data) {
                if (
                    data &&
                    data.Scanner_LoginRequest &&
                    data.Scanner_LoginRequest.SuccessfullyLogin
                ) {
                    if (
                        data.Scanner_LoginRequest.SuccessfullyLogin === "true"
                    ) {
                        //LOGIN success
                        self.loggedIn(self.username());
                        self.warehouseId(data.Scanner_LoginRequest.WarehouseID);
                        self.LOECodeOutbound(
                            data.Scanner_LoginRequest.LOECodeOutbound
                        );

                        localStorage.setItem("loggedIn", self.username());
                        localStorage.setItem(
                            "warehouseId",
                            data.Scanner_LoginRequest.WarehouseID
                        );

                        //Get default truck
                        self.getDefaultTruck();

                        //check if the use can change environment
                        if (data.Scanner_LoginRequest.IsAdminYN === "true") {
                            self.canChangeEnvironment(true);
                        } else {
                            self.canChangeEnvironment(false);
                        }

                        localStorage.setItem(
                            "canChangeEnvironment",
                            self.canChangeEnvironment()
                        );

                        self.openMenu();
                        self.showLoader(false);
                        //clear password field
                        $("#password").val("");
                        //set language id
                        switch (data.Scanner_LoginRequest.Language) {
                            case "10":
                                self.Lang("EN");
                                break;
                            case "0":
                                self.Lang("NL");
                                break;
                            default:
                                self.Lang("EN");
                        }

                        localStorage.setItem("Lang", self.Lang());

                        // update flag Load Shipment - Prevent scanning a pallet with is not part of the current resource
                        if (
                            data &&
                            data.Scanner_LoginRequest &&
                            data.Scanner_LoginRequest
                                .CheckLoadShipmentScannedValue
                        ) {
                            self.checkLoadShipment(
                                data.Scanner_LoginRequest
                                    .CheckLoadShipmentScannedValue === "true"
                            );
                        }

                        if (
                            data.Scanner_LoginRequest.PasswordNotifyExpire ===
                            "true"
                        ) {
                            console.log(
                                data.Scanner_LoginRequest
                                    .PasswordNotifyExpireMessage
                            );
                            self.errorMessage(
                                data.Scanner_LoginRequest
                                    .PasswordNotifyExpireMessage
                            );
                            self.hideErrorMessage(3000);
                        }
                    } else {
                        localStorage.clear();
                        //LOGIN denied
                        //set default language to NL
                        self.Lang("EN");
                        self.warehouseId(null);
                        self.errorMessage(
                            data.Scanner_LoginRequest.LoginErrorMessage
                        );
                        self.hideErrorMessage();
                        $("#password").val("");
                    }
                } else {
                    self.errorMessage("Login service error!");
                }
            }
        )
            .done(function () {
                self.showLoader(false);
            })
            .error(function (xhr, status, error) {
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    self.hideErrorMessage();
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    // Login by pressing enter
    self.keyPressLogin = function (data, event) {
        if (event.which === 13) {
            self.loginPUT();
        }
    };

    self.logoff = function () {
        localStorage.clear();
        self.successMessage(false);
        self.errorMessage(null);
        self.loggedIn(null);
        self.username("");
        self.page("login");
        $("#username").focus();
    };

    //show it only if users have admin rights
    self.changeEnvironment = function () {
        //go to landing page
        location.href = appConfig.WS_LandingPage;
    };

    // Generic function go to "page"
    self.goToPage = function (page) {
        self.successMessage(false);
        self.errorMessage(null);
        switch (page) {
            case "loadShipment":
                self.currentFunctionForPalletMove("loadShipment");
                self.page(page);
                $("#scanShipmentId").focus();
                break;
            case "changeWarehouse":
                //Get the list of the available warehouses from API
                self.getWarehouses();
                break;
            case "inboundScanning":
                setTimeout(function () {
                    $("#inboundPalletId").focus();
                }, 250);
                break;
            case "palletMeasurement":
                setTimeout(function () {
                    $("#palletMeasurementId").removeAttr("readonly");
                    $("#palletMeasurementId").focus();
                }, 250);
                break;
            case "repalletizeAutostore":
                $("#repalletizePalletId").prop("readonly", false);
                self.showProcessButton(false);
                self.scanRepalletize("");
                self.showStartRepalletize(false);
                setTimeout(function () {
                    $("#repalletizePalletId").focus();
                }, 250);
                break;
            case "countingAssistant":
                self.unitsPerCarton("0");
                self.cartonsPerLayer("0");
                self.layers("1");
                self.individualCartons("0");
                self.individualUnits("0");
                self.totalCartons("0");
                self.totalUnits("0");
                setTimeout(function () {
                    $("#unitsPerCarton").focus();
                }, 250);
                break;
            case "inboundScanningProduct":
                $("#inboundProductId").prop("readonly", false);
                setTimeout(function () {
                    $("#inboundProductId").focus();
                }, 250);
                break;
            case "inboundScanningMoveProduct":
                setTimeout(function () {
                    $("#inboundPalletMoveId").focus();
                }, 250);
                break;
            case "pickenPickingProcess":
                setTimeout(function () {
                    $("#pickingBarcodeInputNew").focus();
                }, 250);
                break;
            case "inboundScanningMoveProduct2":
                page = "inboundScanningMoveProduct";
                setTimeout(function () {
                    $("#inboundProductQty").focus();
                }, 250);
                break;
            case "mergePallets":
                setTimeout(function () {
                    $("#mergePalletId").focus();
                }, 250);
                break;
            case "splitPallet":
                setTimeout(function () {
                    $("#splitPalletInput").focus();
                }, 250);
                break;
        }
        //navigate to the page
        self.page(page);
    };

    // REDIRECT IF ALREADY LOGGED IN
    self.page.subscribe(function (newPage) {
        localStorage.setItem("page", newPage);
    });

    self.getWarehouses = function () {
        self.showLoader(true);
        $.getJSON(
            WS_ROOT +
                WS.GET_WAREHOUSES +
                "?CurrentUserId=" +
                self.loggedIn() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            function (data) {
                if (
                    data &&
                    data.ListOfWarehouses &&
                    data.ListOfWarehouses.ListOfAllowedWarehouses &&
                    data.ListOfWarehouses.ListOfAllowedWarehouses
                        .AllowedWarehouse
                ) {
                    // sort the list of the warehouses alphabetically
                    var sortedArray =
                        data.ListOfWarehouses.ListOfAllowedWarehouses.AllowedWarehouse.sort(
                            function (a, b) {
                                if (a.WarehouseId < b.WarehouseId) return -1;
                                else if (a.WarehouseId > b.WarehouseId)
                                    return 1;
                                return 0;
                            }
                        );

                    self.warehouseList(sortedArray);
                } else {
                    //we did not retrieve any warehouse
                    self.errorMessage("Unable to retrieve warehouse");
                }
            }
        )
            .done(function () {
                self.showLoader(false);
            })
            .error(function (xhr, status, error) {
                self.errorMessage("Retrieve available warehouses error.");
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.selectWarehouse = function (selectedWarehouseId) {
        if (selectedWarehouseId && selectedWarehouseId.WarehouseId) {
            self.warehouseId(selectedWarehouseId.WarehouseId);
            self.getDefaultTruck();
            self.goToPage("menu");
        }
    };

    // Go to login page (works as logout for POC)
    self.openLogin = function () {
        self.username("");
        self.page("login");
    };

    self.getMovementFilters = function () {
        self.opiateClass("");
        self.showMovementFilters(true);
        self.showLoader(true);
        self.movementFiltersValue("");
        self.clearValues(); //clear all values for truck/palletId/Location/movementId
        //reset all errors
        self.successMessage(false);
        self.errorMessage(null);
        self.currentFunctionForPalletMove("");

        //self.getMovementFilters();

        //self.currentFunctionForPalletMove('loadShipment');
        self.palletMovementHeader(self.Dictionary[self.Lang()].getPallet);
        self.page("palletMovement");
        $.getJSON(
            WS_ROOT +
                WS.GET_Movement_Filters +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            "&UserIdLoggedIn=" +
                self.loggedIn() +
                "&WarehouseCode=" +
                self.warehouseId(),
            function (data) {
                console.log(data);
                var movementFilters = [];
                if (
                    data &&
                    data.WarehouseSectionList &&
                    data.WarehouseSectionList.WarehouseSection
                ) {
                    if (
                        data.WarehouseSectionList.WarehouseSection.length == 0
                    ) {
                        self.errorMessage(
                            self.Dictionary[self.Lang()].noReplenishment2
                        );
                        self.hideErrorMessageNavigate(null, "menu");
                        return;
                    }

                    $.each(
                        data.WarehouseSectionList.WarehouseSection,
                        function (i, filterObj) {
                            if (filterObj.SectionCode != "") {
                                movementFilters.push(filterObj.SectionCode);
                            } else {
                                movementFilters.push("Intermediate");
                            }
                        }
                    );
                    self.movementFiltersArray(movementFilters);
                } else {
                    self.errorMessage(
                        self.Dictionary[self.Lang()].noReplenishment2
                    );
                    self.hideErrorMessageNavigate(null, "menu");
                }
            }
        )
            .done(function (data) {
                self.showLoader(false);
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.openPalletMovement = function (moduleFrom, scanPalletId) {
        self.showLoader("true");
        self.opiateClass("");
        if (moduleFrom == "palletMovement") {
            self.showMovementFilters(false);
        }
        //self.movementFiltersValue("");
        self.clearValues(); //clear all values for truck/palletId/Location/movementId
        //reset all errors
        self.successMessage(false);
        self.errorMessage(null);
        self.currentFunctionForPalletMove(moduleFrom);

        //self.getMovementFilters();

        //self.currentFunctionForPalletMove('loadShipment');
        self.palletMovementHeader(self.Dictionary[self.Lang()].getPallet);
        self.page("palletMovement");

        //show palletId if default truck is filled
        if (self.defaultTruck() || self.scanTruck()) {
            if (moduleFrom == "picking") {
                self.scanPallet(scanPalletId);
                self.showScanPalletPicking();
            } else {
                // DO NOT LEAVE COMMENTED OUT
                self.showScanPallet();
            }
        } else {
            // focus the default truck
            $("#scanTruck").focus();
        }
        self.showLoader("false");
    };

    self.refreshLocations = function () {
        self.showLoader(true);
        var json_url =
            WS_ROOT +
            WS.GET_WarehouseInfo +
            "?Warehouse=" +
            self.warehouseId() +
            "&User=" +
            self.loggedIn() +
            "&ConcernCode=" +
            self.ConcernCode +
            "&CompanyCode=" +
            self.CompanyCode;

        $.getJSON(json_url, function (data) {
            console.log(data);
            if (data && data.Magazijn) {
                if (data.Magazijn.GenerateCycleCountRequest == "true") {
                    self.showLoader(true);
                    var json_url2 =
                        WS_ROOT +
                        WS.GET_LocationCountRequest +
                        "?WarehouseID=" +
                        self.warehouseId() +
                        "&UserId=" +
                        self.loggedIn() +
                        "&ConcernCode=" +
                        self.ConcernCode +
                        "&CompanyCode=" +
                        self.CompanyCode +
                        "&State=10";

                    $.getJSON(json_url2, function (data2) {
                        console.log(data2);

                        if (
                            data2 &&
                            data2.ConventionalWarehouseCountRequest &&
                            data2.ConventionalWarehouseCountRequest
                                .ConventionalWarehouseCountRequest
                        ) {
                            self.locationCountArray(
                                data2.ConventionalWarehouseCountRequest
                                    .ConventionalWarehouseCountRequest
                            );
                        } else {
                            self.locationCountArray.removeAll();
                        }
                    }).always(function () {
                        self.showLoader(false);
                    });
                }
            }
        }).always(function () {
            self.showLoader(false);
        });
    };

    self.openCycleCount = function () {
        self.successMessage(false);
        self.errorMessage(null);
        if (self.ccUnfinishedProcess() === true) {
            self.page("warningUnfinishedProcess");
        } else if (self.ccUnfinishedProcess() === false) {
            self.ccScanLocation(null);
            self.page("cycleCountLocation");
            $("#ccScanLocation").focus();

            self.refreshLocations();
        }
    };

    self.openCycleLine = function () {
        self.currentPageCycleCountPV(false);
        self.currentPageZeroLines(false);
        self.successMessage(false);
        self.errorMessage(null);

        self.page("cycleCountLine")  
    };

    self.openMenuPalletMeasurement = function () {
        if (self.scanScalePalletMeasurement() != "") {
            self.scanScalePalletMeasurement("");
            self.palletMeasurementStep3(false);
            self.showMeasureButton(false);
            setTimeout(function () {
                $("#scalePalletMeasurementId").removeAttr("readonly");
                $("#scalePalletMeasurementId").focus();
            }, 250);
        } else if (self.scanPalletMeasurement() != "") {
            self.scanPalletMeasurement("");
            self.palletMeasurementStep2(false);
            setTimeout(function () {
                $("#palletMeasurementId").removeAttr("readonly");
                $("#palletMeasurementId").focus();
            }, 250);
        } else {
            self.scanPalletMeasurement("");
            self.page("menu");
        }
    };

    self.openMenuInbound = function () {
        console.log(self.currentPallet());
        console.log(self.inboundId());
        if (self.currentPallet() != "" || self.inboundId() !== undefined) {
            if (self.inboundId() == "") {
                self.scanInbound("");
                self.openMenu();
            } else {
                self.previousPage(self.page());
                self.page("warningUnfinishedProcessInbound");
            }
        } else {
            self.scanInbound("");
            self.openMenu();
        }
    };

    self.cancelPopupInbound = function () {
        self.previousPage(self.page());
        self.page("warningUnfinishedProcessInboundCancel");
    };

    self.openMenuMerge = function () {
        if (self.page() == "mergePalletsType") {
            if (self.Lang() == "EN")
                self.errorMessage("Merge session has to be finalized.");
            else self.errorMessage("Merge sessie moet eerst afgerond worden.");
            self.hideErrorMessage();
            //self.page('mergePallets');
        } else if (self.page() == "mergePalletsSuccess") {
            self.mergePalletsReset("openMenu");
        } else if (self.page() == "mergePalletsFail") {
            self.page("mergePalletsType");
        }
    };
    self.openMenuPalletEnLocatie = function () {
        if (self.showPalletInfoList() == true) {
            self.palletEnLocatieArray.removeAll();
            self.showPalletInfoList(false);
            self.scanPalletEnLocatie("");
            self.titleForPalletEnLocatie("Pallet en locatie");
            self.goToPage("palletEnLocatie");
        } else {
            self.scanPalletEnLocatie("");
            self.openMenu();
        }
    };

    self.openPickingScreenSelection = function () {
        self.page("menuPickingType");
    };

    self.openMenu = function (param) {
        self.successMessage(false);
        self.errorMessage(null);
        //console.log(param);
        if (param === "cycleCount") {
            if (self.currentPageZeroLines() != true) {
                self.showEmptyPalletButtons(false); //reset the question with empty location buttons
            }

            self.openCycleCountFlag(true);
            //console.log(self.ccUnfinishedProcess());
            if (self.ccUnfinishedProcess() === true) {
                self.page("warningUnfinishedProcess");
            } else if (self.ccUnfinishedProcess() === false) {
                self.page("menu");
            }
        } else {
            self.page("menu");
        }
    };

    self.closeShowStock = function () {
        if (self.previousPage() == "palletMovement") {
            self.page("palletMovement");
            setTimeout(function () {
                $("#scanLocation").focus();
            }, 250);
        } else {
            self.page("splitPalletLocation");
            setTimeout(function () {
                $("#scanLocationSplit").focus();
            }, 250);
        }
    };

    self.closeInboundSession = function () {
        if (
            self.page() == "inboundScanningMoveProduct" &&
            (self.showFinalBottomButtons1() == true ||
                self.showFinalBottomButtons2() == true)
        ) {
            self.showFinalBottomButtons1(false);
            self.showFinalBottomButtons2(false);
            self.moveLastPage(false);
            self.showQtyScan(false);
            self.scanMoveInbound("");
            self.productInboundQty("");
            setTimeout(function () {
                $("#inboundPalletMoveId").focus();
            }, 250);
        } else {
            console.log("PAGE: " + self.page());
            if (self.page() == "chooseProductPage") {
                if (self.showProductScan() == false) {
                    self.productInbound("");
                    self.page("inboundScanningProduct");
                    setTimeout(function () {
                        $("#inboundProductId").focus();
                    }, 250);
                } else {
                    self.previousPage(self.page());
                    self.page("warningUnfinishedProcessInbound");
                }

                //self.page("inboundScanningProduct");
            } else if (
                self.page() == "inboundScanningProduct" &&
                self.multipleProductsPage() == true
            ) {
                self.page("chooseProductPage");
            } else {
                self.previousPage(self.page());
                self.page("warningUnfinishedProcessInbound");
            }
        }
    };

    self.warningCancelPickingLine = function () {
        self.previousPage(self.page());
        self.page("warningUnfinishedProcessPickingCancel");
    };

    self.backToMenu = function () {
        self.checkUnfinishedMovements(function () {
            if (self.unfinishedMovement() === false) {
                self.page("menu");
                //clear the last used truck
                self.lastUsedTruck("");
                self.resetLoadShipmentData();
            } else {
                self.errorMessage(
                    self.errorMessage(
                        self.Dictionary[self.Lang()].finishTheMovement
                    )
                );
                self.hideErrorMessage();
            }
        }, true);
    };

    self.getDefaultTruck = function () {
        self.showLoader(true);
        $.getJSON(
            WS_ROOT +
                WS.DEFAULT_TRUCK +
                "?UsesrId=" +
                self.loggedIn() +
                "&Warehouse=" +
                self.warehouseId() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            function (data) {
                if (data && data.DefaultTruck && data.DefaultTruck.Truck) {
                    self.defaultTruck(data.DefaultTruck.Truck);
                    self.scanTruck(self.defaultTruck());
                    //if truck is filled, show the Pallet input.
                    $("#showScanPallet").addClass("visible");
                    $("#scanPalletId").focus();
                } else {
                    //if there is no default truck, try to use the last one, or enter it manually
                    self.scanTruck(null);
                    self.defaultTruck(null);
                    self.errorMessage(self.Dictionary[self.Lang()].scanTruck);
                    self.hideErrorMessage();
                    $("#scanTruck").focus();
                }

                // update flag Load Shipment - Prevent scanning a pallet with is not part of the current resource
                if (
                    data &&
                    data.DefaultTruck &&
                    data.DefaultTruck.CheckLoadShipmentScannedValue
                ) {
                    self.checkLoadShipment(
                        data.DefaultTruck.CheckLoadShipmentScannedValue ===
                            "true"
                    );
                }
            }
        )
            .done(function () {
                self.showLoader(false);
            })
            .error(function (xhr, status, error) {
                self.errorMessage("Default truck service error.");
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.bypassLogin = function () {
        //self.loggedIn('PalletScannerUserMW3');
        // self.loggedIn("scanningPicklist");
        // self.username("scanningPicklist");

        //self.loggedIn("igrigore");
        //self.username("igrigore");

        //self.loggedIn("sdumitroaea");
        //self.username("sdumitroaea");

        self.loggedIn("eaxinte");
        self.username("eaxinte");

        self.LOECodeOutbound(3);
        //self.warehouseId("AAS");
        self.warehouseId("FH");
        self.Lang("EN");
        self.canChangeEnvironment(true);
        //open menu page
        setTimeout(function () {
            self.getDefaultTruck();
        }, 1000);
        self.openMenu();
    };

    if (appConfig.isDevelopmentMode) {
        self.bypassLogin();
    }

    self.validateTruck = function (truckId) {
        self.showLoader(true);
        $.getJSON(
            WS_ROOT +
                WS.VALIDATE_TRUCK +
                "?TruckId=" +
                truckId +
                "&Warehouse=" +
                self.warehouseId() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            function (data) {
                if (data && data.ValidateTruck && data.ValidateTruck.TruckId) {
                    self.showScanPallet();
                } else {
                    self.errorMessage(
                        self.Dictionary[self.Lang()].invalidTruck
                    );
                    self.hideScanPallet();
                    self.hideErrorMessage();
                    self.scanTruck("");
                    self.defaultTruck("");
                    $("#scanTruck").focus();
                }
            }
        )
            .done(function () {
                self.showLoader(false);
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.checkUnfinishedMovements = function (callback, fromBackBtn) {
        self.scanLocationFrom("");
        self.showLoader(true);
        $.getJSON(
            WS_ROOT +
                WS.UNFINISHED_MOVEMENTS +
                "?TruckId=" +
                self.scanTruck() +
                "&Warehouse=" +
                self.warehouseId() +
                "&IsFromScanner=true" +
                "&Status10=10&Status1=1" +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            function (data) {
                if (data && data.UnfinishedMovements) {
                    //New requimerment: For each unfinished movement, check for PalletMoveRequest id and use it to determine the next move request by calling
                    if (
                        data.UnfinishedMovements.VoorraadVerplaatsingenList &&
                        data.UnfinishedMovements.VoorraadVerplaatsingenList
                            .VoorraadVerplaatsingen[0]
                    ) {
                        self.showLoader(false);

                        if (
                            data.UnfinishedMovements.VoorraadVerplaatsingenList
                                .VoorraadVerplaatsingen[0]
                                .PalletMovementRequest !== "0"
                        ) {
                            var pmr =
                                data.UnfinishedMovements
                                    .VoorraadVerplaatsingenList
                                    .VoorraadVerplaatsingen[0]
                                    .PalletMovementRequest;
                            self.GETPalletMoveRequest(pmr, true);
                        }

                        self.unfinishedMovement(true);
                        self.palletMovementHeader(
                            self.Dictionary[self.Lang()].placePallet
                        );
                        self.scanPallet(
                            data.UnfinishedMovements.VoorraadVerplaatsingenList
                                .VoorraadVerplaatsingen[0].PalletId
                        );
                        self.movementStockId(
                            data.UnfinishedMovements.VoorraadVerplaatsingenList
                                .VoorraadVerplaatsingen[0].MovementStockId
                        );
                        self.movementOutboundId("");
                        self.movementGoodsReceiptId("");
                        self.movementAdditionalPalletId("");
                        self.scanLocationFrom(
                            data.UnfinishedMovements.VoorraadVerplaatsingenList
                                .VoorraadVerplaatsingen[0].InitialLocationAK
                        );

                        if (
                            data.UnfinishedMovements.VoorraadVerplaatsingenList
                                .VoorraadVerplaatsingen[0]
                                .VoorkeurEindLocatieJN === "true"
                        ) {
                            self.showPreferredLocation(true);
                            self.endLocationText(
                                data.UnfinishedMovements
                                    .VoorraadVerplaatsingenList
                                    .VoorraadVerplaatsingen[0]
                                    .VoorkeurEindLocatieText
                            );
                            self.endLocationAK(
                                data.UnfinishedMovements
                                    .VoorraadVerplaatsingenList
                                    .VoorraadVerplaatsingen[0]
                                    .VoorkeurEindlocatieDisplay
                            );
                        } else {
                            self.showPreferredLocation(false);
                        }

                        self.showScanLocation();
                        self.errorMessage(
                            self.Dictionary[self.Lang()].unfinishedMovement
                        );
                        self.hideErrorMessage();
                        return;
                    } else if (
                        data.UnfinishedMovements.UitslagVerplaatsingenList &&
                        data.UnfinishedMovements.UitslagVerplaatsingenList
                            .UitslagVerplaatsingen[0]
                    ) {
                        self.showLoader(false);

                        if (
                            data.UnfinishedMovements.UitslagVerplaatsingenList
                                .UitslagVerplaatsingen[0]
                                .PalletMovementRequest !== "0"
                        ) {
                            var pmr =
                                data.UnfinishedMovements
                                    .UitslagVerplaatsingenList
                                    .UitslagVerplaatsingen[0]
                                    .PalletMovementRequest;
                            self.GETPalletMoveRequest(pmr, true);
                        }

                        self.unfinishedMovement(true);
                        self.palletMovementHeader(
                            self.Dictionary[self.Lang()].placePallet
                        );
                        self.scanPallet(
                            data.UnfinishedMovements.UitslagVerplaatsingenList
                                .UitslagVerplaatsingen[0].PalletId
                        );
                        self.scanLocationFrom(
                            data.UnfinishedMovements.UitslagVerplaatsingenList
                                .UitslagVerplaatsingen[0].InitialLocationAK
                        );
                        self.movementStockId("");
                        self.movementOutboundId(
                            data.UnfinishedMovements.UitslagVerplaatsingenList
                                .UitslagVerplaatsingen[0].MovementOutboundId
                        );
                        self.movementGoodsReceiptId("");
                        self.movementAdditionalPalletId("");
                        self.showScanLocation();
                        self.errorMessage(
                            self.Dictionary[self.Lang()].unfinishedMovement
                        );
                        self.hideErrorMessage();
                        return;
                    } else if (
                        data.UnfinishedMovements.ReceiptVerplaatsingenList &&
                        data.UnfinishedMovements.ReceiptVerplaatsingenList
                            .ReceiptVerplaatsingen[0]
                    ) {
                        self.showLoader(false);

                        if (
                            data.UnfinishedMovements.ReceiptVerplaatsingenList
                                .ReceiptVerplaatsingen[0]
                                .PalletMovementRequest !== "0"
                        ) {
                            var pmr =
                                data.UnfinishedMovements
                                    .ReceiptVerplaatsingenList
                                    .ReceiptVerplaatsingen[0]
                                    .PalletMovementRequest;
                            self.GETPalletMoveRequest(pmr, true);
                        }

                        self.unfinishedMovement(true);
                        self.palletMovementHeader(
                            self.Dictionary[self.Lang()].placePallet
                        );
                        self.scanPallet(
                            data.UnfinishedMovements.ReceiptVerplaatsingenList
                                .ReceiptVerplaatsingen[0].PalletId
                        );
                        self.scanLocationFrom(
                            data.UnfinishedMovements.ReceiptVerplaatsingenList
                                .ReceiptVerplaatsingen[0].InitialLocationAK
                        );
                        self.movementStockId("");
                        self.movementOutboundId("");
                        self.movementGoodsReceiptId(
                            data.UnfinishedMovements.ReceiptVerplaatsingenList
                                .ReceiptVerplaatsingen[0].MovementGoodsReceiptId
                        );
                        self.movementAdditionalPalletId("");
                        self.showScanLocation();
                        self.errorMessage(
                            self.Dictionary[self.Lang()].unfinishedMovement
                        );
                        self.hideErrorMessage();
                        return;
                    } else if (
                        data.UnfinishedMovements
                            .AdditionalLSUVerplaatsingenList &&
                        data.UnfinishedMovements.AdditionalLSUVerplaatsingenList
                            .AdditionalLSUVerplaatsingen[0]
                    ) {
                        self.showLoader(false);

                        if (
                            data.UnfinishedMovements
                                .AdditionalLSUVerplaatsingenList
                                .AdditionalLSUVerplaatsingen[0]
                                .PalletMovementRequest !== "0"
                        ) {
                            var pmr =
                                data.UnfinishedMovements
                                    .AdditionalLSUVerplaatsingenList
                                    .AdditionalLSUVerplaatsingen[0]
                                    .PalletMovementRequest;
                            self.GETPalletMoveRequest(pmr, true);
                        }

                        self.unfinishedMovement(true);
                        self.palletMovementHeader(
                            self.Dictionary[self.Lang()].placePallet
                        );
                        self.scanPallet(
                            data.UnfinishedMovements
                                .AdditionalLSUVerplaatsingenList
                                .AdditionalLSUVerplaatsingen[0].PalletId
                        );
                        self.scanLocationFrom(
                            data.UnfinishedMovements
                                .AdditionalLSUVerplaatsingenList
                                .AdditionalLSUVerplaatsingen[0]
                                .InitialLocationAK
                        );
                        self.movementStockId("");
                        self.movementOutboundId("");
                        self.movementGoodsReceiptId("");
                        self.movementAdditionalPalletId(
                            data.UnfinishedMovements
                                .AdditionalLSUVerplaatsingenList
                                .AdditionalLSUVerplaatsingen[0]
                                .MovementAdditionalPalletId
                        );
                        self.showScanLocation();
                        self.errorMessage(
                            self.Dictionary[self.Lang()].unfinishedMovement
                        );
                        self.hideErrorMessage();
                    } else {
                        self.showLoader(false);
                        self.unfinishedMovement(false);
                        self.scanPallet("");
                        self.movementStockId("");
                        self.movementOutboundId("");
                        self.movementGoodsReceiptId("");
                        self.movementAdditionalPalletId("");
                        self.hideScanLocation();
                        self.palletMovementHeader(
                            self.Dictionary[self.Lang()].getPallet
                        );

                        //reset all the fields and continue from the function it started: pallet movement; load shipment or pick replenishment.
                        self.resetLoadShipmentData();

                        //do this only if not from the back button
                        if (!fromBackBtn) {
                            switch (self.currentFunctionForPalletMove()) {
                                case "palletMovement":
                                    break;
                                case "loadShipment":
                                    //get next pallet request only if it's not from unfinished movement
                                    if (!self.unfinishedMovement()) {
                                        self.getNextPalletMoveRequest("2"); //'2' is the move request for the loadShipment
                                    }
                                    break;
                                case "pickReplenishment":
                                    if (!self.unfinishedMovement()) {
                                        self.getNextPalletMoveRequest("4"); //'4' is the move request for the replenishment
                                    }
                                    break;
                            }
                        }
                    }
                }
                if (callback) {
                    callback();
                }
            }
        )
            .done(function () {
                //loader is handled above for each case of unf movement and in the error function.
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                if (xhr.responseText) {
                    //var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage("Unfinished movement error!");
                    self.hideErrorMessage();
                }
            });
    };

    self.showScanPallet = function () {
        $("#showScanPallet").addClass("visible");
        $("#scanPalletId").focus();
        self.dataMoveToTruck("");
        //check for unfinished movements
        self.checkUnfinishedMovements(function () {
            if (self.unfinishedMovement() === false) {
                $("#showScanPallet").addClass("visible");
                $("#scanPalletId").focus();
            }
        });
    };

    self.showScanPalletPicking = function () {
        $("#showScanPallet").addClass("visible");
        $("#scanPalletId").focus();
        if (
            self.checkLoadShipment() &&
            self.loadShipmentData() &&
            self.loadShipmentData().MovementReason === "2"
        ) {
            self.checkPalletIsPartOfResource();
        } else {
            //console.log('MOVE TO TRUCK');
            self.step1MoveToTruck();
        }
    };

    self.hideScanPallet = function () {
        $("#showScanPallet").removeClass("visible");
    };

    self.showScanLocation = function () {
        $("#showScanLocation").addClass("visible");
        $("#scanLocation").focus();
    };

    self.hideScanLocation = function () {
        $("#showScanLocation").removeClass("visible");
    };

    self.checkPalletIsPartOfResource = function () {
        self.showLoader(true);
        var guid = self.guid();
        var jsonObj = {
            CheckLoadShipment: {
                GUID: guid,
                MoveRequestGroupId: self.shipmentInfo().MoveRequestGroupId,
                PalletId: self.scanPallet(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_GET_IS_PALLET_PART_OF_RESOURCE +
                "?GUID=" +
                guid +
                "&UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                if (
                    data &&
                    data.CheckLoadShipment &&
                    data.CheckLoadShipment.IsPartOfTheGroup === "true"
                ) {
                    self.step1MoveToTruck();
                } else {
                    if (
                        data &&
                        data.CheckLoadShipment &&
                        data.CheckLoadShipment.CheckResultMessage
                    ) {
                        self.errorMessage(
                            data.CheckLoadShipment.CheckResultMessage
                        );
                        self.hideErrorMessage();
                        //clear scanPalletId and focus again
                        self.scanPallet("");
                        $("#scanPalletId").focus();
                    }
                    self.showLoader(false);
                    self.eventStarted(false);
                }
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                self.eventStarted(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    self.hideErrorMessage();
                    //clear scanPalletId and focus again
                    self.scanPallet("");
                    $("#scanPalletId").focus();
                }
            });
    };

    self.splitConfirmQty = function () {
        console.log(self.splitPalletInput() + " / " + self.palletQuantityPeh());

        if (self.splitPalletInput() == 0 || self.splitPalletInput() == "") {
            self.errorMessage("No quantity entered.");
            self.hideErrorMessage();
            setTimeout(function () {
                $("#splitPalletInput").focus();
            }, 250);
            self.splitPalletInput("");
        } else if (self.splitPalletInput() < 0) {
            self.errorMessage("The quantity cannot be negative.");
            self.hideErrorMessage();
            setTimeout(function () {
                $("#splitPalletInput").focus();
            }, 250);
            self.splitPalletInput("");
        } else if (
            Number(self.splitPalletInput()) > Number(self.palletQuantityPeh())
        ) {
            self.errorMessage(
                "The quantity to move exceeds the quantity available."
            );
            self.hideErrorMessage();
            setTimeout(function () {
                $("#splitPalletInput").focus();
            }, 250);
            self.splitPalletInput("");
        } else if (
            Number(self.splitPalletInput()) == Number(self.palletQuantityPeh())
        ) {
            self.page("warningSplitPallet");
        } else {
            self.page("splitPalletLocation");
            setTimeout(function () {
                $("#scanLocationSplit").focus();
            }, 250);
        }
    };

    self.splitPallet = function () {
        var guid = self.guid();
        var jsonObj = {
            Interface_SplitPalletValidation: {
                GUID: guid,
                PalletId: self.dataMoveToTruck().PalletId,
                Warehouse: self.warehouseId(),
                OriginalLocationBarcode:
                    self.dataMoveToTruck().OriginalLocationBarcode,
            },
        };
        jsonObj = JSON.stringify(jsonObj);
        self.showLoader(true);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_SplitPallet +
                "?GUID=" +
                guid +
                "&UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                console.log(data);
                self.priceUnitDescription(
                    data.Interface_SplitPalletValidation.PriceUnitDescription
                );
                self.palletQuantityPeh(
                    data.Interface_SplitPalletValidation.PalletQuantityPeh
                );
                self.page("splitPallet");

                setTimeout(function () {
                    $("#splitPalletInput").focus();
                }, 250);
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                self.eventStarted(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    self.hideErrorMessage();
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.step1MoveToTruck = function () {
        var guid = self.guid();
        var jsonObj = {
            MoveToTruck: {
                GUID: guid,
                ScannedValueForPalletOrLocation: self.scanPallet(),
                Truck: self.scanTruck(),
                UserID: self.loggedIn(),
                Warehouse: self.warehouseId(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);
        self.showLoader(true);
        //console.log('SHOW LOADER');
        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_MoveToTruck_step1 +
                "?GUID=" +
                guid +
                "&UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                //Response data

                self.allowSplit(data.MoveToTruck.SplitPalletAllowed);

                self.palletMovementHeader(
                    self.Dictionary[self.Lang()].placePallet
                );
                self.showScanLocation();

                self.dataMoveToTruck("");
                self.BestBeforeDateToShow("");

                if (data && data.MoveToTruck) {
                    //if the PalletId retrieved is defined, replace the ScannedValue with the PalletId from the response
                    //This will replace the scanned location with the PalletId

                    console.log("THERE");
                    console.log(data.MoveToTruck);

                    self.dataMoveToTruck(data.MoveToTruck);

                    console.log(self.dataMoveToTruck().BestBeforeDate);

                    var initialDate = new Date(
                            self.dataMoveToTruck().BestBeforeDate
                        ),
                        formattedDate = "";

                    formattedDate =
                        ("0" + initialDate.getDate()).slice(-2) +
                        "-" +
                        ("0" + (initialDate.getMonth() + 1)).slice(-2) +
                        "-" +
                        initialDate.getFullYear();

                    console.log(formattedDate);

                    self.BestBeforeDateToShow(formattedDate);

                    if (
                        data.MoveToTruck.PalletId &&
                        data.MoveToTruck.PalletId !== "" &&
                        data.MoveToTruck.PalletId !== "0"
                    ) {
                        self.scanPallet(data.MoveToTruck.PalletId);
                    }
                    self.scanLocationFrom(data.MoveToTruck.InitialLocationAK);
                    self.palletMovementProductDescription(
                        nl2br(data.MoveToTruck.ProductDescription)
                    );

                    console.log(
                        "Opiate Class MoveToTruck:" +
                            data.MoveToTruck.OpiateClass
                    );
                    self.opiateClass(data.MoveToTruck.OpiateClass);

                    if (
                        self.currentFunctionForPalletMove() ===
                            "loadShipment" ||
                        self.currentFunctionForPalletMove() ===
                            "pickReplenishment"
                    ) {
                        //add class 'small'
                        $(".row-details-pallet-movement").addClass("small");
                    } else {
                        $(".row-details-pallet-movement").removeClass("small");
                    }

                    //verify if the scan pallet is the same with the requested pallet from the LoadShipment or Replenishment -> if not, update the screen details
                    if (
                        data.MoveToTruck.PalletMovementRequest !== "0" &&
                        data.MoveToTruck.PalletMovementRequest != "" &&
                        data.MoveToTruck.PalletMovementRequest != undefined
                    ) {
                        console.log("HERE???");
                        console.log(data.MoveToTruck);
                        self.GETPalletMoveRequest(
                            data.MoveToTruck.PalletMovementRequest,
                            false
                        );
                    }

                    // Pallet movement info
                    //get preferred location
                    if (data.MoveToTruck.VoorkeurEindLocatieJN === "true") {
                        self.showPreferredLocation(true);
                        self.endLocationText(
                            data.MoveToTruck.VoorkeurEindLocatieText
                        );
                        self.endLocationAK(
                            data.MoveToTruck.VoorkeurEindlocatieDisplay
                        );
                    } else {
                        self.showPreferredLocation(false);
                    }

                    self.movementId(data.MoveToTruck.MovementId);
                    self.movementStockId(data.MoveToTruck.MovementStockId);
                    self.movementOutboundId(
                        data.MoveToTruck.MovementOutboundId
                    );
                    self.movementGoodsReceiptId(
                        data.MoveToTruck.MovementGoodsReceiptId
                    );
                    self.movementAdditionalPalletId(
                        data.MoveToTruck.MovementAdditionalPalletId
                    );
                    if (
                        data.MoveToTruck.PalletMovementRequest &&
                        data.MoveToTruck.PalletMovementRequest !== "0"
                    ) {
                        //&& data.MoveToTruck.PalletMovementRequest !== '0'
                        self.palletMoveRequestId(
                            data.MoveToTruck.PalletMovementRequest
                        );
                    } else {
                        self.loadShipmentData("");
                    }
                    self.eventStarted(false);
                }
                //console.log("HIDE LOADER");
                self.showLoader(false);
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                self.eventStarted(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    self.hideErrorMessage();
                    //clear scanPalletId and focus again
                    self.scanPallet("");
                    $("#scanPalletId").focus();
                }
            })
            .always(function () {
                //console.log("HIDE LOADER ALWAYS");
                self.showLoader(false);
                self.eventStarted(false);
            });
    };

    self.GETPalletMoveRequest = function (pmr, UnfinishedMovement) {
        //PMR = pallet move request id; UnfinishedMovement is a boolean to indicate if we do this call from an unfinished movement
        self.showLoader(true);
        $.getJSON(
            WS_ROOT +
                WS.PUT_GET_MoveRequest +
                "?PMR=" +
                pmr +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            function (data) {
                if (data && data.PalletMoverequest) {
                    var dataDetails = data.PalletMoverequest;
                    self.displayPopupBBDForReplenishmentActions(
                        dataDetails.DisplayPopupBBDForReplenishmentActions
                    );
                    //Determine to show ResourceNumber or TransportNumber-TransportShipment
                    var displayResourceOrTransport = "";
                    if (dataDetails.MoveRequestGroup) {
                        if (
                            dataDetails.MoveRequestGroup.ResourceNumber &&
                            dataDetails.MoveRequestGroup.ResourceNumber !== ""
                        ) {
                            displayResourceOrTransport =
                                dataDetails.MoveRequestGroup.ResourceNumber;
                        } else if (
                            dataDetails.MoveRequestGroup.Transportnumber
                        ) {
                            displayResourceOrTransport =
                                dataDetails.MoveRequestGroup.Transportnumber +
                                "-" +
                                dataDetails.MoveRequestGroup.Transportshipment;
                        }
                    }
                    dataDetails.displayResourceOrShipment =
                        displayResourceOrTransport;

                    // removed at Marc request as he also removed deadline picklist from XML
                    //Case: Replenishment
                    // if (dataDetails.MovementReason === '4') {
                    //   if (dataDetails.DeadlinePicklist) {
                    //     var initialDate = new Date(dataDetails.DeadlinePicklist),
                    //       formattedDate = '';
                    //     formattedDate = ("0" + (initialDate.getDate())).slice(-2) + "-" + ("0" + (initialDate.getMonth() + 1)).slice(-2) + "-" + initialDate.getFullYear();
                    //   }
                    //   dataDetails.DeadlinePicklist = formattedDate;
                    // }
                    self.loadShipmentData(dataDetails);

                    if (
                        dataDetails.MovementReasonDescription == "Replenishing"
                    ) {
                        console.log("Opiate Class:" + dataDetails.OpiateClass);
                        self.opiateClass(dataDetails.OpiateClass);
                    }
                }
            }
        )
            .done(function () {
                //if we get here from the unfinished movement, show the 'Place pallet' screen because the pallet is already scanned
                if (UnfinishedMovement) {
                    self.palletMovementHeader(
                        self.Dictionary[self.Lang()].placePallet
                    );
                }
                self.showLoader(false);
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.getNextPalletMoveRequest = function (
        movementReason,
        warehousesection = ""
    ) {
        self.showLoader(true);
        var guid = self.guid();

        var valueForWarehousesection = "";

        if (self.movementFiltersValue() != "Intermediate") {
            valueForWarehousesection = self.movementFiltersValue();
        }

        var jsonObj = {
            NextPallet: {
                GUID: guid,
                MovementReason: movementReason,
                UserID: self.loggedIn(),
                MoveRequestGroupId:
                    self.shipmentInfo() &&
                    self.shipmentInfo().MoveRequestGroupId
                        ? self.shipmentInfo().MoveRequestGroupId
                        : "",
                Warehouse: self.warehouseId(),
                Warehousesection: valueForWarehousesection,
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_GET_NextMoveRequest +
                "?GUID=" +
                guid +
                "&UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                //Response data
                self.showLoader(false);

                //navigation loop, if nothing else to do in the 1.pallet movement, 2.load shipment, 3.pick replenishment, navigate back to the original function
                if (data && data.NextPallet) {
                    if (
                        data.NextPallet.PalletMovementRequest &&
                        data.NextPallet.PalletMovementRequest !== "0"
                    ) {
                        self.GETPalletMoveRequest(
                            data.NextPallet.PalletMovementRequest,
                            false
                        );
                    } else {
                        //no move request. go to the current function that started the pallet movement
                        if (data.NextPallet.PalletMovementRequest === "0") {
                            if (data.NextPallet.MovementReason === "4") {
                                //pick replenishment
                                self.errorMessage(
                                    self.Dictionary[self.Lang()].noReplenishment
                                );
                                self.hideErrorMessageNavigate(null, "menu");
                                //clicking the span will go to the menu. find closes span and click it

                                //go to main menu
                            } else if (data.NextPallet.MovementReason === "2") {
                                //load shipment
                                self.goToPage("loadShipment");
                            } else {
                                //open standard movement
                                self.openPalletMovement("palletMovement", "");
                            }
                        }
                    }
                }
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    self.hideErrorMessage();
                    //clear scanPalletId and focus again
                    self.scanPallet("");
                    $("#scanPalletId").focus();
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.cancelSplitButton = function (pressedButton) {
        switch (pressedButton) {
            case "cancel_no":
                self.page("splitPallet");
                self.splitPalletInput("");
                setTimeout(function () {
                    $("#splitPalletInput").focus();
                }, 250);
                break;
            case "cancel_yes":
                self.page("palletMovement");
                setTimeout(function () {
                    $("#scanLocation").focus();
                }, 250);
                break;
        }
    };

    self.cancelMoveRequestButton = function (pressedButton) {
        switch (pressedButton) {
            case "showConfirmationScreen":
                self.page("warningCancelMoverequest");
                break;
            case "cancel_no":
                self.page("palletMovement");
                break;
            case "cancel_yes":
                self.cancelMoveRequestAPI(
                    self.loadShipmentData().PalletMovementRequest
                );
                break;
        }
    };

    self.cancelMoveRequestAPI = function (pmr) {
        self.showLoader(true);
        var jsonObj = {
            CancelPalletMovementRequest: {
                GUID: self.guid(),
                PalletMovementRequest: pmr,
            },
        };

        jsonObj = JSON.stringify(jsonObj);
        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_CANCEL_MOVE_REQUEST +
                "?UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function () {
                self.showLoader(false);
                self.openPalletMovement("pickReplenishment", "");
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    var errorTimeout = 10000;
                    self.hideErrorMessage(errorTimeout);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.getMovementId = function (guid) {
        self.showLoader(true);
        $.getJSON(
            WS_ROOT +
                WS.GET_MOVEMENT_ID +
                "?GUID=" +
                guid +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            function (data) {
                if (data && data.MoveToTruck) {
                    self.movementId(data.MoveToTruck.MovementId);
                    self.movementStockId(data.MoveToTruck.MovementStockId);
                    self.movementOutboundId(
                        data.MoveToTruck.MovementOutboundId
                    );
                    self.movementGoodsReceiptId(
                        data.MoveToTruck.MovementGoodsReceiptId
                    );
                    self.movementAdditionalPalletId(
                        data.MoveToTruck.MovementAdditionalPalletId
                    );
                    self.palletMovementProductDescription(
                        nl2br(data.MoveToTruck.ProductDescription)
                    );
                    //get preferred location
                    if (data.MoveToTruck.VoorkeurEindLocatieJN === "true") {
                        self.showPreferredLocation(true);
                        self.endLocationText(
                            data.MoveToTruck.VoorkeurEindLocatieText
                        );
                        self.endLocationAK(
                            data.MoveToTruck.VoorkeurEindlocatieDisplay
                        );
                    } else {
                        self.showPreferredLocation(false);
                    }
                }
            }
        )
            .done(function (data) {
                self.showScanLocation();
                self.showLoader(false);
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.showStock = function () {
        self.previousPage(self.page());
        self.showLoader(true);
        var json_url =
            WS_ROOT +
            WS.GET_Show_Stock +
            "?ConcernCode=" +
            self.ConcernCode +
            "&CompanyCode=" +
            self.CompanyCode +
            "&UserId=" +
            self.loggedIn() +
            "&WarehouseCode=" +
            self.warehouseId() +
            "&ClusterCode=" +
            self.dataMoveToTruck().ClusterCode +
            "&ProductId=" +
            self.dataMoveToTruck().ProductId +
            "&SupplierBatchCode=" +
            self.dataMoveToTruck().SupplierBatchCode +
            "&BestBeforeDate=" +
            self.dataMoveToTruck().BestBeforeDate;

        $.getJSON(json_url, function (data) {
            self.showLoader(false);
            console.log(data);

            self.WarehouseLocationProductInfo(
                data.WarehouseLocationProductInfoList
                    .WarehouseLocationProductInfo
            );

            self.page("showExistingStock");
        }).always(function () {
            self.showLoader(false);
        });
    };

    self.cancelMoveContinuePicking = function () {
        self.scanLocation(self.picklistEndLocation());
        self.cancelMoveDuringPicking(true);
        self.step2();
    };

    self.step2Split = function () {
        console.log("Step 2 Split!");
        self.showLoader(true);
        var guid = self.guid();

        var jsonObj = {
            Scan_WS_LSU_MoveToEndLocation_SplitPallet: {
                GUID: guid,
                ProductId: self.dataMoveToTruck().ProductId,
                OriginalLocationBarcode:
                    self.dataMoveToTruck().OriginalLocationBarcode,
                QuantityOnNewPallet: String(Number(self.splitPalletInput())),
                QuantityRemainingOldPallet: String(
                    Number(self.palletQuantityPeh()) -
                        Number(self.splitPalletInput())
                ),
                MovementStockId: self.movementStockId() || 0,
                EndLocation: self.scanLocationSplit(),
                OriginalPalletId: self.dataMoveToTruck().PalletId,
                Warehouse: self.warehouseId(),
                Truck: self.scanTruck(),
                UserID: self.loggedIn(),
            },
        };
        console.log(jsonObj);
        console.log(self.dataMoveToTruck());

        jsonObj = JSON.stringify(jsonObj);
        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PALLET_MOVEMENT_STEP2_SPLIT +
                "?UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function () {
                self.showLoader(true);
                self.successMessage(true);

                //console.log("Movement successful!");

                self.errorMessage(
                    self.Dictionary[self.Lang()].movementSuccessful
                );

                self.opiateClass("");
                self.hideErrorMessage();
                self.showLoader(true);
                setTimeout(function () {
                    self.openPalletMovement(
                        self.currentFunctionForPalletMove(),
                        ""
                    );

                    //self.showLoader(false);
                    self.eventStarted(false);
                }, 2000);
            })
            .error(function (xhr, status, error) {
                self.eventStarted(false);
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    var errorTimeout = 10000;
                    self.hideErrorMessage(errorTimeout);
                    //clear scanPalletId and focus again
                    self.scanLocationSplit("");
                    self.page("splitPalletLocation");
                    setTimeout(function () {
                        $("#scanLocationSplit").focus();
                    }, 250);
                }
            })
            .always(function () {
                //self.showLoader(false);
            });
    };

    self.step2 = function () {
        self.showLoader(true);
        var guid = self.guid();

        if (self.cancelMoveDuringPicking() == false) {
            var jsonObj = {
                MoveToEndLocation: {
                    GUID: guid,
                    MovementId: self.movementId() || 0,
                    MovementStockId: self.movementStockId() || 0,
                    MovementOutboundId: self.movementOutboundId() || 0,
                    MovementGoodsReceiptId: self.movementGoodsReceiptId() || 0,
                    MovementAdditionalPalletId:
                        self.movementAdditionalPalletId() || 0,
                    EndLocation: self.scanLocation(),
                    PalletId: self.scanPallet(),
                    WarehouseID: self.warehouseId(),
                    TruckId: self.scanTruck(),
                    UserID: self.loggedIn(),
                },
            };
        } else {
            self.cancelMoveDuringPicking(false);
            /*var IsMovementDuringInternalPickilist = 0;
      if(self.movePickingType() == 'Internal')
        IsMovementDuringInternalPickilist = 1;*/

            var IsMovementDuringInternalPickilist = 1;
            var jsonObj = {
                MoveToEndLocation: {
                    GUID: guid,
                    MovementId: self.movementId() || 0,
                    MovementStockId: self.movementStockId() || 0,
                    MovementOutboundId: self.movementOutboundId() || 0,
                    MovementGoodsReceiptId: self.movementGoodsReceiptId() || 0,
                    MovementAdditionalPalletId:
                        self.movementAdditionalPalletId() || 0,
                    EndLocation: self.scanLocation(),
                    PalletId: self.scanPallet(),
                    WarehouseID: self.warehouseId(),
                    TruckId: self.scanTruck(),
                    UserID: self.loggedIn(),
                    IsMovementDuringInternalPickilist:
                        IsMovementDuringInternalPickilist,
                },
            };
        }

        jsonObj = JSON.stringify(jsonObj);
        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PALLET_MOVEMENT_STEP2 +
                "?UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function () {
                self.showLoader(false);
                self.successMessage(true);

                //console.log("Movement successful!");
                if (
                    self.currentFunctionForPalletMove() != "picking" &&
                    self.displayPopupBBDForReplenishmentActions() == "false"
                ) {
                    self.errorMessage(
                        self.Dictionary[self.Lang()].movementSuccessful
                    );
                }
                self.opiateClass("");
                self.hideErrorMessage();
                self.showLoader(true);
                setTimeout(function () {
                    self.scanLocationFromRemember(self.scanLocationFrom());
                    self.scanLocationRemember(self.scanLocation());
                    if (self.currentFunctionForPalletMove() == "picking") {
                        //on success decide the next step, open an available line or process the picklist
                        if (self.nextAvailablePicklistLineFound()) {
                            //if there is another picklist line to process select it and open the Picklist Line navigation
                            self.selectedPicklistLine(
                                self.selectedPicklist().PicklistLines
                                    .PicklistLine[
                                    self.selectedPicklistLineIndex() - 1
                                ]
                            );

                            self.openPicklistLineNavigation();
                        } else {
                            //if there are no other picklist lines to process, process the picklist
                            self.openConfirmProcessPicklist();
                        }
                    } else {
                        self.openPalletMovement(
                            self.currentFunctionForPalletMove(),
                            ""
                        );
                    }

                    self.previousPage(self.page());
                    console.log(
                        "TEST FROM / TO: " +
                            self.scanLocationFromRemember() +
                            " / " +
                            self.scanLocationRemember()
                    );
                    if (
                        self.displayPopupBBDForReplenishmentActions() == "true"
                    ) {
                        self.page("warningPalletMovementBBD");
                    }

                    self.showLoader(false);
                    self.eventStarted(false);
                }, 2000);
            })
            .error(function (xhr, status, error) {
                self.eventStarted(false);
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    var errorTimeout = 10000;
                    self.hideErrorMessage(errorTimeout);
                    //clear scanPalletId and focus again
                    self.scanLocation("");
                    self.page("palletMovement");
                    setTimeout(function () {
                        $("#scanLocation").focus();
                    }, 250);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    //key events for PalletMovement inputs
    self.keyPressTruck = function (event) {
        if (event.which == 13) {
            //update new truck value
            self.lastUsedTruck(self.scanTruck());
            //validate truck
            self.validateTruck(self.scanTruck());
        }
        return true;
    };

    /**
     * this function handles the Pallet movement - Scan pallet
     * case1. normal pallet movement
     * case2. pallet movement is started from Load shipment
     * case3. pallet movement is started from Replenishment
     */
    //Step 1 Move To Truck after scanning the pallet id
    self.keyPressPalletId = function (event) {
        if (event.which == 13 && self.eventStarted() == false) {
            self.eventStarted(true);
            if (
                self.checkLoadShipment() &&
                self.loadShipmentData() &&
                self.loadShipmentData().MovementReason === "2"
            ) {
                self.checkPalletIsPartOfResource();
            } else {
                self.step1MoveToTruck();
            }
        }
        return true;
    };

    self.doPalletSplitToLocationRequest = function () {
        self.showLoader(true);
        if (self.movementStockId() != 0) {
            var jsonObj = {
                CheckScannedStockLocation: {
                    MovementStockId: self.movementStockId() || 0,
                    EndLocation: self.scanLocationSplit(),
                    Warehouse: self.warehouseId(),
                },
            };

            jsonObj = JSON.stringify(jsonObj);

            $.ajax({
                type: "PUT",
                url:
                    WS_ROOT +
                    WS.PUT_CheckScannedStock +
                    "?UserID=" +
                    self.username() +
                    "&ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode,
                data: jsonObj,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
            })
                .done(function (data) {
                    self.showLoader(false);
                    console.log(data);

                    if (
                        data.CheckScannedStockLocation
                            .ShowMoveToLocationConfirmationMsg == "false"
                    ) {
                        self.step2Split();
                    } else {
                        self.endLocationPhysical(
                            data.CheckScannedStockLocation.EndLocationPhysical
                        );
                        self.page("warningMoveRequestSplit");
                    }
                })
                .error(function (xhr, status, error) {
                    self.showLoader(false);
                    if (xhr.responseText) {
                        var message = JSON.parse(xhr.responseText).message;
                        self.errorMessage(message);
                        var errorTimeout = 10000;
                        self.hideErrorMessage(errorTimeout);
                    }
                })
                .always(function () {
                    self.showLoader(false);
                });
        } else {
            self.step2Split();
        }
    };

    self.doPalletMovementToLocationRequest = function () {
        self.showLoader(true);

        if (self.movementStockId() != 0) {
            var jsonObj = {
                CheckScannedStockLocation: {
                    MovementStockId: self.movementStockId() || 0,
                    EndLocation: self.scanLocation(),
                    Warehouse: self.warehouseId(),
                },
            };

            jsonObj = JSON.stringify(jsonObj);

            $.ajax({
                type: "PUT",
                url:
                    WS_ROOT +
                    WS.PUT_CheckScannedStock +
                    "?UserID=" +
                    self.username() +
                    "&ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode,
                data: jsonObj,
                contentType: "application/json; charset=utf-8",
                dataType: "json",
            })
                .done(function (data) {
                    self.showLoader(false);
                    console.log(data);

                    if (
                        data.CheckScannedStockLocation
                            .ShowMoveToLocationConfirmationMsg == "false"
                    ) {
                        self.step2();
                    } else {
                        self.endLocationPhysical(
                            data.CheckScannedStockLocation.EndLocationPhysical
                        );
                        self.page("warningMoveRequest");
                        self.eventStarted(false);
                    }
                })
                .error(function (xhr, status, error) {
                    self.showLoader(false);
                    self.eventStarted(false);
                    if (xhr.responseText) {
                        var message = JSON.parse(xhr.responseText).message;
                        self.errorMessage(message);
                        var errorTimeout = 10000;
                        self.hideErrorMessage(errorTimeout);
                    }
                })
                .always(function () {
                    self.showLoader(false);
                });
        } else {
            self.step2();
        }
    };

    self.keyPressLocation = function (event) {
        if (event.which == 13 && self.eventStarted() == false) {
            self.eventStarted(true);
            self.doPalletMovementToLocationRequest();
        }
        return true;
    };

    self.keyPressLocationSplit = function (event) {
        if (event.which == 13 && self.eventStarted() == false) {
            self.doPalletSplitToLocationRequest();
        }
        return true;
    };

    //key events for CycleCount inputs
    self.keyPressCycleCountLocation = function (event) {
        if (event.which == 13) {
            self.putCycleCountLocation();
        }
        return true;
    };

    self.putCycleCountLocation = function () {
        self.showLoader(true);

        var guid = self.guid();
        self.ccHeaderGuid(guid);

        var jsonObj = {
            CycleCount_Header: {
                GUID: guid,
                UserID: self.loggedIn(),
                Location: self.ccScanLocation(),
                WarehouseID: self.warehouseId(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_CYCLECOUNT_LOCATION +
                "?UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function () {
                //get cyclecountid and use it in the GET call to retrieve lines
                self.getCycleCount_CountId(guid);
                //
                self.ccUnfinishedProcess(true);
                //clear the ccScanLocation field
            })
            .error(function (xhr) {
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    self.hideErrorMessage();
                    //clear location field
                    self.ccScanLocation("");
                    //focus scan location field
                    $("#ccScanLocation").focus();
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.getCycleCount_CountId = function (guid) {
        var cycleCountId = "";

        $.getJSON(
            WS_ROOT +
                WS.GET_CYCLECOUNT_COUNTID +
                "?GUID=" +
                guid +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            function (data) {
                if (data && data.Scann_Count_LSU_Header) {
                    self.productBarcodeValidationCycle(
                        data.Scann_Count_LSU_Header.ProductBarcodeValidation
                    );
                    self.enableUseProductPackingbarcodeCycle(
                        data.Scann_Count_LSU_Header
                            .EnableUseProductPackingbarcode
                    );

                    if (data.Scann_Count_LSU_Header.NumberOfEntries > 0) {
                        self.ccNumberOfEntries(
                            data.Scann_Count_LSU_Header.NumberOfEntries
                        );

                        //check if the cycle count expected value should be shown or hidden by "***"
                        //Leave "==" instead "===" as we can retrieve "True" instead of "true"
                        if (
                            data.Scann_Count_LSU_Header.DisableBlindCounting &&
                            data.Scann_Count_LSU_Header.DisableBlindCounting.toLowerCase() ===
                                "true"
                        ) {
                            self.disableBlindCounting(true);
                        } else {
                            self.disableBlindCounting(false);
                        }

                        //save cyclecountid
                        cycleCountId = data.Scann_Count_LSU_Header.CycleCountId;
                        self.cycleCountId(
                            data.Scann_Count_LSU_Header.CycleCountId
                        );
                        //get lines
                        self.ccLines(null);
                        self.getCycleCountLines(cycleCountId);
                    } else {
                        //console.log("0 to count");
                        self.cycleCountId(
                            data.Scann_Count_LSU_Header.CycleCountId
                        );
                        self.errorMessage(
                            self.Dictionary[self.Lang()].emptyLocation
                        );
                        self.ccUnfinishedProcess(true);
                        self.hideErrorMessage();
                        self.showEmptyPalletButtons(true);
                        self.physicalLocationCode(
                            data.Scann_Count_LSU_Header.PhysicalLocationCode
                        );
                        self.locationBarcode(
                            data.Scann_Count_LSU_Header.LocationBarcode
                        );
                        //take user back to Location Scan screen
                        self.clearCycleCountValues();
                        self.currentPageZeroLines(true);
                        self.currentPageCycleCountPV(false);
                        self.ccUnfinishedProcess(true);
                    }
                }
            }
        );
    };

    self.getCycleCountLines = function (cycleCountId) {
        self.showLoader(true);
        self.currentLine(0);
        $.getJSON(
            WS_ROOT +
                WS.GET_CYCLECOUNT_LINES +
                "?CycleCountId=" +
                cycleCountId +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            function (data) {
                //save the array locally
                self.ccLines(data.Count_LSU_Entries.Count_LSU_Entry);
                //calculate total number of lines
                self.totalLines(data.Count_LSU_Entries.Count_LSU_Entry.length);
            }
        )
            .done(function (data) {
                self.displayLine();
                if (self.productBarcodeValidationCycle() == "true") {
                    self.hideErrorMessage(0);
                    self.showLoader(true);
                    self.multiBarcodes.removeAll();
                    $.getJSON(
                        WS_ROOT +
                            WS.GET_ProductBarcode +
                            "?ConcernCode=" +
                            self.ConcernCode +
                            "&CompanyCode=" +
                            self.CompanyCode +
                            "&ProductnumberDerived=" +
                            self.ccLines()[self.currentLine()].Product,
                        function (data) {
                            console.log(data);

                            if (
                                self.enableUseProductPackingbarcodeCycle() ==
                                "true"
                            ) {
                                if (
                                    data &&
                                    data.PalletScanner_Get_ProductBarcode_root
                                        .MultiBarcodesPerProduct
                                ) {
                                    if (
                                        !$.isArray(
                                            data
                                                .PalletScanner_Get_ProductBarcode_root
                                                .MultiBarcodesPerProduct
                                        )
                                    ) {
                                        self.multiBarcodes.push(
                                            data
                                                .PalletScanner_Get_ProductBarcode_root
                                                .MultiBarcodesPerProduct.Barcode
                                        );
                                    } else {
                                        $.each(
                                            data
                                                .PalletScanner_Get_ProductBarcode_root
                                                .MultiBarcodesPerProduct,
                                            function (index, currentBarcode) {
                                                self.multiBarcodes.push(
                                                    currentBarcode.Barcode
                                                );
                                            }
                                        );
                                    }
                                }
                            } else {
                                if (
                                    data &&
                                    data.PalletScanner_Get_ProductBarcode_root
                                        .ProductnummerBarcodes
                                ) {
                                    if (
                                        !$.isArray(
                                            data
                                                .PalletScanner_Get_ProductBarcode_root
                                                .ProductnummerBarcodes
                                        )
                                    ) {
                                        self.multiBarcodes.push(
                                            data
                                                .PalletScanner_Get_ProductBarcode_root
                                                .ProductnummerBarcodes.Barcode
                                        );
                                    } else {
                                        $.each(
                                            data
                                                .PalletScanner_Get_ProductBarcode_root
                                                .ProductnummerBarcodes,
                                            function (index, currentBarcode) {
                                                self.multiBarcodes.push(
                                                    currentBarcode.Barcode
                                                );
                                            }
                                        );
                                    }
                                }
                            }

                            console.log(self.multiBarcodes());
                        }
                    )
                        .done(function () {
                            self.showLoader(false);
                            self.page("cycleCountPV");
                            self.currentPageCycleCountPV(true);
                            self.currentPageZeroLines(false);
                            setTimeout(function () {
                                $("#cycleCountBarcode").focus();
                            }, 250);
                        })
                        .error(function (xhr, status, error) {
                            if (xhr.responseText) {
                                var message = JSON.parse(
                                    xhr.responseText
                                ).message;
                                self.errorMessage(message);
                                self.hideErrorMessage();
                            }
                        })
                        .always(function () {
                            self.showLoader(false);
                        });
                } else {
                    self.openCycleLine();
                }
            })
            .error(function (xhr, status, error) {})
            .always(function () {
                self.showLoader(false);
            });
    };

    self.displayLine = function () {
        var initialDate = new Date(
                self.ccLines()[self.currentLine()].BestBeforeDate
            ),
            formattedDate = "";

        if (initialDate.getFullYear() == 5555) {
            formattedDate = "-";
        } else {
            formattedDate =
                ("0" + initialDate.getDate()).slice(-2) +
                "-" +
                ("0" + (initialDate.getMonth() + 1)).slice(-2) +
                "-" +
                initialDate.getFullYear();
        }

        var productDescription = nl2br(
            self.ccLines()[self.currentLine()].ProductDescription
        );

        var ccLines = self.ccLines().slice(0),
            currentLine = ccLines[self.currentLine()];
        currentLine.QuantityCounted_PU = ko.observable("");
        currentLine.QuantityCounted_SU = ko.observable("");
        currentLine.Indication_MissingPieces = ko.observable(false);
        currentLine.Indication_BrokenPieces = ko.observable(false);
        currentLine.Indication_ExtraFound = ko.observable(false);
        currentLine.Indication_CountOK = ko.observable(false);
        currentLine.Indication_CKG = ko.observable(false);
        currentLine.BestBeforeDate = formattedDate;
        currentLine.ProductDescription = productDescription;
        currentLine.PU_CanBeUpdated = ko.observable(true); //this variable determines if the Price Unit can be updated when the Stock Unit is changed. If the Price unit is manually filled, it cannot be updated anymore bu the StockUnit change
        currentLine.showCountOk = ko.observable(false);
        currentLine.showCKG = ko.observable(false);
        currentLine.showExtraFound = ko.observable(false);
        currentLine.showMissingBroken = ko.observable(false);

        self.chosenLine(currentLine);

        //focus the input for counting
        $("#QuantityCounted_PU").focus().select();
    };

    self.goToNextLine = function (indication) {
        self.chosenLine()[indication](true);
        self.putLine();
    };

    self.updateCycleCountButtons = function () {
        //if (self.chosenLine().OfKgNtJg === "G") { //we have both PriceUnit and StockUnits
        //Updated the determination of the "PriceUnit and StockUnit" or only the "Price Unit"
        //PriceUnit is always present -mandatory. Stock unit is only present when SUCode is defined.
        if (
            self.chosenLine().SUCode !== null &&
            self.chosenLine().SUCode !== ""
        ) {
            //we have both PriceUnit and StockUnits
            if (
                self.chosenLine().QuantityCounted_PU() === "" ||
                self.chosenLine().QuantityCounted_SU() == ""
            ) {
                self.chosenLine().showCKG(false);
                self.chosenLine().showCountOk(false);
                self.chosenLine().showExtraFound(false);
                self.chosenLine().showMissingBroken(false);
                return false;
            }
        } else {
            // we have only Price Unit
            if (self.chosenLine().QuantityCounted_PU() === "") {
                self.chosenLine().showCKG(false);
                self.chosenLine().showCountOk(false);
                self.chosenLine().showExtraFound(false);
                self.chosenLine().showMissingBroken(false);
                return false;
            }
        }

        var PU_difference =
            parseFloat(self.chosenLine().QuantityCounted_PU()) -
            parseFloat(self.chosenLine().ExpectedStockPU);
        var SU_difference =
            parseFloat(self.chosenLine().QuantityCounted_SU()) -
            parseFloat(self.chosenLine().ExpectedStockSU);

        //implement a new case with CKG
        if (
            self.chosenLine().SUCode !== null &&
            self.chosenLine().SUCode !== ""
        ) {
            //both PU and SU are present
            if (
                self.chosenLine().StockAdjustmentCKGAllowed === "true" &&
                self.chosenLine().ExpectedStockSU == 0 &&
                self.chosenLine().QuantityCounted_SU() == 0 &&
                self.chosenLine().QuantityCounted_PU() == 0
            ) {
                //ckg Case B1 from Testcases CKG
                self.chosenLine().showCKG(true);
                self.chosenLine().showCountOk(false);
                self.chosenLine().showExtraFound(false);
                self.chosenLine().showMissingBroken(false);
                return;
            } else if (
                self.chosenLine().StockAdjustmentCKGAllowed === "true" &&
                self.chosenLine().ExpectedStockSU == 0 &&
                PU_difference > 0 &&
                SU_difference > 0
            ) {
                //extra found case B2 from Testcases CKG
                self.chosenLine().showCKG(false);
                self.chosenLine().showCountOk(false);
                self.chosenLine().showExtraFound(true);
                self.chosenLine().showMissingBroken(false);
                return;
            } else if (
                self.chosenLine().StockAdjustmentCKGAllowed === "true" &&
                self.chosenLine().ExpectedStockSU == 0 &&
                PU_difference < 0 &&
                SU_difference == 0
            ) {
                //ckg case B3 from Testcases CKG
                self.chosenLine().showCKG(true);
                self.chosenLine().showCountOk(false);
                self.chosenLine().showExtraFound(false);
                self.chosenLine().showMissingBroken(false);
                return;
            }

            if (PU_difference == 0 && SU_difference == 0) {
                //count ok
                self.chosenLine().showCKG(false);
                self.chosenLine().showCountOk(true);
                self.chosenLine().showExtraFound(false);
                self.chosenLine().showMissingBroken(false);
            } else if (
                (PU_difference < 0 || SU_difference < 0) &&
                !(
                    (PU_difference > 0 && SU_difference < 0) ||
                    (PU_difference < 0 && SU_difference > 0)
                )
            ) {
                //less found
                self.chosenLine().showCKG(false);
                self.chosenLine().showCountOk(false);
                self.chosenLine().showExtraFound(false);
                self.chosenLine().showMissingBroken(true);
            } else if (
                (PU_difference > 0 || SU_difference > 0) &&
                !(
                    (PU_difference > 0 && SU_difference < 0) ||
                    (PU_difference < 0 && SU_difference > 0)
                )
            ) {
                //extra found
                self.chosenLine().showCKG(false);
                self.chosenLine().showCountOk(false);
                self.chosenLine().showExtraFound(true);
                self.chosenLine().showMissingBroken(false);
            } else {
                // hide all buttons
                self.chosenLine().showCKG(false);
                self.chosenLine().showCountOk(false);
                self.chosenLine().showExtraFound(false);
                self.chosenLine().showMissingBroken(false);
            }
        } else {
            //only PU is present
            if (
                parseFloat(self.chosenLine().QuantityCounted_PU()) ==
                parseFloat(self.chosenLine().ExpectedStockPU)
            ) {
                //showCountOK
                self.chosenLine().showCKG(false);
                self.chosenLine().showCountOk(true);
                self.chosenLine().showExtraFound(false);
                self.chosenLine().showMissingBroken(false);
            } else if (
                parseFloat(self.chosenLine().QuantityCounted_PU()) >
                parseFloat(self.chosenLine().ExpectedStockPU)
            ) {
                //extra found
                self.chosenLine().showCKG(false);
                self.chosenLine().showCountOk(false);
                self.chosenLine().showExtraFound(true);
                self.chosenLine().showMissingBroken(false);
            } else if (
                parseFloat(self.chosenLine().QuantityCounted_PU()) <
                parseFloat(self.chosenLine().ExpectedStockPU)
            ) {
                //missing goods / broken pieces
                self.chosenLine().showCKG(false);
                self.chosenLine().showCountOk(false);
                self.chosenLine().showExtraFound(false);
                self.chosenLine().showMissingBroken(true);
            }
        }
    };

    self.putLine = function () {
        var guid = self.guid();
        console.log(self.chosenLine());
        var jsonObj = {
            Scann_Count_LSU_Entries: {
                GUID_Line: guid,
                CycleCountId: self.chosenLine().CycleCountId,
                QuantityCounted_PU: self.chosenLine().QuantityCounted_PU(),
                QuantityCounted_SU: self.chosenLine().QuantityCounted_SU(),
                Indication_MissingPieces: self
                    .chosenLine()
                    .Indication_MissingPieces(),
                Indication_BrokenPieces: self
                    .chosenLine()
                    .Indication_BrokenPieces(),
                Indication_ExtraFound: self
                    .chosenLine()
                    .Indication_ExtraFound(),
                Indication_CountOK: self.chosenLine().Indication_CountOK(),
                Indication_CKG: self.chosenLine().Indication_CKG(),
                ProductgroupId: self.chosenLine().ProductgroupId,
                Productsubgroup: self.chosenLine().Productsubgroup,
                Productsoort: self.chosenLine().Productsoort,
                Productnr: self.chosenLine().Productnr,
                StockPalletID: self.chosenLine().StockPalletID,
                StockPalletLineID: self.chosenLine().StockPalletLineID,
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_CYCLECOUNT_LINE +
                "?UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function () {
                //if numberOfLines is 1, call putProcessHeader and skip the last confirmation screen
                if (self.ccNumberOfEntries() == "1") {
                    self.putProcessHeader("Indication_Processed");
                } else {
                    if (self.currentLine() < self.totalLines() - 1) {
                        self.currentLine(self.currentLine() + 1);
                        self.displayLine();
                        if (self.productBarcodeValidationCycle() == "true") {
                            self.hideErrorMessage(0);
                            self.showLoader(true);
                            self.multiBarcodes.removeAll();
                            $.getJSON(
                                WS_ROOT +
                                    WS.GET_ProductBarcode +
                                    "?ConcernCode=" +
                                    self.ConcernCode +
                                    "&CompanyCode=" +
                                    self.CompanyCode +
                                    "&ProductnumberDerived=" +
                                    self.ccLines()[self.currentLine()].Product,
                                function (data) {
                                    console.log(data);

                                    if (
                                        self.enableUseProductPackingbarcodeCycle() ==
                                        "true"
                                    ) {
                                        if (
                                            data &&
                                            data
                                                .PalletScanner_Get_ProductBarcode_root
                                                .MultiBarcodesPerProduct
                                        ) {
                                            if (
                                                !$.isArray(
                                                    data
                                                        .PalletScanner_Get_ProductBarcode_root
                                                        .MultiBarcodesPerProduct
                                                )
                                            ) {
                                                self.multiBarcodes.push(
                                                    data
                                                        .PalletScanner_Get_ProductBarcode_root
                                                        .MultiBarcodesPerProduct
                                                        .Barcode
                                                );
                                            } else {
                                                $.each(
                                                    data
                                                        .PalletScanner_Get_ProductBarcode_root
                                                        .MultiBarcodesPerProduct,
                                                    function (
                                                        index,
                                                        currentBarcode
                                                    ) {
                                                        self.multiBarcodes.push(
                                                            currentBarcode.Barcode
                                                        );
                                                    }
                                                );
                                            }
                                        }
                                    } else {
                                        if (
                                            data &&
                                            data
                                                .PalletScanner_Get_ProductBarcode_root
                                                .ProductnummerBarcodes
                                        ) {
                                            if (
                                                !$.isArray(
                                                    data
                                                        .PalletScanner_Get_ProductBarcode_root
                                                        .ProductnummerBarcodes
                                                )
                                            ) {
                                                self.multiBarcodes.push(
                                                    data
                                                        .PalletScanner_Get_ProductBarcode_root
                                                        .ProductnummerBarcodes
                                                        .Barcode
                                                );
                                            } else {
                                                $.each(
                                                    data
                                                        .PalletScanner_Get_ProductBarcode_root
                                                        .ProductnummerBarcodes,
                                                    function (
                                                        index,
                                                        currentBarcode
                                                    ) {
                                                        self.multiBarcodes.push(
                                                            currentBarcode.Barcode
                                                        );
                                                    }
                                                );
                                            }
                                        }
                                    }

                                    console.log(self.multiBarcodes());
                                }
                            )
                                .done(function () {
                                    self.showLoader(false);
                                    self.page("cycleCountPV");
                                    self.currentPageCycleCountPV(true);
                                    self.currentPageZeroLines(false);
                                    setTimeout(function () {
                                        $("#cycleCountBarcode").focus();
                                    }, 250);
                                })
                                .error(function (xhr, status, error) {
                                    if (xhr.responseText) {
                                        var message = JSON.parse(
                                            xhr.responseText
                                        ).message;
                                        self.errorMessage(message);
                                        self.hideErrorMessage();
                                    }
                                })
                                .always(function () {
                                    self.showLoader(false);
                                });
                        }
                        //go to cycle count main page
                    } else {
                        self.getCycleCount_HeaderInformation();
                    }
                }
            })
            .error(function (xhr, status, error) {
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    self.hideErrorMessage();
                }
            })
            .always(function () {
                self.chosenLine().Indication_MissingPieces(false);
                self.chosenLine().Indication_BrokenPieces(false);
                self.chosenLine().Indication_ExtraFound(false);
                self.chosenLine().Indication_CountOK(false);
                self.chosenLine().Indication_CKG(false);
            });
    };

    self.getCycleCount_HeaderInformation = function () {
        var cycleCountId = self.chosenLine().CycleCountId;
        self.showLoader(true);
        $.getJSON(
            WS_ROOT +
                WS.GET_CYCLECOUNT_HEADERINFORMATION +
                "?CycleCountId=" +
                cycleCountId +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            function (data) {
                if (data && data.Count_LSU) {
                    self.ccSection(data.Count_LSU.Section);
                    self.ccLocation(data.Count_LSU.LocatieAK);
                    self.ccNumberOfEntries(data.Count_LSU.NumberOfEntries);
                    self.ccNumberOfCountedEntries(
                        data.Count_LSU.NumberOfCountedEntries
                    );
                    self.ccNumberOfEntriesWithDifferences(
                        data.Count_LSU.NumberOfEntriesWithDifferences
                    );
                }
            }
        )
            .done(function () {
                self.showLoader(false);
                self.page("cycleCountLocation");
                self.refreshLocations();
            })
            .error(function (xhr) {
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    self.hideErrorMessage();
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.putProcessHeader = function (indication) {
        self.showLoader(true);
        switch (indication) {
            case "CountNotOk":
                var jsonObj = {
                    CycleCount_ProcessHeader: {
                        GUID: self.ccHeaderGuid(),
                        CycleCountId: self.cycleCountId(),
                        Indication_Processed: true,
                        Indication_CountAgain: self.Indication_CountAgain(),
                        CountNotOk: true,
                        ConfirmLocationIsEmpty: false,
                    },
                };
                break;
            case "ConfirmLocationIsEmpty":
                var jsonObj = {
                    CycleCount_ProcessHeader: {
                        GUID: self.ccHeaderGuid(),
                        CycleCountId: self.cycleCountId(),
                        Indication_Processed: true,
                        Indication_CountAgain: self.Indication_CountAgain(),
                        CountNotOk: false,
                        ConfirmLocationIsEmpty: true,
                    },
                };
                break;
            default:
                self[indication](true);
                var cycleCountId = self.chosenLine().CycleCountId;
                var jsonObj = {
                    CycleCount_ProcessHeader: {
                        GUID: self.ccHeaderGuid(),
                        CycleCountId: cycleCountId,
                        Indication_Processed: self.Indication_Processed(),
                        Indication_CountAgain: self.Indication_CountAgain(),
                        CountNotOk: false,
                        ConfirmLocationIsEmpty: false,
                    },
                };
        }

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_CYCLECOUNT_HEADER +
                "?UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function () {
                //go to cyclecounthome and clear the cc values
                self.clearCycleCountValues();
                self.page("cycleCountLocation");
                setTimeout(function () {
                    $("#ccScanLocation").focus();
                }, 250);

                self.refreshLocations();

                //mark process as done
                self.ccUnfinishedProcess(false);
                self.showEmptyPalletButtons(false);
                self.cycleCountId("");
            })
            .error(function (xhr) {
                if (xhr.responseText) {
                    self.showLoader(false);
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    self.hideErrorMessage();
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.clearCycleCountValues = function () {
        self.Indication_CountAgain(false);
        self.Indication_Processed(false);
        self.ccLines(null);
        self.ccNumberOfCountedEntries(null);
        self.ccNumberOfEntries(null);
        self.ccNumberOfEntriesWithDifferences(null);
        self.ccScanLocation(null);
        self.ccSection(null);
        self.ccLocation(null);
        self.chosenLine(null);
        self.currentLine(null);
        self.totalLines(null);
        self.ccUnfinishedProcess(false);
        self.disableBlindCounting(false);
    };

    self.confirmWarningUnfinishedProcess = function (button) {
        if (self.openCycleCountFlag()) {
            if (button === "warningUnfinished_No") {
                if (self.currentPageCycleCountPV() == true) {
                    self.page("cycleCountPV");
                    setTimeout(function () {
                        $("#cycleCountBarcode").focus();
                    }, 250);
                } else if (self.currentPageZeroLines() == true) {
                    self.page("cycleCountLocation");
                    self.refreshLocations();
                } else {
                    self.page("cycleCountLocation");
                    $("#ccScanLocation").focus();
                    self.refreshLocations();
                }
            } else if (button === "warningUnfinished_Yes") {
                self.showEmptyPalletButtons(false);
                self.currentPageCycleCountPV(false);
                self.currentPageZeroLines(false);
                self.showLoader(true);
                var jsonObj = {
                    Count_Product: {
                        CycleCountId: self.cycleCountId(),
                    },
                };

                jsonObj = JSON.stringify(jsonObj);

                $.ajax({
                    type: "PUT",
                    url:
                        WS_ROOT +
                        WS.CycleCount_Cancel_PUT +
                        "?UserID=" +
                        self.username() +
                        "&ConcernCode=" +
                        self.ConcernCode +
                        "&CompanyCode=" +
                        self.CompanyCode,
                    data: jsonObj,
                    contentType: "application/json; charset=utf-8",
                    dataType: "text",
                })
                    .done(function () {
                        self.clearCycleCountValues();
                        self.page("cycleCountLocation");
                        $("#ccScanLocation").focus();
                        self.refreshLocations();
                    })
                    .error(function (xhr) {
                        if (xhr.responseText) {
                            self.showLoader(false);
                            var message = JSON.parse(xhr.responseText).message;
                            self.errorMessage(message);
                            self.hideErrorMessage();
                        }
                    })
                    .always(function () {
                        self.showLoader(false);
                    });
            }
        } else {
            if (button === "warningUnfinished_No") {
                if (self.currentPageCycleCountPV() == true) {
                    self.page("cycleCountPV");
                    setTimeout(function () {
                        $("#cycleCountBarcode").focus();
                    }, 250);
                } else if (self.currentPageZeroLines() == true) {
                    self.page("cycleCountLocation");
                    self.refreshLocations();
                } else {
                    self.page("cycleCountLine");
                    $("#ccScanLocation").focus();
                    self.refreshLocations();
                }
            } else if (button === "warningUnfinished_Yes") {
                self.showEmptyPalletButtons(false);
                self.currentPageCycleCountPV(false);
                self.currentPageZeroLines(false);
                self.showLoader(true);
                var jsonObj = {
                    Count_Product: {
                        CycleCountId: self.cycleCountId(),
                    },
                };

                jsonObj = JSON.stringify(jsonObj);

                $.ajax({
                    type: "PUT",
                    url:
                        WS_ROOT +
                        WS.CycleCount_Cancel_PUT +
                        "?UserID=" +
                        self.username() +
                        "&ConcernCode=" +
                        self.ConcernCode +
                        "&CompanyCode=" +
                        self.CompanyCode,
                    data: jsonObj,
                    contentType: "application/json; charset=utf-8",
                    dataType: "text",
                })
                    .done(function () {
                        self.clearCycleCountValues();
                        self.page("cycleCountLocation");
                        $("#ccScanLocation").focus();
                        self.refreshLocations();
                    })
                    .error(function (xhr) {
                        if (xhr.responseText) {
                            self.showLoader(false);
                            var message = JSON.parse(xhr.responseText).message;
                            self.errorMessage(message);
                            self.hideErrorMessage();
                        }
                    })
                    .always(function () {
                        self.showLoader(false);
                    });
            }
        }
        //reset the open cycle count flag
        self.openCycleCountFlag(false);
    };

    self.detectedChangePU = function (event) {
        self.chosenLine().PU_CanBeUpdated(false);
        self.updateCycleCountButtons();
        if (event.which == 13) {
            if (
                parseFloat(self.chosenLine().QuantityCounted_PU()) ==
                parseFloat(self.chosenLine().ExpectedStockPU)
            ) {
                self.goToNextLine("Indication_CountOK");
            }
        }
    };

    self.detectedChangeSU = function () {
        self.autoUpdateQuantityPU();
        setTimeout(function () {
            self.updateCycleCountButtons();
        }, 10);
    };

    self.autoUpdateQuantityPU = function () {
        var updatedValue = 0;
        if (self.chosenLine().PU_CanBeUpdated()) {
            if (self.chosenLine().QuantityCounted_SU() == "") {
                self.chosenLine().QuantityCounted_PU(0);
            } else if (
                self.chosenLine().SUCode !== null &&
                self.chosenLine().SUCode !== "" &&
                self.chosenLine().CalculationFactorOrderedToStandardPeh != 0
            ) {
                if (
                    self.chosenLine().QuantityCounted_SU() ===
                    self.chosenLine().ExpectedStockSU
                ) {
                    //SU matches SU expected -  QuantityCounted_SU === ExpectedStockSU ==> QuantityCounted_PU = ExpectedStockPU
                    self.chosenLine().QuantityCounted_PU(
                        self.chosenLine().ExpectedStockPU
                    );
                } else {
                    // SU !== expected SU -> update the PU counter with the SU divided to the PEH calculation factor
                    updatedValue = parseFloat(
                        parseInt(self.chosenLine().QuantityCounted_SU()) /
                            self.chosenLine()
                                .CalculationFactorOrderedToStandardPeh
                    ).toFixed(2);
                    self.chosenLine().QuantityCounted_PU(updatedValue);
                }
            }
        } else {
            return;
        }
    };

    self.hideErrorMessage = function (time) {
        var defaultTime = 10000;
        setTimeout(function () {
            self.successMessage(false);
            self.errorMessage(null);
        }, time || defaultTime);
    };

    self.hideErrorMessageNavigate = function (time, page) {
        var defaultTime = 10000;
        setTimeout(function () {
            self.errorMessageNavigate(null);
            if (page) {
                self.goToPage("menu");
            }
        }, time || defaultTime);
    };

    self.clearValues = function () {
        self.scanPallet("");
        self.scanLocation("");

        //clear movement id and preferred location
        self.movementId("");
        self.movementStockId("");
        self.movementOutboundId("");
        self.movementGoodsReceiptId("");
        self.movementAdditionalPalletId("");
        self.showPreferredLocation(false);
        self.endLocationText("");
        self.endLocationAK("");
        self.palletMovementProductDescription("");
        self.splitPalletInput("");
        self.scanLocationSplit("");

        //hide PalletId and Location
        self.hideScanPallet();
        self.hideScanLocation();
    };

    self.resetLoadShipmentData = function () {
        self.loadShipmentData("");
        self.palletMoveRequestId("");
    };

    function nl2br(value) {
        if (value !== undefined) {
            return value.replace(/\n/g, "<br />");
        } else return "";
    }

    /**
     * The user confirms the picklist and starts the picking process. Update picking timestamp takes place.
     */
    self.startPicking = function () {
        //reset the observables that retain the select picklist line details and the scanned barcode
        self.selectedPicklistLine("");
        self.selectedPicklistLineIndex(0);
        self.scannedBarcode(null);
        self.lastScannedLocation("");

        //update the picking timestamp
        self.updatePickingTimestamp();
    };

    /**
     * Update the picking timestamp.
     */
    self.updatePickingTimestamp = function () {
        self.showLoader(true);
        var jsonObj = {
            Scanning_GenericInterfaceClass: {
                GUID: self.guid(),
                ActionType: 1,
                Picklist: self.selectedPicklist().PicklistId,
                UserId: self.username(),
                PickDateTime: new Date(),
                WarehouseID: self.warehouseId(),
            },
        };
        jsonObj = JSON.stringify(jsonObj);

        //PUT on the generic scanning PUT service. Request to update the timestamp, using value 1 for ActionType.
        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.SCANNING_GENERIC_PUT +
                "?UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function () {
                if (
                    self.selectedPicklist() &&
                    self.selectedPicklist().PicklistLines &&
                    self.selectedPicklist().PicklistLines.PicklistLine
                ) {
                    //on call success search for the first available picklist line and select it.
                    var foundFullyPickedLine = false;
                    //do not check the skipped lines
                    $.each(
                        self.selectedPicklist().PicklistLines.PicklistLine,
                        function (index, picklistLine) {
                            if (
                                picklistLine.IsLineSkiped === "false" &&
                                picklistLine.FullyPicked === "false" &&
                                !foundFullyPickedLine
                            ) {
                                foundFullyPickedLine = true;
                                self.selectedPicklistLine(picklistLine);
                                self.selectedPicklistLineIndex(index + 1);

                                if (self.globalPickingType() == "pickToCart") {
                                    $.each(
                                        self.selectedPicklist()
                                            .combinedPicklists,
                                        function (index, currentPicklist) {
                                            if (
                                                currentPicklist.PicklistId ==
                                                self.selectedPicklistLine()
                                                    .PicklistId
                                            ) {
                                                //if (currentPicklist.TUID != "") {
                                                console.log(currentPicklist);
                                                console.log(
                                                    "CURRENT TU ID: " +
                                                        currentPicklist.TUID
                                                );
                                                self.currentTUID(
                                                    currentPicklist.TUID
                                                );
                                                //}
                                            }
                                        }
                                    );
                                }
                            }
                        }
                    );

                    //if we didn't find any line that is not skipped, check the skipped lines also
                    if (!foundFullyPickedLine) {
                        $.each(
                            self.selectedPicklist().PicklistLines.PicklistLine,
                            function (index, picklistLine) {
                                if (
                                    picklistLine.IsLineSkiped === "true" &&
                                    picklistLine.FullyPicked === "false" &&
                                    !foundFullyPickedLine
                                ) {
                                    foundFullyPickedLine = true;
                                    self.selectedPicklistLine(picklistLine);
                                    self.selectedPicklistLineIndex(index + 1);

                                    if (
                                        self.globalPickingType() == "pickToCart"
                                    ) {
                                        $.each(
                                            self.selectedPicklist()
                                                .combinedPicklists,
                                            function (index, currentPicklist) {
                                                if (
                                                    currentPicklist.PicklistId ==
                                                    self.selectedPicklistLine()
                                                        .PicklistId
                                                ) {
                                                    if (
                                                        currentPicklist.TUID !=
                                                        ""
                                                    ) {
                                                        console.log(
                                                            currentPicklist
                                                        );
                                                        console.log(
                                                            "CURRENT TU ID: " +
                                                                currentPicklist.TUID
                                                        );
                                                        self.currentTUID(
                                                            currentPicklist.TUID
                                                        );
                                                    }
                                                }
                                            }
                                        );
                                    }
                                }
                            }
                        );
                    }

                    if (!self.selectedPicklistLine()) {
                        //if no picklist lines are available (all are FullyPicked), detect the final steps of the process.
                        if (
                            self.selectedPicklist().OpenCarrierPresent ===
                            "true"
                        ) {
                            //warn the user that he needs to close the last pallet
                            if (self.usePredefinedCarriers() == "true") {
                                self.page("pickenProcessPicklist");
                            } else {
                                self.page("pickenClosePallet");
                            }
                        } else {
                            //open the confirmation screen to process the picklist
                            self.openConfirmProcessPicklist();
                        }
                    } else {
                        if (
                            self.selectedPicklist().ProductBarcodeValidation ==
                                "true" ||
                            self.selectedPicklist().EANCheckOnly == "true"
                        ) {
                            self.pickingBarcode("");
                            self.hideErrorMessage(0);
                            self.showLoader(true);
                            self.multiBarcodes.removeAll();
                            $.getJSON(
                                WS_ROOT +
                                    WS.GET_ProductBarcode +
                                    "?ConcernCode=" +
                                    self.ConcernCode +
                                    "&CompanyCode=" +
                                    self.CompanyCode +
                                    "&ProductnumberDerived=" +
                                    self.selectedPicklistLine().Product,
                                function (data) {
                                    console.log(data);

                                    if (
                                        self.globalPickingType() == "pickToCart"
                                    ) {
                                        $.each(
                                            self.selectedPicklist()
                                                .combinedPicklists,
                                            function (index, currentPicklist) {
                                                if (
                                                    currentPicklist.PicklistId ==
                                                    self.selectedPicklistLine()
                                                        .PicklistId
                                                ) {
                                                    self.selectedPicklist().EnableUseProductPackingbarcode =
                                                        currentPicklist.EnableUseProductPackingbarcode;
                                                }
                                            }
                                        );
                                    }

                                    if (
                                        self.selectedPicklist()
                                            .EnableUseProductPackingbarcode ==
                                        "true"
                                    ) {
                                        if (
                                            data &&
                                            data
                                                .PalletScanner_Get_ProductBarcode_root
                                                .MultiBarcodesPerProduct
                                        ) {
                                            if (
                                                !$.isArray(
                                                    data
                                                        .PalletScanner_Get_ProductBarcode_root
                                                        .MultiBarcodesPerProduct
                                                )
                                            ) {
                                                self.multiBarcodes.push(
                                                    data
                                                        .PalletScanner_Get_ProductBarcode_root
                                                        .MultiBarcodesPerProduct
                                                        .Barcode
                                                );
                                            } else {
                                                $.each(
                                                    data
                                                        .PalletScanner_Get_ProductBarcode_root
                                                        .MultiBarcodesPerProduct,
                                                    function (
                                                        index,
                                                        currentBarcode
                                                    ) {
                                                        self.multiBarcodes.push(
                                                            currentBarcode.Barcode
                                                        );
                                                    }
                                                );
                                            }
                                        }
                                    } else {
                                        if (
                                            data &&
                                            data
                                                .PalletScanner_Get_ProductBarcode_root
                                                .ProductnummerBarcodes
                                        ) {
                                            if (
                                                !$.isArray(
                                                    data
                                                        .PalletScanner_Get_ProductBarcode_root
                                                        .ProductnummerBarcodes
                                                )
                                            ) {
                                                self.multiBarcodes.push(
                                                    data
                                                        .PalletScanner_Get_ProductBarcode_root
                                                        .ProductnummerBarcodes
                                                        .Barcode
                                                );
                                            } else {
                                                $.each(
                                                    data
                                                        .PalletScanner_Get_ProductBarcode_root
                                                        .ProductnummerBarcodes,
                                                    function (
                                                        index,
                                                        currentBarcode
                                                    ) {
                                                        self.multiBarcodes.push(
                                                            currentBarcode.Barcode
                                                        );
                                                    }
                                                );
                                            }
                                        }
                                    }

                                    console.log(self.multiBarcodes());
                                }
                            )
                                .done(function () {
                                    self.showLoader(false);
                                })
                                .error(function (xhr, status, error) {
                                    if (xhr.responseText) {
                                        var message = JSON.parse(
                                            xhr.responseText
                                        ).message;
                                        self.errorMessage(message);
                                        self.hideErrorMessage();
                                    }
                                })
                                .always(function () {
                                    self.showLoader(false);
                                });
                        }

                        if (!self.selectedPicklistLine().CartLocation) {
                            self.selectedPicklistLine().CartLocation = "";
                        }

                        if (self.selectedPicklist().EANCheckOnly == "true") {
                            self.page("pickenManualPickingStart");
                            setTimeout(function () {
                                $("#pickingBarcode").focus();
                            }, 250);
                        } else {
                            console.log(
                                self.selectedPicklistLine().LocationPhysical
                            );
                            self.page("pickenPickingProcess");
                            self.scannedBarcode("");
                            setTimeout(function () {
                                $(".scannedBarcode").focus().select();
                            }, 100);
                        }
                    }
                }
            })
            .error(function (xhr, status, error) {
                //if there's an error set the pickenErrorMessage observable with the message of the error. This will trigger the display of the error page, on top of the normal screen.
                if (xhr.responseText) {
                    self.showLoader(false);
                    var message = JSON.parse(xhr.responseText).message;
                    self.pickenErrorMessage(message);
                }
                self.openPicken();
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    /**
     * Select the next picking line.
     * @param nextAvailable
     */
    self.nextPickingLine = function (nextAvailable) {
        self.showLoader(true);
        //if nextAvailable is set to true search for the next available picking line.
        if (nextAvailable === true) {
            //mark the observable nextAvailablePicklistLineFound to false. This is used on other functions as well.
            self.nextAvailablePicklistLineFound(false);
            //search for the next available picklist line starting from the current position.
            //skip the skipped lines
            //start from -1 in order to show the current line if not fully picked but pallet was marked as full
            console.log("SELECTED PICKLIST LINE INDEX: ");
            console.log(self.selectedPicklistLineIndex());
            if (self.selectedPicklistLineIndex() == 0) {
                self.selectedPicklistLineIndex(1);
            }

            for (
                var i = self.selectedPicklistLineIndex() - 1;
                i < self.selectedPicklist().PicklistLines.PicklistLine.length;
                i++
            ) {
                if (
                    self.selectedPicklist().PicklistLines.PicklistLine[i]
                        .IsLineSkiped === "false" &&
                    self.selectedPicklist().PicklistLines.PicklistLine[i]
                        .FullyPicked === "false" &&
                    !self.nextAvailablePicklistLineFound()
                ) {
                    self.nextAvailablePicklistLineFound(true);
                    self.selectedPicklistLineIndex(i + 1);
                    console.log(
                        "PICKLIST LINE FOUND: " +
                            self.selectedPicklistLineIndex()
                    );
                }
            }
            //if next available picklist line was not found, search from the first picklist line until the current one.
            if (!self.nextAvailablePicklistLineFound()) {
                for (
                    var i = 0;
                    i <
                    self.selectedPicklist().PicklistLines.PicklistLine.length;
                    i++
                ) {
                    if (
                        self.selectedPicklist().PicklistLines.PicklistLine[i]
                            .IsLineSkiped === "false" &&
                        self.selectedPicklist().PicklistLines.PicklistLine[i]
                            .FullyPicked === "false" &&
                        !self.nextAvailablePicklistLineFound()
                    ) {
                        self.nextAvailablePicklistLineFound(true);
                        self.selectedPicklistLineIndex(i + 1);
                    }
                }
            }

            //if we didn't find available lines yet, check in the skipped lines also
            if (!self.nextAvailablePicklistLineFound()) {
                for (
                    var i = 0;
                    i <
                    self.selectedPicklist().PicklistLines.PicklistLine.length;
                    i++
                ) {
                    if (
                        self.selectedPicklist().PicklistLines.PicklistLine[i]
                            .FullyPicked === "false" &&
                        !self.nextAvailablePicklistLineFound()
                    ) {
                        self.nextAvailablePicklistLineFound(true);
                        self.selectedPicklistLineIndex(i + 1);
                    }
                }
            }

            //set the selected picklist line
            self.selectedPicklistLine(
                self.selectedPicklist().PicklistLines.PicklistLine[
                    self.selectedPicklistLineIndex() - 1
                ]
            );
        } else {
            //if nextAvailable is not true, select the next line, regardless of the FullyPicked value.
            if (
                parseInt(self.selectedPicklistLineIndex(), 10) <
                parseInt(self.selectedPicklist().NoOfLines, 10)
            ) {
                self.scannedBarcode(null);
                self.selectedPicklistLineIndex(
                    self.selectedPicklistLineIndex() + 1
                );
                self.selectedPicklistLine(
                    self.selectedPicklist().PicklistLines.PicklistLine[
                        self.selectedPicklistLineIndex() - 1
                    ]
                );
            }
        }

        if (self.globalPickingType() == "pickToCart") {
            $.each(
                self.selectedPicklist().combinedPicklists,
                function (index, currentPicklist) {
                    if (
                        currentPicklist.PicklistId ==
                        self.selectedPicklistLine().PicklistId
                    ) {
                        //if (currentPicklist.TUID != "") {
                        console.log(currentPicklist);
                        console.log("CURRENT TU ID: " + currentPicklist.TUID);
                        self.currentTUID(currentPicklist.TUID);
                        //}
                    }
                }
            );
        }

        self.showLoader(false);
        //focus on the barcode input
        setTimeout(function () {
            $(".scannedBarcode").focus().select();
        }, 100);
    };

    /**
     * Select the previous picklist line
     */
    self.prevPickingLine = function () {
        if (parseInt(self.selectedPicklistLineIndex(), 10) > 1) {
            self.scannedBarcode(null);
            self.selectedPicklistLineIndex(
                self.selectedPicklistLineIndex() - 1
            );
            self.selectedPicklistLine(
                self.selectedPicklist().PicklistLines.PicklistLine[
                    self.selectedPicklistLineIndex() - 1
                ]
            );

            if (self.globalPickingType() == "pickToCart") {
                $.each(
                    self.selectedPicklist().combinedPicklists,
                    function (index, currentPicklist) {
                        if (
                            currentPicklist.PicklistId ==
                            self.selectedPicklistLine().PicklistId
                        ) {
                            //if (currentPicklist.TUID != "") {
                            console.log(currentPicklist);
                            console.log(
                                "CURRENT TU ID: " + currentPicklist.TUID
                            );
                            self.currentTUID(currentPicklist.TUID);
                            //}
                        }
                    }
                );
            }

            //focus on the barcode input
            setTimeout(function () {
                $(".scannedBarcode").focus().select();
            }, 100);
        }
    };

    self.scanCartId = function (event) {
        if (event.which == 13) {
            console.log("CURRENT PICKLIST: ");
            console.log(self.selectedPicklist());

            self.showLoader(true);
            var jsonObj = {
                Scanning_GenericInterfaceClass: {
                    GUID: self.guid(),
                    ActionType: 6,
                    Picklist: self.selectedPicklist().PicklistId,
                    PicklistLine: "1",
                    WarehouseID: self.warehouseId(),
                    ValueToValidate: self.scannedCartId(),
                    UserId: self.username(),
                    ScannedValueType: "CI",
                },
            };
            jsonObj = JSON.stringify(jsonObj);

            //PUT on the generic scanning PUT service. Request to update the timestamp, using value 1 for ActionType.
            $.ajax({
                type: "PUT",
                url:
                    WS_ROOT +
                    WS.SCANNING_GENERIC_PUT +
                    "?UserID=" +
                    self.username() +
                    "&ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode,
                data: jsonObj,
                contentType: "application/json; charset=utf-8",
                dataType: "text",
            })
                .done(function (data) {
                    self.showLoader(false);
                    self.scannedCartId("");
                    self.startPicking();
                })
                .error(function (xhr, status, error) {
                    //self.showFinalBottomButtons(true);
                    self.scannedCartId("");
                    self.showLoader(false);
                    if (xhr.responseText) {
                        var message = JSON.parse(xhr.responseText).message;
                        if (message.indexOf("Bezig") > -1) {
                            message.substr(0, message.lastIndexOf("Bezig"));
                            var message = message.substring(
                                0,
                                message.indexOf("Bezig")
                            );
                        }
                        if (message.indexOf("Busy") > -1) {
                            message.substr(0, message.lastIndexOf("Busy"));
                            var message = message.substring(
                                0,
                                message.indexOf("Busy")
                            );
                        }
                        self.errorMessage(message);
                        self.hideErrorMessage(3000);
                    }
                })
                .always(function () {
                    self.showLoader(false);
                });
        }
        return true;
    };

    /**
     * Handle the key events on the barcode input
     * @param value
     * @param event
     * @returns {boolean}
     */
    self.scanPicklistBarcode = function (event) {
        if (event.which == 13) {
            console.log("CURRENT PICKLIST: " + self.selectedPicklist());
            console.log("CURRENT LINE: " + self.selectedPicklistLine());
            // reset wrong scanned picklist message
            self.wrongPicklistMessage("");
            //when Enter key is pressed, check the entered value to match the location barcode or the pallet barcode
            if (
                self.scannedBarcode() &&
                self.selectedPicklistLine() &&
                (self.scannedBarcode().toUpperCase() ===
                    self.selectedPicklistLine().LocationBarcode.toUpperCase() ||
                    self.scannedBarcode().toUpperCase() ===
                        self.selectedPicklistLine().PalletBarcode.toUpperCase())
            ) {
                //if it check, open the Add Amount screen

                self.lastScannedLocation(self.scannedBarcode());

                if (
                    self.selectedPicklist().ProductBarcodeValidation ==
                        "true" ||
                    self.selectedPicklist().EANCheckOnly == "true"
                ) {
                    self.page("pickenManualPickingStart");
                    if (
                        self.selectedPicklist().ProductBarcodeValidation ==
                        "true"
                    ) {
                        setTimeout(function () {
                            $("#pickingBarcode").focus();
                        }, 250);
                    }
                } else {
                    /*var show_tu_id_scan = false;
                    if (self.globalPickingType() == "pickToCart") {
                        $.each(
                            self.selectedPicklist().combinedPicklists,
                            function (index, currentPicklist) {
                                if (
                                    currentPicklist.PicklistId ==
                                    self.selectedPicklistLine().PicklistId
                                ) {
                                    if (
                                        currentPicklist.OpenCarrierPresent ==
                                        "false"
                                    ) {
                                        show_tu_id_scan = true;
                                    }
                                }
                            }
                        );
                    }

                    if (show_tu_id_scan) {
                        console.log("NEED TO SHOW TU ID VALIDATOR");
                        self.validateFrom("location_scanned");
                        self.pickingTUID("");
                        self.currentTUID("");
                        self.page("validateTUID");
                        setTimeout(function () {
                            $("#pickingTUID").focus();
                        }, 250);
                    } else {*/
                    if (
                        self.selectedPicklist().ProductBarcodeValidation ==
                            "false" &&
                        self.selectedPicklist().EANCheckOnly == "false"
                    ) {
                        //self.page("pickenManualPickingStart");

                        if (self.globalPickingType() == "pickToCart") {
                            $.each(
                                self.selectedPicklist().combinedPicklists,
                                function (index, currentPicklist) {
                                    if (
                                        currentPicklist.PicklistId ==
                                        self.selectedPicklistLine().PicklistId
                                    ) {
                                        self.selectedPicklist().DefaultPickedQuantity =
                                            self.selectedPicklist().combinedPicklists[
                                                index
                                            ].DefaultPickedQuantity;
                                    }
                                }
                            );
                        }

                        if (
                            self.selectedPicklist().DefaultPickedQuantity ===
                            "true"
                        ) {
                            self.selectedPicklistLine().QuantityPicked(
                                parseFloat(
                                    self.selectedPicklistLine().QuantityToPick()
                                ) -
                                    parseFloat(
                                        self.selectedPicklistLine()
                                            .QuantityPickedInitial
                                    )
                            );
                        }

                        if (
                            self.selectedPicklist().DefaultPickedQuantity ===
                                "true" &&
                            self.selectedPicklistLine().QuantityPicked() ==
                                self.selectedPicklistLine().QuantityToPick() -
                                    self.selectedPicklistLine()
                                        .QuantityPickedInitial
                        ) {
                            self.selectedPicklistLine().FullyPickedObservable(
                                true
                            );
                        }

                        self.page("pickenAddAmount");
                        setTimeout(function () {
                            $(".QuantityPicked").focus();
                        }, 250);
                    } else {
                        if (
                            self.scannedBarcode().toUpperCase() ===
                            self
                                .selectedPicklistLine()
                                .LocationBarcode.toUpperCase()
                        ) {
                            self.openPickenAddAmount("SL");
                        } else {
                            self.openPickenAddAmount("SP");
                        }
                    }
                    /*}*/
                }
            } else {
                // display an error message and clear the input
                self.scannedBarcode(null);
                $(".scannedBarcode").focus().select();
                self.wrongPicklistMessage(
                    'Scanned barcode was not expected, please scan again or press button "Scan onmogelijk" and manually confirm location.'
                );
            }
        }
        return true;
    };

    /**
     * Open the Add Amount screen.
     * @param manualScan
     */
    self.openPickenAddAmount = function (typeOfValidation) {
        //set the TypeOfValidation based on the manualScan parameter.
        self.selectedPicklistLine().TypeOfValidation = typeOfValidation;

        if (self.globalPickingType() == "pickToCart") {
            $.each(
                self.selectedPicklist().combinedPicklists,
                function (index, currentPicklist) {
                    if (
                        currentPicklist.PicklistId ==
                        self.selectedPicklistLine().PicklistId
                    ) {
                        self.selectedPicklist().DefaultPickedQuantity =
                            self.selectedPicklist().combinedPicklists[
                                index
                            ].DefaultPickedQuantity;
                    }
                }
            );
        }

        console.log(self.selectedPicklist());

        if (self.selectedPicklist().DefaultPickedQuantity === "true") {
            self.selectedPicklistLine().QuantityPicked(
                parseFloat(self.selectedPicklistLine().QuantityToPick()) -
                    parseFloat(
                        self.selectedPicklistLine().QuantityPickedInitial
                    )
            );
        }

        //if the DefaultPickedQuantity is true, update the fullyPicked observable   (parseInt(self.selectedPicklistLine().QuantityToPick()) - parseInt(self.selectedPicklistLine().QuantityPickedInitial));
        if (
            self.selectedPicklist().DefaultPickedQuantity === "true" &&
            self.selectedPicklistLine().QuantityPicked() ==
                self.selectedPicklistLine().QuantityToPick() -
                    self.selectedPicklistLine().QuantityPickedInitial
        ) {
            self.selectedPicklistLine().FullyPickedObservable(true);
        }

        if (self.selectedPicklistLine().IsVariableWeightProduct == "true") {
            if (
                self.selectedPicklist().DefaultPickedQuantity === "true" &&
                self.selectedPicklistLine().QuantityPicked2() ==
                    self.selectedPicklistLine().QuantityToPick2() -
                        self.selectedPicklistLine().QuantityPickedInitial2
            ) {
                self.selectedPicklistLine().FullyPickedObservable(true);
            }
        }

        if (
            self.selectedPicklist().CollectBoxInfoDuringPickProcess == "true" &&
            parseFloat(self.selectedPicklistLine().QuantityPicked()).toFixed(
                2
            ) > 0
        ) {
            self.selectedPicklistLine().CheckBoxObservable(true);
        } else {
            self.selectedPicklistLine().CheckBoxObservable(false);
        }

        if(self.globalPickingType() == "pickToCart" 
            && self.skipScreenConfirmQuantity() === "true")
        {
            if (self.usePredefinedCarriers() == "true") {
                self.cartLocationShow(self.selectedPicklistLine().CartLocation);
            }
            self.pickingTUID("")
            self.page("validateTUID")
            setTimeout(function () {
                $("#pickingTUID").focus();
            }, 250)
        }else{
            self.page("pickenAddAmount");
        }

        //focus the Quantity Picked input.
        setTimeout(function () {
            $(".QuantityPicked").focus();
        }, 250);
    };

    /**
     * If the user can't scan the barcode, he can choose from a set of options, present on the Manual Picking screen.
     */
    self.openPicklistOptionsScreen = function () {
        // reset wrong scanned picklist message

        /*var show_tu_id_scan = false;

        if (
            self.globalPickingType() == "pickToCart" &&
            self.selectedPicklist().EANCheckOnly == "false" &&
            self.selectedPicklist().ProductBarcodeValidation == "false"
        ) {
            $.each(
                self.selectedPicklist().combinedPicklists,
                function (index, currentPicklist) {
                    if (
                        currentPicklist.PicklistId ==
                        self.selectedPicklistLine().PicklistId
                    ) {
                        if (currentPicklist.OpenCarrierPresent == "false") {
                            show_tu_id_scan = true;
                        }
                    }
                }
            );
        }

        if (show_tu_id_scan) {
            console.log("NEED TO SHOW TU ID VALIDATOR");
            self.validateFrom("location_scanned");
            self.pickingTUID("");
            self.currentTUID("");
            self.page("validateTUID");
            setTimeout(function () {
                $("#pickingTUID").focus();
            }, 250);
        } else {*/
        self.wrongPicklistMessage("");
        //self.scannedBarcode('');

        console.log("CURRENT TU ID: " + self.currentTUID());

        self.page("pickenManualPickingStart");
        if (self.selectedPicklist().ProductBarcodeValidation == "true") {
            setTimeout(function () {
                $("#pickingBarcode").focus();
            }, 250);
        }
        //}
    };

    self.backToPickenAddAmount = function () {
        self.page("pickenAddAmount");
    };

    self.backToScanBox = function () {
        self.scanBox("");
        self.page("scanBox");
        setTimeout(function () {
            $("#pickingScanBox").focus().select();
        }, 100);
    };

    self.backToPickingProcess = function () {
        if (self.selectedPicklist().EANCheckOnly == "true") {
            self.page("pickenAddAmount");
        } else {
            self.page("pickenAddAmount");
        }
        setTimeout(function () {
            $(".QuantityPicked").focus();
        }, 100);
    };

    self.backToConfirmManually = function () {
        self.isPressedBackIconValidateTuId("true");
        self.openPicklistLineNavigation();
    };

    self.backToValidateTUID = function () {
        self.pickingTUID("")
        self.page("validateTUID")
        setTimeout(function () {
            $("#pickingTUID").focus();
        }, 250)
    };


    /**
     * Confirm the manual picking
     */
    self.confirmManualPicking = function () {
        self.barcodeToConfirm("");
        self.pickedWithBarcode(false);
        self.pickedManually(true);

        console.log("CURRENT TU ID: " + self.currentTUID());

        if (self.scannedBarcode() != "") {
            console.log("VALIDATION: SL");
            self.openPickenAddAmount("SL");
        } else {
            console.log("VALIDATION: H");
            self.openPickenAddAmount("H");
        }
    };

    self.scanBarcodePicking = function () {
        self.pickingBarcode("");
        self.hideErrorMessage(0);
        self.showLoader(true);
        self.multiBarcodes.removeAll();
        $.getJSON(
            WS_ROOT +
                WS.GET_ProductBarcode +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&ProductnumberDerived=" +
                self.selectedPicklistLine().Product,
            function (data) {
                console.log(data);
                if (
                    data &&
                    data.MultiBarcodesPerProduct &&
                    data.MultiBarcodesPerProduct.Barcode
                ) {
                    self.multiBarcodes.push(
                        data.MultiBarcodesPerProduct.Barcode
                    );
                }
                //self.page('pickenScanBarcode');
                setTimeout(function () {
                    $("#pickingBarcode").focus().select();
                }, 100);
            }
        )
            .done(function () {
                self.showLoader(false);
            })
            .error(function (xhr, status, error) {
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    self.hideErrorMessage();
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };
    /**
     * Click to increase the product description height
     */
    self.showFullProductDescription = function () {
        if ($(".instruction-line-tappable").hasClass("big")) {
            $(".instruction-line-tappable").removeClass("big");
        } else {
            $(".instruction-line-tappable").addClass("big");
        }
        //focus the quantity to pick
        self.selectValue(".QuantityPicked");
    };

    /**
     * Skip the current picklist line
     */
    self.skipPickingLine = function () {
        //update the server that the line is skipped
        self.showLoader(true);
        //ActionType for skipping the line is 5
        var jsonObj = {
            Scanning_GenericInterfaceClass: {
                GUID: self.guid(),
                ActionType: 5,
                Picklist: self.selectedPicklist().PicklistId,
                UserId: self.username(),
                PicklistLine: self.selectedPicklistLine().PicklistLineId,
                QuantityPickedVEH: "",
                QuantityPickedPEH: "",
                FullyPicked: "false",
                PalletFull: self.selectedPicklistLine().PalletFullObservable(),
                IsBundledLine: self.selectedPicklistLine().IsBundledLine,
                TypeOfValidation: self.selectedPicklistLine().TypeOfValidation,
                LocationBarcode: self.selectedPicklistLine().LocationBarcode,
                Product: self.selectedPicklistLine().Product,
                VehOrPeh: self.selectedPicklistLine().UseVEHorPEH || "P",
                WarehouseID: self.warehouseId(),
                IsBulk: self.selectedPicklistLine().IsBulk,
                PalletBarcode: self.selectedPicklistLine().PalletBarcode,
                PalletNumber: self.selectedPicklistLine().PalletNumber,
            },
        };
        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.SCANNING_GENERIC_PUT +
                "?UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function () {
                //mark it as skipped in the model also
                self.selectedPicklist().PicklistLines.PicklistLine[
                    self.selectedPicklistLineIndex() - 1
                ].IsLineSkiped = "true";
                self.selectedPicklistLine().IsLineSkiped = "true";
                //find the next available picklist line (FullyPicked is set to false)
                self.nextPickingLine(true);
                //after it's found, open the Picklist line navigation.

                self.openPicklistLineNavigation();
            })
            .error(function (xhr, status, error) {
                //if there's an error set the pickenErrorMessage observable with the message of the error. This will trigger the display of the error page, on top of the normal screen.
                if (xhr.responseText) {
                    self.showLoader(false);
                    var message = JSON.parse(xhr.responseText).message;
                    self.pickenErrorMessage(message);
                }
            })
            .always(function () {
                //when the call ends hide the loader
                self.showLoader(false);
            });
    };

    self.updatePickingQuantityNow = function () {
        self.updatePickingQuantity();
    };

    /**
     * Cancel the selected picklistLine
     */
    self.cancelPickingLine = function () {
        //set the type of validation to Manual
        self.selectedPicklistLine().TypeOfValidation = "H";
        //Set the Amount of the selected picklist line to 0
        self.updatePickingQuantity("0");
    };

    /**
     * Update the amount of the selected picklist line
     * @param explicitQuantity
     */
    self.updatePickingQuantity = function (explicitQuantity, bypasstuid) {
        if (self.globalPickingType() == "pickToCart") {
            var show_tu_id_scan = true;
            $.each(
                self.selectedPicklist().combinedPicklists,
                function (index, currentPicklist) {
                    if (
                        currentPicklist.PicklistId ==
                        self.selectedPicklistLine().PicklistId
                    ) {
                        if (currentPicklist.OpenCarrierPresent == "false") {
                            show_tu_id_scan = true;
                        }
                    }
                }
            );
        }

        if (show_tu_id_scan && explicitQuantity != "0" && bypasstuid != true) {
            console.log("NEED TO SHOW TU ID VALIDATOR");
            self.validateFrom("confirm_manually");
            self.pickingTUID("");
            //self.currentTUID("");
            //console.log(self.selectedPicklistLine());

            if (self.usePredefinedCarriers() == "true") {
                self.cartLocationShow(self.selectedPicklistLine().CartLocation);
            }
            self.pickingTUID("")
            self.page("validateTUID");
            setTimeout(function () {
                $("#pickingTUID").focus();
            }, 250);
            return;
        }

        //since we're dealing with a service call, turn on the loader page
        self.showLoader(true);
        //ActionType for updating the quantity is 2

        self.selectedPicklistLine().MaintainQuantity = self
            .selectedPicklistLine()
            .QuantityPicked();

        window.boxFound = true;

        if (self.selectedPicklistLine().CheckBoxObservable() == true) {
            window.boxFound = false;
            $.each(
                self.selectedPicklist().Boxes.Box,
                function (index, currentBox) {
                    console.log(
                        currentBox.BoxReference + " / " + self.scanBox()
                    );

                    if (currentBox.BoxReference == self.scanBox()) {
                        window.boxFound = true;

                        /*self.selectedPicklist().Boxes.Box[
                            index
                        ].BoxLines.BoxLine =
                            self.selectedPicklist().Boxes.Box[index].BoxLines
                                .BoxLine || [];*/

                        self.selectedPicklist().Boxes.Box[
                            index
                        ].BoxLines.BoxLine.push({
                            PicklistId: self.selectedPicklist().PicklistId,
                            PicklistLineId:
                                self.selectedPicklistLine().PicklistLineId,
                            QuantityPEH: parseInt(
                                self.selectedPicklistLine().QuantityPicked()
                            ),
                            Product: self.selectedPicklistLine().Product,
                            ProductDescription:
                                self.selectedPicklistLine().ProductName,
                            EANBarcode: self.selectedPicklistLine().EANBarcode,
                            BestBeforeDate:
                                self.selectedPicklistLine().BestBeforeDate,
                            BestBeforeApplicable:
                                self.selectedPicklistLine()
                                    .BestBeforeDateApplicable,
                        });
                    }
                }
            );
        }

        console.log("BOXES: ");
        console.log(self.selectedPicklist().Boxes);

        //If the quantity picked matched the Remained quantity to pick, force update the FullyPickedObservable to true in order to skip this line next time
        //It happened in the past that they would pick the entire quantity without checking the FullyPicked button
        if (
            self.selectedPicklistLine().QuantityPicked() ==
            self.selectedPicklistLine().QuantityToPick() -
                self.selectedPicklistLine().QuantityPickedInitial
        ) {
            self.selectedPicklistLine().FullyPickedObservable(true);
            self.selectedPicklistLine().FullyPicked = "true";
        }

        if (self.selectedPicklistLine().IsVariableWeightProduct == "true") {
            if (
                self.selectedPicklistLine().QuantityPicked2() ==
                self.selectedPicklistLine().QuantityToPick2() -
                    self.selectedPicklistLine().QuantityPickedInitial2
            ) {
                self.selectedPicklistLine().FullyPickedObservable(true);
                self.selectedPicklistLine().FullyPicked = "true";
            }
        }

        //if explicitQuantity has a value, set it over the QuantityPickedVEH or QuantityPickedPEH attribute
        //else set QuantityPicked over the QuantityPickedVEH or QuantityPickedPEH attribute

        //VEH or PEH is decided based on VehOrPeh attribute value

        console.log("LOCATION: " + self.scannedBarcode());
        console.log("PRODUCT: " + self.pickingBarcode());

        if (self.scannedBarcode() == null) self.scannedBarcode("");
        if (self.pickingBarcode() == null) self.pickingBarcode("");

        if (self.scannedBarcode() != "" && self.pickingBarcode() != "") {
            self.selectedPicklistLine().TypeOfValidation = "SLP";
        } else if (self.scannedBarcode() == "" && self.pickingBarcode() != "") {
            self.selectedPicklistLine().TypeOfValidation = "SP";
        } else if (self.scannedBarcode() != "" && self.pickingBarcode() == "") {
            self.selectedPicklistLine().TypeOfValidation = "SL";
        } else {
            self.selectedPicklistLine().TypeOfValidation = "H";
        }

        if (self.selectedPicklistLine().IsVariableWeightProduct == "false") {
            var jsonObj = {
                Scanning_GenericInterfaceClass: {
                    GUID: self.guid(),
                    ActionType: 2,
                    BoxReference:
                        self.selectedPicklistLine().CheckBoxObservable() == true
                            ? self.scanBox()
                            : "",
                    TUID:
                        self.globalPickingType() == "regular"
                            ? ""
                            : self.currentTUID(),
                    Picklist:
                        self.globalPickingType() == "regular"
                            ? self.selectedPicklist().PicklistId
                            : self.selectedPicklistLine().PicklistId,
                    UserId: self.username(),
                    PicklistLine: self.selectedPicklistLine().PicklistLineId,
                    QuantityPickedVEH:
                        explicitQuantity ||
                        (self.selectedPicklistLine().UseVEHorPEH === "V"
                            ? self.selectedPicklistLine().QuantityPicked()
                            : self.selectedPicklistLine().QuantityPickedVEH),
                    QuantityPickedPEH:
                        explicitQuantity ||
                        (self.selectedPicklistLine().UseVEHorPEH === "P" ||
                        self.selectedPicklistLine().UseVEHorPEH === ""
                            ? self.selectedPicklistLine().QuantityPicked()
                            : self.selectedPicklistLine().QuantityPickedPEH),
                    FullyPicked: explicitQuantity
                        ? "true"
                        : self.selectedPicklistLine().FullyPickedObservable(),
                    PalletFull: self
                        .selectedPicklistLine()
                        .PalletFullObservable(),
                    IsBundledLine: self.selectedPicklistLine().IsBundledLine,
                    TypeOfValidation:
                        self.selectedPicklistLine().TypeOfValidation,
                    LocationBarcode:
                        self.selectedPicklistLine().LocationBarcode,
                    Product: self.selectedPicklistLine().Product,
                    VehOrPeh: self.selectedPicklistLine().UseVEHorPEH || "P",
                    WarehouseID: self.warehouseId(),
                    IsBulk: self.selectedPicklistLine().IsBulk,
                    PalletBarcode: self.selectedPicklistLine().PalletBarcode,
                    PalletNumber: self.selectedPicklistLine().PalletNumber,
                    PicklistLineConfirmedManually: self.pickedManually(),
                    PicklistLineConfirmedByBarcode: self.pickedWithBarcode(),
                    ValueToValidate: self.barcodeToConfirm(),
                    IsVariableWeightProduct:
                        self.selectedPicklistLine().IsVariableWeightProduct,
                },
            };
        } else {
            var jsonObj = {
                Scanning_GenericInterfaceClass: {
                    GUID: self.guid(),
                    ActionType: 2,
                    BoxReference:
                        self.selectedPicklistLine().CheckBoxObservable() == true
                            ? self.scanBox()
                            : "",
                    TUID:
                        self.globalPickingType() == "regular"
                            ? ""
                            : self.currentTUID(),
                    Picklist:
                        self.globalPickingType() == "regular"
                            ? self.selectedPicklist().PicklistId
                            : self.selectedPicklistLine().PicklistId,
                    UserId: self.username(),
                    PicklistLine: self.selectedPicklistLine().PicklistLineId,
                    QuantityPickedVEH: self
                        .selectedPicklistLine()
                        .QuantityPicked2(),

                    QuantityPickedPEH: parseFloat(
                        self.selectedPicklistLine().QuantityPicked()
                    ),
                    FullyPicked: explicitQuantity
                        ? "true"
                        : self.selectedPicklistLine().FullyPickedObservable(),
                    PalletFull: self
                        .selectedPicklistLine()
                        .PalletFullObservable(),
                    IsBundledLine: self.selectedPicklistLine().IsBundledLine,
                    TypeOfValidation:
                        self.selectedPicklistLine().TypeOfValidation,
                    LocationBarcode:
                        self.selectedPicklistLine().LocationBarcode,
                    Product: self.selectedPicklistLine().Product,
                    VehOrPeh: self.selectedPicklistLine().UseVEHorPEH || "P",
                    WarehouseID: self.warehouseId(),
                    IsBulk: self.selectedPicklistLine().IsBulk,
                    PalletBarcode: self.selectedPicklistLine().PalletBarcode,
                    PalletNumber: self.selectedPicklistLine().PalletNumber,
                    PicklistLineConfirmedManually: self.pickedManually(),
                    PicklistLineConfirmedByBarcode: self.pickedWithBarcode(),
                    ValueToValidate: self.barcodeToConfirm(),
                    IsVariableWeightProduct:
                        self.selectedPicklistLine().IsVariableWeightProduct,
                },
            };
        }

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.SCANNING_GENERIC_PUT +
                "?UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function () {
                if (!window.boxFound) {
                    self.selectedPicklist().Boxes.Box.push({
                        PicklistId: self.selectedPicklist().PicklistId,
                        BoxReference: self.scanBox(),
                        BoxLines: {
                            BoxLine: [
                                {
                                    PicklistId:
                                        self.selectedPicklist().PicklistId,
                                    PicklistLineId:
                                        self.selectedPicklistLine()
                                            .PicklistLineId,
                                    QuantityPEH: parseInt(
                                        self
                                            .selectedPicklistLine()
                                            .QuantityPicked()
                                    ),
                                    Product:
                                        self.selectedPicklistLine().Product,
                                    ProductDescription:
                                        self.selectedPicklistLine().ProductName,
                                    EANBarcode:
                                        self.selectedPicklistLine().EANBarcode,
                                    BestBeforeDate:
                                        self.selectedPicklistLine()
                                            .BestBeforeDate,
                                    BestBeforeApplicable:
                                        self.selectedPicklistLine()
                                            .BestBeforeDateApplicable,
                                },
                            ],
                        },
                    });
                }

                if (self.globalPickingType() == "pickToCart") {
                    $.each(
                        self.selectedPicklist().combinedPicklists,
                        function (index, currentPicklist) {
                            if (
                                currentPicklist.PicklistId ==
                                self.selectedPicklistLine().PicklistId
                            ) {
                                self.selectedPicklist().combinedPicklists[
                                    index
                                ].TUID = self.currentTUID();
                            }
                        }
                    );
                }

                self.showLoader(false);
                //on success update the FullyPicked attribute value for the selected picklist line
                self.selectedPicklistLine().FullyPicked =
                    self.selectedPicklistLine().FullyPickedObservable() ||
                    explicitQuantity
                        ? "true"
                        : "false";

                //on cancel line, set the fully picked to true, so we can go to the next available line.
                if (explicitQuantity) {
                    self.selectedPicklistLine().FullyPickedObservable(true);
                }

                //self.selectedPicklist().PicklistLines.PicklistLine[self.selectedPicklistLineIndex()-1].FullyPicked = (self.selectedPicklistLine().FullyPickedObservable() || explicitQuantity) ? "true" : "false";
                var quantityPicked = self
                    .selectedPicklistLine()
                    .QuantityPicked()
                    ? self.selectedPicklistLine().QuantityPicked()
                    : 0;
                var quantityPickedInitial =
                    parseFloat(
                        self.selectedPicklistLine().QuantityPickedInitial
                    ) + parseFloat(quantityPicked);

                self.selectedPicklistLine().QuantityPickedInitial =
                    quantityPickedInitial ? quantityPickedInitial : "0";

                var quantityPicked2 = self
                    .selectedPicklistLine()
                    .QuantityPicked2()
                    ? self.selectedPicklistLine().QuantityPicked2()
                    : 0;
                var quantityPickedInitial2 =
                    parseFloat(
                        self.selectedPicklistLine().QuantityPickedInitial2
                    ) + parseFloat(quantityPicked2);

                self.selectedPicklistLine().QuantityPickedInitial2 =
                    quantityPickedInitial2 ? quantityPickedInitial2 : "0";

                //self.selectedPicklist().PicklistLines.PicklistLine[self.selectedPicklistLineIndex()-1].QuantityPickedInitial = parseFloat(self.selectedPicklistLine().QuantityPickedInitial) + parseFloat(self.selectedPicklistLine().QuantityPicked());

                //after picking, update the line as not skipped anymore
                self.selectedPicklist().PicklistLines.PicklistLine[
                    self.selectedPicklistLineIndex() - 1
                ].IsLineSkiped = "false";
                self.selectedPicklistLine().IsLineSkiped = "false";

                if (self.globalPickingType() == "pickToCart") {
                    $.each(
                        self.selectedPicklist().combinedPicklists,
                        function (index, currentPicklist) {
                            if (
                                currentPicklist.PicklistId ==
                                self.selectedPicklistLine().PicklistId
                            ) {
                                self.selectedPicklist().OpenCarrierPresent =
                                    self.selectedPicklist().combinedPicklists[
                                        index
                                    ].OpenCarrierPresent;
                            }
                        }
                    );
                }

                if (self.globalPickingType() == "pickToCart") {
                    $.each(
                        self.selectedPicklist().combinedPicklists,
                        function (index, currentPicklist) {
                            if (
                                currentPicklist.PicklistId ==
                                self.selectedPicklistLine().PicklistId
                            ) {
                                self.selectedPicklist().DefaultPickedQuantity =
                                    self.selectedPicklist().combinedPicklists[
                                        index
                                    ].DefaultPickedQuantity;
                            }
                        }
                    );
                }

                //if we did a picking > 0, set the carrier flag to true
                if (
                    self.selectedPicklistLine().QuantityPicked() &&
                    parseFloat(self.selectedPicklistLine().QuantityPicked()) > 0
                ) {
                    self.selectedPicklist().OpenCarrierPresent = "true";
                }

                console.log(
                    "QTY PICKED: " +
                        self.selectedPicklistLine().QuantityPicked()
                );
                console.log(
                    "OPEN CARRIER PRESENT: " +
                        self.selectedPicklist().OpenCarrierPresent
                );
                console.log(self.selectedPicklist());

                //reset some values, because they would've keep their value next time
                //but take into consideration the flag that will fill the quantity.
                if (self.selectedPicklist().DefaultPickedQuantity === "true") {
                    self.selectedPicklistLine().QuantityPicked(
                        parseFloat(
                            self.selectedPicklistLine().QuantityToPick()
                        ) -
                            parseFloat(
                                self.selectedPicklistLine()
                                    .QuantityPickedInitial
                            )
                    );

                    if (self.selectedPicklistLine().QuantityPicked() % 1 != 0)
                        self.selectedPicklistLine().QuantityPicked(
                            self
                                .selectedPicklistLine()
                                .QuantityPicked()
                                .toFixed(2)
                        );

                    self.selectedPicklistLine().QuantityPicked2(
                        parseFloat(
                            self.selectedPicklistLine().QuantityToPick2()
                        ) -
                            parseFloat(
                                self.selectedPicklistLine()
                                    .QuantityPickedInitial2
                            )
                    );
                    self.selectedPicklistLine().FullyPickedObservable(true);
                } else {
                    self.selectedPicklistLine().QuantityPicked(0);
                }

                //determine the next unprocessed picklist line
                self.getNextUnprocessedPicklistLine();
            })
            .error(function (xhr, status, error) {
                //if there's an error set the pickenErrorMessage observable with the message of the error. This will trigger the display of the error page, on top of the normal screen.
                if (xhr.responseText) {
                    self.showLoader(false);
                    var message = JSON.parse(xhr.responseText).message;
                    self.pickenErrorMessage(message);
                }

                /*var jsonObj = {
                    Scanning_GenericInterfaceClass: {
                        GUID: self.guid(),
                        ActionType: 7,
                        ErrorMessage: message,
                    },
                };

                jsonObj = JSON.stringify(jsonObj);

                $.ajax({
                    type: "PUT",
                    url:
                        WS_ROOT +
                        WS.SCANNING_GENERIC_PUT +
                        "?UserID=" +
                        self.username() +
                        "&ConcernCode=" +
                        self.ConcernCode +
                        "&CompanyCode=" +
                        self.CompanyCode,
                    data: jsonObj,
                    contentType: "application/json; charset=utf-8",
                    dataType: "text",
                }).done(function () {});*/
            })
            .always(function () {
                //when the call ends hide the loader
            });
    };

    /**
     * Determine the next unprocessed picklist line.
     */
    self.getNextUnprocessedPicklistLine = function () {
        //set the nextAvailablePicklistLineFound to false
        self.nextAvailablePicklistLineFound(false);
        //find the next unprocessed picklist line, starting from the current position.
        //skip the skipped lines.
        for (
            var i = self.selectedPicklistLineIndex();
            i < self.selectedPicklist().PicklistLines.PicklistLine.length;
            i++
        ) {
            if (
                self.selectedPicklist().PicklistLines.PicklistLine[i]
                    .IsLineSkiped === "false" &&
                self.selectedPicklist().PicklistLines.PicklistLine[i]
                    .FullyPicked === "false" &&
                !self.nextAvailablePicklistLineFound()
            ) {
                self.nextAvailablePicklistLineFound(true);
                //go to the next line only if the current one is fully picked
                if (self.selectedPicklistLine().FullyPickedObservable()) {
                    self.selectedPicklistLineIndex(i + 1);
                }
            }
        }
        //find the next unprocessed picklist line, starting from the first picklist line until the current one.
        if (!self.nextAvailablePicklistLineFound()) {
            for (
                var i = 0;
                i < self.selectedPicklist().PicklistLines.PicklistLine.length;
                i++
            ) {
                if (
                    self.selectedPicklist().PicklistLines.PicklistLine[i]
                        .IsLineSkiped === "false" &&
                    self.selectedPicklist().PicklistLines.PicklistLine[i]
                        .FullyPicked === "false" &&
                    !self.nextAvailablePicklistLineFound()
                ) {
                    self.nextAvailablePicklistLineFound(true);
                    //go to the next line only if the current one is fully picked
                    if (self.selectedPicklistLine().FullyPickedObservable()) {
                        self.selectedPicklistLineIndex(i + 1);
                    }
                }
            }
        }

        //if we didn't find a line that is not fully picked, check in the skipped lines also
        if (!self.nextAvailablePicklistLineFound()) {
            for (
                var i = 0;
                i < self.selectedPicklist().PicklistLines.PicklistLine.length;
                i++
            ) {
                if (
                    self.selectedPicklist().PicklistLines.PicklistLine[i]
                        .FullyPicked === "false" &&
                    !self.nextAvailablePicklistLineFound()
                ) {
                    self.nextAvailablePicklistLineFound(true);
                    //go to the next line only if the current one is fully picked
                    if (self.selectedPicklistLine().FullyPickedObservable()) {
                        self.selectedPicklistLineIndex(i + 1);
                    }
                }
            }
        }

        if (!self.nextAvailablePicklistLineFound()) {
            //if there aren't anymore picklist lines to be processed determine if the pallet is marked as full
            //if (self.selectedPicklistLine().PalletFullObservable()) {
            if (
                self.selectedPicklistLine().PalletFullObservable() &&
                self.selectedPicklist().OpenCarrierPresent === "true"
            ) {
                //the pallet is marked as full, open the pallet screen, to insert the necesarry info (height and weight)
                if (self.globalPickingType() == "regular") {
                    self.openNewPallet();
                } else {
                    self.confirmAddNewPallet();
                    //self.page("pickenClosePallet");
                }
            } else {
                //warn the user that he needs to close the last pallet

                if (self.usePredefinedCarriers() == "true") {
                    self.page("pickenProcessPicklist");
                } else {
                    self.page("pickenClosePallet");
                }

                //self.openConfirmProcessPicklist();
            }
        } else {
            //there are more picklist lines to be processed. Determine if the pallet is marked as full
            //if (self.selectedPicklistLine().PalletFullObservable()) {
            if (
                self.selectedPicklistLine().PalletFullObservable() &&
                self.selectedPicklist().OpenCarrierPresent === "true"
            ) {
                //the pallet is marked as full, open the pallet screen, to insert the necesarry info (height and weight)
                if (self.globalPickingType() == "regular") {
                    self.openNewPallet();
                } else {
                    self.confirmAddNewPallet();
                }
            } else {
                //the pallet isn't marked as full. Select the next picklist line that is not yet processed.
                self.selectedPicklistLine(
                    self.selectedPicklist().PicklistLines.PicklistLine[
                        self.selectedPicklistLineIndex() - 1
                    ]
                );

                if (self.globalPickingType() == "pickToCart") {
                    $.each(
                        self.selectedPicklist().combinedPicklists,
                        function (index, currentPicklist) {
                            if (
                                currentPicklist.PicklistId ==
                                self.selectedPicklistLine().PicklistId
                            ) {
                                //if (currentPicklist.TUID != "") {
                                console.log(currentPicklist);
                                console.log(
                                    "CURRENT TU ID: " + currentPicklist.TUID
                                );
                                self.currentTUID(currentPicklist.TUID);
                                //}
                            }
                        }
                    );
                }

                if (self.selectedPicklistLine().CheckBoxObservable() == true) {
                    self.selectedPicklistLine().QuantityPicked(
                        self.selectedPicklistLine().MaintainQuantity
                    );

                    if (
                        self.selectedPicklistLine().QuantityToPick() -
                            self.selectedPicklistLine().QuantityPickedInitial <
                        self.selectedPicklistLine().MaintainQuantity
                    ) {
                        self.selectedPicklistLine().QuantityPicked(
                            self.selectedPicklistLine().QuantityToPick() -
                                self.selectedPicklistLine()
                                    .QuantityPickedInitial
                        );
                    }

                    self.page("pickenAddAmount");

                    setTimeout(function () {
                        $(".QuantityPicked").focus().select();
                    }, 100);

                    self.showLoader(false);
                } else {
                    //open the picklist line navigation
                    self.openPicklistLineNavigation();
                }
            }
        }
    };

    /**
     * Open the picklist line navigation
     */
    self.openPicklistLineNavigation = function () {
        //console.log("TEST");

        //console.log("OPEN PICKLIST LINE NAVIGATION");
        //console.log(self.selectedPicklist());
        //console.log("CURRENT INDEX");
        //console.log(self.selectedPicklistLineIndex());

        if (
            self.selectedPicklist().ProductBarcodeValidation == "true" ||
            self.selectedPicklist().EANCheckOnly == "true"
        ) {
            self.pickingBarcode("");
            self.hideErrorMessage(0);
            self.showLoader(true);
            self.multiBarcodes.removeAll();
            $.getJSON(
                WS_ROOT +
                    WS.GET_ProductBarcode +
                    "?ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode +
                    "&ProductnumberDerived=" +
                    self.selectedPicklistLine().Product,
                function (data) {
                    console.log(data);

                    if (self.globalPickingType() == "pickToCart") {
                        $.each(
                            self.selectedPicklist().combinedPicklists,
                            function (index, currentPicklist) {
                                if (
                                    currentPicklist.PicklistId ==
                                    self.selectedPicklistLine().PicklistId
                                ) {
                                    self.selectedPicklist().EnableUseProductPackingbarcode =
                                        currentPicklist.EnableUseProductPackingbarcode;
                                }
                            }
                        );
                    }

                    if (
                        self.selectedPicklist()
                            .EnableUseProductPackingbarcode == "true"
                    ) {
                        if (
                            data &&
                            data.PalletScanner_Get_ProductBarcode_root
                                .MultiBarcodesPerProduct
                        ) {
                            if (
                                !$.isArray(
                                    data.PalletScanner_Get_ProductBarcode_root
                                        .MultiBarcodesPerProduct
                                )
                            ) {
                                self.multiBarcodes.push(
                                    data.PalletScanner_Get_ProductBarcode_root
                                        .MultiBarcodesPerProduct.Barcode
                                );
                            } else {
                                $.each(
                                    data.PalletScanner_Get_ProductBarcode_root
                                        .MultiBarcodesPerProduct,
                                    function (index, currentBarcode) {
                                        self.multiBarcodes.push(
                                            currentBarcode.Barcode
                                        );
                                    }
                                );
                            }
                        }
                    } else {
                        if (
                            data &&
                            data.PalletScanner_Get_ProductBarcode_root
                                .ProductnummerBarcodes
                        ) {
                            if (
                                !$.isArray(
                                    data.PalletScanner_Get_ProductBarcode_root
                                        .ProductnummerBarcodes
                                )
                            ) {
                                self.multiBarcodes.push(
                                    data.PalletScanner_Get_ProductBarcode_root
                                        .ProductnummerBarcodes.Barcode
                                );
                            } else {
                                $.each(
                                    data.PalletScanner_Get_ProductBarcode_root
                                        .ProductnummerBarcodes,
                                    function (index, currentBarcode) {
                                        self.multiBarcodes.push(
                                            currentBarcode.Barcode
                                        );
                                    }
                                );
                            }
                        }
                    }

                    console.log(self.multiBarcodes());

                    if (self.selectedPicklist().EANCheckOnly == "true") {
                        self.page("pickenManualPickingStart");
                        setTimeout(function () {
                            $("#pickingBarcode").focus();
                        }, 250);
                    } else {
                        if (
                            self.globalPickingType() == "pickToCart" &&
                            self.lastScannedLocation() != "" &&
                            self.page() != "pickenManualPickingStart"
                        ) {
                            console.log(
                                self
                                    .selectedPicklistLine()
                                    .LocationBarcode.toUpperCase() +
                                    "/" +
                                    self
                                        .selectedPicklistLine()
                                        .PalletBarcode.toUpperCase()
                            );
                            if (
                                self.lastScannedLocation().toUpperCase() ===
                                    self
                                        .selectedPicklistLine()
                                        .LocationBarcode.toUpperCase() ||
                                self.lastScannedLocation().toUpperCase() ===
                                    self
                                        .selectedPicklistLine()
                                        .PalletBarcode.toUpperCase()
                            ) {
                                self.page("pickenManualPickingStart");
                                setTimeout(function () {
                                    $("#pickingBarcode").focus();
                                }, 250);
                            } else {
                                self.page("pickenPickingProcess");
                                self.scannedBarcode("");
                                setTimeout(function () {
                                    $("#pickingBarcodeInputNew").focus();
                                }, 250);
                            }
                        } else {      
                            if(self.page() == "pickenManualPickingStart")
                            {
                                self.page("pickenPickingProcess")
                            }else{
                            if(self.selectedPicklist().ProductBarcodeValidation == "true" && self.isPressedBackIconValidateTuId() != "true"){
                                self.page("pickenPickingProcess")    
                            }else{
                                self.page("pickenManualPickingStart")
                            } 
                            }
                            self.scannedBarcode("");
                            setTimeout(function () {
                                $("#pickingBarcodeInputNew").focus();
                            }, 250);
                        }
                    }
                }
            )
                .done(function () {
                    self.showLoader(false);
                })
                .error(function (xhr, status, error) {
                    if (xhr.responseText) {
                        var message = JSON.parse(xhr.responseText).message;
                        self.errorMessage(message);
                        self.hideErrorMessage();
                    }
                })
                .always(function () {
                    self.isPressedBackIconValidateTuId("false")
                    self.showLoader(false);
                });
        } else {
            self.successMessage(false);
            self.errorMessage(null);

            if (
                self.globalPickingType() == "pickToCart" &&
                self.lastScannedLocation() != "" &&
                self.page() != "pickenManualPickingStart"
            ) {
                console.log(
                    self.selectedPicklistLine().LocationBarcode.toUpperCase() +
                        "/" +
                        self.selectedPicklistLine().PalletBarcode.toUpperCase()
                );
                if (
                    self.lastScannedLocation().toUpperCase() ===
                        self
                            .selectedPicklistLine()
                            .LocationBarcode.toUpperCase() ||
                    self.lastScannedLocation().toUpperCase() ===
                        self.selectedPicklistLine().PalletBarcode.toUpperCase()
                ) {
                    self.page("pickenManualPickingStart");
                    setTimeout(function () {
                        $("#pickingBarcode").focus();
                    }, 250);
                } else {
                    self.page("pickenPickingProcess");
                    self.scannedBarcode(null);
                    //focus the barcode input
                    setTimeout(function () {
                        $(".scannedBarcode").focus().select();
                    }, 100);
                }
            } else {
                if(self.page() == "pickenManualPickingStart")
                {
                    self.page("pickenPickingProcess")
                }else{
                    self.page("pickenManualPickingStart");
                }
                self.scannedBarcode(null);
                //focus the barcode input
                setTimeout(function () {
                    $(".scannedBarcode").focus().select();
                }, 100);
            }
        }

        //reset buttons pallet full and fully picked
        self.selectedPicklistLine().FullyPickedObservable(false);
        self.selectedPicklistLine().PalletFullObservable(false);
    };

    self.detectedChangeOnQuantity2 = function (event) {
        if (event.which != 13) {
            if (self.selectedPicklistLine().DoesntAllowDecimals == "true") {
                if (
                    self.selectedPicklistLine().QuantityPicked2() &&
                    self
                        .selectedPicklistLine()
                        .QuantityPicked2()
                        .replace(/\D/g, "") !=
                        self.selectedPicklistLine().QuantityPicked2()
                ) {
                    console.log("Qty needs to be int");
                    self.selectedPicklistLine().QuantityPicked2(
                        self
                            .selectedPicklistLine()
                            .QuantityPicked2()
                            .replace(/\D/g, "")
                    );
                    //return false;
                }
            } else {
                //console.log(self.selectedPicklistLine().QuantityPicked());
                self.selectedPicklistLine().QuantityPicked2(
                    self
                        .selectedPicklistLine()
                        .QuantityPicked2()
                        .replace(",", ".")
                );
            }

            if (
                parseFloat(
                    self.selectedPicklistLine().QuantityPicked()
                ).toFixed(2) ==
                parseFloat(
                    self.selectedPicklistLine().QuantityToPick() -
                        self.selectedPicklistLine().QuantityPickedInitial
                ).toFixed(2)
            ) {
                //mark the line as fully picked
                self.selectedPicklistLine().FullyPickedObservable(true);
            } else {
                self.selectedPicklistLine().FullyPickedObservable(false);
            }

            if (self.selectedPicklistLine().FullyPickedObservable() == false) {
                if (
                    self.selectedPicklistLine().IsVariableWeightProduct ==
                    "true"
                ) {
                    if (
                        self.selectedPicklistLine().QuantityPicked2() ==
                        self.selectedPicklistLine().QuantityToPick2() -
                            self.selectedPicklistLine().QuantityPickedInitial2
                    ) {
                        self.selectedPicklistLine().FullyPickedObservable(true);
                    }
                }
            }

            //return true is to Allow the default action (which is textInput update data-binding) on the input
            return true;
        }
    };

    self.detectedChangeOnQuantity = function (event) {
        //console.log(self.selectedPicklistLine().DoesntAllowDecimals);
        if (event.which != 13) {
            if (self.selectedPicklistLine().DoesntAllowDecimals == "true") {
                if (
                    self.selectedPicklistLine().QuantityPicked() &&
                    self
                        .selectedPicklistLine()
                        .QuantityPicked()
                        .replace(/\D/g, "") !=
                        self.selectedPicklistLine().QuantityPicked()
                ) {
                    console.log("Qty needs to be int");
                    self.selectedPicklistLine().QuantityPicked(
                        self
                            .selectedPicklistLine()
                            .QuantityPicked()
                            .replace(/\D/g, "")
                    );
                    //return false;
                }
            } else {
                self.selectedPicklistLine().QuantityPicked(
                    self
                        .selectedPicklistLine()
                        .QuantityPicked()
                        .replace(",", ".")
                );
            }

            // Check box observable

            console.log(
                "CHECKING: " +
                    self.selectedPicklist().CollectBoxInfoDuringPickProcess +
                    " / " +
                    parseFloat(
                        self.selectedPicklistLine().QuantityPicked()
                    ).toFixed(2)
            );

            if (
                self.selectedPicklist().CollectBoxInfoDuringPickProcess ==
                    "true" &&
                parseFloat(
                    self.selectedPicklistLine().QuantityPicked()
                ).toFixed(2) > 0
            ) {
                self.selectedPicklistLine().CheckBoxObservable(true);
            } else {
                self.selectedPicklistLine().CheckBoxObservable(false);
            }

            console.log(
                parseFloat(
                    self.selectedPicklistLine().QuantityPicked()
                ).toFixed(2)
            );
            console.log(
                self.selectedPicklist().CollectBoxInfoDuringPickProcess
            );
            console.log(self.selectedPicklistLine().CheckBoxObservable());

            //if the value entered matches the quantity to pick, mark it as fully picked
            if (
                parseFloat(
                    self.selectedPicklistLine().QuantityPicked()
                ).toFixed(2) ==
                parseFloat(
                    self.selectedPicklistLine().QuantityToPick() -
                        self.selectedPicklistLine().QuantityPickedInitial
                ).toFixed(2)
            ) {
                //mark the line as fully picked
                self.selectedPicklistLine().FullyPickedObservable(true);
            } else {
                self.selectedPicklistLine().FullyPickedObservable(false);
            }

            if (self.selectedPicklistLine().FullyPickedObservable() == false) {
                if (
                    self.selectedPicklistLine().IsVariableWeightProduct ==
                    "true"
                ) {
                    if (
                        self.selectedPicklistLine().QuantityPicked2() ==
                        self.selectedPicklistLine().QuantityToPick2() -
                            self.selectedPicklistLine().QuantityPickedInitial2
                    ) {
                        self.selectedPicklistLine().FullyPickedObservable(true);
                    }
                }
            }

            //return true is to Allow the default action (which is textInput update data-binding) on the input
            return true;
        }
    };

    /**
     * Display the picklist details screen
     * @param picklistId
     */
    self.openPicklistDetails = function (picklistId) {
        // reset wrong scanned picklist message
        self.wrongPicklistMessage = ko.observable("");
        self.successMessage(false);
        self.errorMessage(null);
        if (typeof picklistId === "object") {
            if (self.globalPickingType() == "regular") {
                picklistId = self.selectedPicklist().PicklistId;
            } else {
                picklistId = self.selectedPicklist().PickToCartGroupId;
            }
        }

        console.log("PICKLIST ID:" + picklistId);
        console.log("PICKLIST: ");
        console.log(self.selectedPicklist());
        console.log("----------------");

        self.page("pickenPicklistDetails");

        if (self.usePredefinedCarriers() == "true") {
            setTimeout(function () {
                $("#cartIdInput").focus();
            }, 250);
        }

        self.selectedPicklist(null);
        self.getScanningPicklistDetails(picklistId);
    };

    /**
     * Get the picklist details from service
     * @param picklistId
     */
    self.getScanningPicklistDetails = function (picklistId) {
        self.showLoader(true);

        var json_url =
            WS_ROOT +
            WS.GET_SCANNING_PICKLIST_DETAILS +
            "?Picklist=" +
            picklistId +
            "&ConcernCode=" +
            self.ConcernCode +
            "&CompanyCode=" +
            self.CompanyCode;

        if (self.globalPickingType() == "pickToCart") {
            var section_code = "";
            console.log("PICK TO CART PICKLISTS: ");
            console.log(self.picklists());
            $.each(self.picklists(), function (key, current_picklist) {
                if (typeof current_picklist.PickToCartGroupId !== "undefined") {
                    if (current_picklist.PickToCartGroupId == picklistId) {
                        section_code = self.picklists()[key].SectionCode;
                    }
                } else {
                    if (current_picklist.PicklistId == picklistId) {
                        section_code = self.picklists()[key].SectionCode;
                    }
                }
            });

            var json_url =
                WS_ROOT +
                WS.GET_SCANNING_PICKLIST_DETAILS_PICKTOCART +
                "?PickToCartGroupId=" +
                picklistId +
                "&WarehouseCode=" +
                self.warehouseId() +
                "&SectionCode=" +
                section_code +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode;
            console.log(self.picklists());
        }

        $.getJSON(json_url, function (data) {
            if (
                (data &&
                    data.Scanning_Picklist &&
                    data.Scanning_Picklist.Picklist) ||
                (data &&
                    data.PickToCartPicklist &&
                    data.PickToCartPicklist.Scanning_Picklists)
            ) {

                var picklist = "";
                if (self.globalPickingType() == "pickToCart") {
                    let skipScreenConfirmQuantityP2c = data.PickToCartPicklist.Scanning_Picklists.Scanning_Picklist[0].SkipScreenConfirmQuantityInP2COnScanner
                    self.skipScreenConfirmQuantity(skipScreenConfirmQuantityP2c)

                    $.each(self.picklists(), function (key, current_picklist) {
                        if (
                            typeof current_picklist.PickToCartGroupId !==
                            "undefined"
                        ) {
                            if (
                                current_picklist.PickToCartGroupId == picklistId
                            ) {
                                picklist = self.picklists()[key];
                            }
                        } else {
                            if (current_picklist.PicklistId == picklistId) {
                                picklist = self.picklists()[key];
                                picklist.PickToCartGroupId =
                                    self.picklists()[key].PicklistId;
                            }
                        }
                    });

                    picklist.PicklistLines =
                        data.PickToCartPicklist.PicklistLines;
                    picklist.combinedPicklists =
                        data.PickToCartPicklist.Scanning_Picklists.Scanning_Picklist;
                    picklist.NoOfLines =
                        picklist.PicklistLines.PicklistLine.length;
                    picklist.UsePicklistPalletType = "false";
                    picklist.DefaultPallet = "";
                    picklist.Instructions = "";
                    picklist.MaxPalletHeight = 0;
                    picklist.DisplayNumberOfEmptyBoxes = "false";
                    picklist.EmptyBoxes = "";
                    picklist.PicklistId =
                        picklist.PicklistLines.PicklistLine[0].PicklistId;
                    picklist.PicklistIdToSend =
                        picklist.PicklistLines.PicklistLine[0].PicklistId;
                    picklist.UsePredefinedCarriers =
                        data.PickToCartPicklist.Scanning_Picklists.Scanning_Picklist[0].UsePredefinedCarriers;
                    self.usePredefinedCarriers(
                        data.PickToCartPicklist.Scanning_Picklists
                            .Scanning_Picklist[0].UsePredefinedCarriers
                    );
                } else {
                    picklist = data.Scanning_Picklist.Picklist;
                    picklist.UsePredefinedCarriers = "false";
                    self.usePredefinedCarriers("false");
                }
                console.log(picklist);

                if (self.globalPickingType() == "regular") {
                    self.picklistEndLocation(
                        data.Scanning_Picklist.Picklist.EndLocation
                    );
                } else {
                    self.picklistEndLocation(picklist.EndLocation);
                }
                //based on the AlreadyStarted value (Date value or nil) set Started. This is used when displaying the picklist details.

                if (typeof picklist.AlreadyStarted === "string") {
                    picklist.Started = "JA";
                } else {
                    picklist.Started = "NEE";
                }

                self.movePickingType("");
                self.moveDuringPicking(false);

                if (self.globalPickingType() == "regular") {
                    if (
                        picklist.Picklisttype == 2 ||
                        picklist.Picklisttype == 4
                    ) {
                        if (
                            picklist.MovePalletsDuringInternalPicking == "true"
                        ) {
                            self.movePickingType("Internal");
                            self.moveDuringPicking(true);
                        }
                    } else {
                        if (picklist.MovePalletsDuringPickin == "true") {
                            self.moveDuringPicking(true);
                        }
                    }
                }

                picklist.Transport =
                    picklist.TransportNr +
                    "-" +
                    picklist.TransporShipmentNumber;
                picklist.WeightDisplayed = picklist.Weight + " kg";
                picklist.Date = "-";
                if (
                    picklist.Deadline &&
                    picklist.Deadline.split("T").length > 0 &&
                    picklist.Deadline.split("T")[1].split(":").length > 0
                ) {
                    //set the Date that is displayed like:
                    picklist.Date =
                        picklist.Deadline.split("T")[0] +
                        " " +
                        picklist.Deadline.split("T")[1].split(":")[0] +
                        ":" +
                        picklist.Deadline.split("T")[1].split(":")[1];
                }
                if (
                    picklist.PicklistLines &&
                    picklist.PicklistLines.PicklistLine
                ) {
                    var quantityToPick = 0;
                    var quantityToPick2 = 0;
                    $.each(
                        picklist.PicklistLines.PicklistLine,
                        function (key, picklistLine) {
                            if (
                                picklistLine.IsVariableWeightProduct == "false"
                            ) {
                                picklistLine.QuantityToPick2 =
                                    ko.observable("");
                                picklistLine.QuantityPicked2 =
                                    ko.observable("");
                                picklistLine.QuantityPickedInitial2 = "";
                                picklistLine.UnitMeasurement2 = "";

                                if (picklistLine.IsContentOnlyYN == "true") {
                                    quantityToPick +=
                                        1 * picklistLine.QuantityToPickPEH;
                                }

                                //for each picklist line set, based on UserVEHorPEH, as observables the QuantityToPick, QuantityPicked and UnitMeasurement
                                if (
                                    picklistLine.UseVEHorPEH === "P" ||
                                    picklistLine.UseVEHorPEH === ""
                                ) {
                                    picklistLine.QuantityToPick = ko.observable(
                                        picklistLine.QuantityToPickPEH
                                    );
                                    picklistLine.QuantityPicked =
                                        picklist.DefaultPickedQuantity ===
                                        "true"
                                            ? ko.observable(
                                                  parseFloat(
                                                      picklistLine.QuantityToPickPEH
                                                  ) -
                                                      parseFloat(
                                                          picklistLine.QuantityPickedPEH
                                                      )
                                              )
                                            : ko.observable(0);
                                    picklistLine.QuantityPickedInitial =
                                        picklistLine.QuantityPickedPEH;
                                    picklistLine.UnitMeasurement =
                                        picklistLine.UnitMeasurementPEH;
                                } else {
                                    picklistLine.QuantityToPick = ko.observable(
                                        picklistLine.QuantityToPickVEH
                                    );
                                    picklistLine.QuantityPicked =
                                        picklist.DefaultPickedQuantity ===
                                        "true"
                                            ? ko.observable(
                                                  parseFloat(
                                                      picklistLine.QuantityToPickVEH
                                                  ) -
                                                      parseFloat(
                                                          picklistLine.QuantityPickedVEH
                                                      )
                                              )
                                            : ko.observable(0);
                                    picklistLine.QuantityPickedInitial =
                                        picklistLine.QuantityPickedVEH;
                                    picklistLine.UnitMeasurement =
                                        picklistLine.UnitMeasurementVEH;
                                }
                            }
                            // IF IsVariableWeightProduct is true, show both PEH and VEH
                            else {
                                if (picklistLine.IsContentOnlyYN == "true") {
                                    quantityToPick +=
                                        1 * picklistLine.QuantityToPickPEH;
                                }

                                picklistLine.QuantityToPick = ko.observable(
                                    picklistLine.QuantityToPickPEH
                                );
                                picklistLine.QuantityPicked =
                                    picklist.DefaultPickedQuantity === "true"
                                        ? ko.observable(
                                              parseFloat(
                                                  picklistLine.QuantityToPickPEH
                                              ) -
                                                  parseFloat(
                                                      picklistLine.QuantityPickedPEH
                                                  )
                                          )
                                        : ko.observable(0);
                                picklistLine.QuantityPickedInitial =
                                    picklistLine.QuantityPickedPEH;
                                picklistLine.UnitMeasurement =
                                    picklistLine.UnitMeasurementPEH;

                                if (picklistLine.IsContentOnlyYN == "true") {
                                    quantityToPick2 +=
                                        1 * picklistLine.QuantityToPickVEH;
                                }

                                picklistLine.QuantityToPick2 = ko.observable(
                                    picklistLine.QuantityToPickVEH
                                );
                                picklistLine.QuantityPicked2 =
                                    picklist.DefaultPickedQuantity === "true"
                                        ? ko.observable(
                                              parseFloat(
                                                  picklistLine.QuantityToPickVEH
                                              ) -
                                                  parseFloat(
                                                      picklistLine.QuantityPickedVEH
                                                  )
                                          )
                                        : ko.observable(0);
                                picklistLine.QuantityPickedInitial2 =
                                    picklistLine.QuantityPickedVEH;
                                picklistLine.UnitMeasurement2 =
                                    picklistLine.UnitMeasurementVEH;
                            }

                            if (picklistLine.QuantityPicked() % 1 != 0)
                                picklistLine.QuantityPicked(
                                    picklistLine.QuantityPicked().toFixed(2)
                                );

                            //set as observable FullyPicked and PalletFull.
                            picklistLine.FullyPickedObservable = ko.observable(
                                picklistLine.FullyPicked === "true"
                            );
                            picklistLine.PalletFullObservable =
                                ko.observable(false);
                            picklistLine.CheckBoxObservable =
                                ko.observable(false);
                            //set the date (BestBeforeDate) and format it
                            if (
                                picklistLine.BestBeforeDateApplicable === "true"
                            ) {
                                var initialDate = new Date(
                                        picklistLine.BestBeforeDate
                                    ),
                                    formattedDate = "";

                                if (initialDate.getFullYear() == 5555) {
                                    formattedDate = "-";
                                } else {
                                    formattedDate =
                                        ("0" + initialDate.getDate()).slice(
                                            -2
                                        ) +
                                        "-" +
                                        (
                                            "0" +
                                            (initialDate.getMonth() + 1)
                                        ).slice(-2) +
                                        "-" +
                                        initialDate.getFullYear();
                                }
                                picklistLine.BestBeforeDate = formattedDate;
                            }
                            //set the Instructions based on information from the picklist (WholePallet)
                            picklistLine.Instructions = "-";
                            /*if (picklist.Translation) {
              picklistLine.Instructions = picklistLine.WholePalet === 'true' ? picklist.Translation.WholePallet : picklist.Translation.Packing;
            }*/
                            if (picklistLine.NumberOfPackagesDescription) {
                                picklistLine.Instructions =
                                    picklistLine.NumberOfPackagesDescription;
                            }
                        }
                    );
                }
                console.log(
                    "QTY TO PICK: " +
                        quantityToPick +
                        " / ThresholdNumber: " +
                        picklist.ThresholdNumber
                );
                if (quantityToPick >= parseInt(picklist.ThresholdNumber)) {
                    picklist.PicklistLines.PicklistLine.sort(function (x, y) {
                        // true values first
                        return x.IsContentOnlyYN === y.IsContentOnlyYN
                            ? 0
                            : x.IsContentOnlyYN == "true"
                            ? -1
                            : 1;
                        //return (x.IsContentOnlyYN === y.IsContentOnlyYN)? (x.PicklistLineId > y.PicklistLineId ? 0 : 1) : x.IsContentOnlyYN == "true" ? -2 : -1;
                    });
                    console.log(picklist.PicklistLines.PicklistLine);
                }

                self.selectedPalletType({
                    Height: ko.observable(""),
                    Weight: ko.observable(""),
                    Name: ko.observable(""),
                    PalletType: null,
                });

                self.selectedPicklist(picklist);

                console.log("TRUE? " + self.selectedPicklist().DefaultPallet);

                if (self.selectedPicklist().UsePicklistPalletType === "true") {
                    $.each(self.allPalletTypes(), function (key, pallet) {
                        console.log("PALLET " + pallet.PalletType);
                        if (
                            pallet.PalletType ===
                            self.selectedPicklist().DefaultPallet
                        ) {
                            console.log("PALLET " + pallet.PalletType);
                            self.selectPalletType(pallet);
                        }
                    });
                }

                console.log("PALLET NAME: " + self.selectedPalletType().Name());

                console.log(self.selectedPicklist());
                self.nextPicklistToProcess("");
                if (
                    self.selectedPicklist().DisplayAndAssignNextPicklist ==
                    "true"
                ) {
                    $.each(self.picklists(), function (index, currentPicklist) {
                        if (
                            currentPicklist.PicklistId !=
                            self.selectedPicklist().PicklistId
                        ) {
                            self.nextPicklistToProcess(
                                currentPicklist.PicklistId
                            );
                            return false;
                        }
                    });
                    console.log(
                        "NEXT PICKLIST ID IS: " + self.nextPicklistToProcess()
                    );
                }
            }
        }).always(function () {
            self.showLoader(false);
        });
    };

    /**
     * Select the value when clicking on the QuantityPicked input.
     */
    self.selectValue = function (focusClass) {
        $(focusClass).select();
    };

    /**
     * Mark a picklist line as fully picked
     */
    self.markPicklistLineAsFullyPicked = function () {
        self.selectedPicklistLine().FullyPickedObservable(
            !self.selectedPicklistLine().FullyPickedObservable()
        );
    };

    /**
     * Mark a pallet as full
     */
    self.markPalletAsFull = function () {
        self.selectedPicklistLine().PalletFullObservable(
            !self.selectedPicklistLine().PalletFullObservable()
        );
    };

    /**
     * Update the picked amount
     */
    self.updatePickedAmount = function () {
        //only update if the line is marked as fully picked or/and the pallet if marked as full and the quantity if not 0
        //removed check that did not allow update if the quantity was 0 (requested)

        console.log(
            "CHECKBOX OBS 1: " +
                self.selectedPicklistLine().CheckBoxObservable()
        );

        if (
            !(
                self.selectedPicklistLine().FullyPickedObservable() ||
                self.selectedPicklistLine().PalletFullObservable() ||
                self.selectedPicklistLine().CheckBoxObservable()
            )
        ) {
            return;
        }

        console.log(
            "CHECKBOX OBS 2: " +
                self.selectedPicklistLine().CheckBoxObservable()
        );

        if (self.selectedPicklistLine().CheckBoxObservable() == true) {
            console.log(
                "CHECKBOX OBS 3: " +
                    self.selectedPicklistLine().CheckBoxObservable()
            );
            self.scanBox("");
            self.page("scanBox");
            setTimeout(function () {
                $("#pickingScanBox").focus().select();
            }, 100);
        } else {
            console.log(
                "CHECKBOX OBS 4: " +
                    self.selectedPicklistLine().CheckBoxObservable()
            );
            self.updatePickingQuantity();
        }
    };

    self.openPickenChooseType = function () {
        self.showLoader(true);

        self.picklistsPIECESMULTILINE(0);
        self.picklistsPIECES1LINE(0);
        self.picklistsP2C(0);
        self.picklistsMIXED(0);
        self.picklistsFULLPALLET(0);
        self.picklistsTOTAL(0);
        self.picklistsINTERNAL(0);

        var json_url =
            WS_ROOT +
            WS.GET_SCANNING_PICKLISTS +
            "?Warehouse=" +
            self.warehouseId() +
            "&User=" +
            self.loggedIn() +
            "&ConcernCode=" +
            self.ConcernCode +
            "&CompanyCode=" +
            self.CompanyCode;

        $.getJSON(json_url, function (data) {
            if (data && data.ScanningPicklist) {
                var picklists = data,
                    filteredPicklists = [],
                    filteredPicklistsAssigned = [],
                    filteredPicklistsFinal = [];

                if (picklists.ScanningPicklist) {
                    if (
                        picklists.ScanningPicklist
                            .ListOfAllowedSectionsForUser &&
                        picklists.ScanningPicklist.ListOfAllowedSectionsForUser
                            .AllowedSectionForUser
                    ) {
                        //go through all picklists
                        $.each(
                            picklists.ScanningPicklist
                                .ListOfAllowedSectionsForUser &&
                                picklists.ScanningPicklist
                                    .ListOfAllowedSectionsForUser
                                    .AllowedSectionForUser,
                            function (index, line) {
                                if (
                                    line.ListOfUnassignedPicklists &&
                                    line.ListOfUnassignedPicklists
                                        .UnassignedPicklist &&
                                    line.ListOfUnassignedPicklists
                                        .UnassignedPicklist.length > 0
                                ) {
                                    //go through picklists with assigned users
                                    $.each(
                                        line.ListOfUnassignedPicklists
                                            .UnassignedPicklist,
                                        function (i, picklistObj) {
                                            console.log(
                                                picklistObj.PicklistCompositionType
                                            );

                                            if (
                                                picklistObj.PicklistCompositionType ==
                                                "PIECESMULTILINE"
                                            ) {
                                                self.picklistsPIECESMULTILINE(
                                                    self.picklistsPIECESMULTILINE() +
                                                        1
                                                );
                                                self.picklistsTOTAL(
                                                    self.picklistsTOTAL() + 1
                                                );
                                            } else if (
                                                picklistObj.PicklistCompositionType ==
                                                "PIECES1LINE"
                                            ) {
                                                self.picklistsPIECES1LINE(
                                                    self.picklistsPIECES1LINE() +
                                                        1
                                                );
                                                self.picklistsTOTAL(
                                                    self.picklistsTOTAL() + 1
                                                );
                                            } else if (
                                                picklistObj.PicklistCompositionType ==
                                                "P2C"
                                            ) {
                                                self.picklistsP2C(
                                                    self.picklistsP2C() + 1
                                                );
                                            } else if (
                                                picklistObj.PicklistCompositionType ==
                                                "INTERNAL"
                                            ) {
                                                self.picklistsINTERNAL(
                                                    self.picklistsINTERNAL() + 1
                                                );
                                            } else if (
                                                picklistObj.PicklistCompositionType ==
                                                "MIXED"
                                            ) {
                                                self.picklistsMIXED(
                                                    self.picklistsMIXED() + 1
                                                );
                                                self.picklistsTOTAL(
                                                    self.picklistsTOTAL() + 1
                                                );
                                            } else if (
                                                picklistObj.PicklistCompositionType ==
                                                "FULLPALLET"
                                            ) {
                                                self.picklistsFULLPALLET(
                                                    self.picklistsFULLPALLET() +
                                                        1
                                                );
                                                self.picklistsTOTAL(
                                                    self.picklistsTOTAL() + 1
                                                );
                                            }
                                        }
                                    );
                                }
                                if (
                                    line.ListOfAssignedPicklists &&
                                    line.ListOfAssignedPicklists
                                        .AssignedPicklist &&
                                    line.ListOfAssignedPicklists
                                        .AssignedPicklist.length > 0
                                ) {
                                    //go through picklists with empty user
                                    $.each(
                                        line.ListOfAssignedPicklists
                                            .AssignedPicklist,
                                        function (i, picklistObj) {
                                            console.log(
                                                picklistObj.PicklistCompositionType
                                            );

                                            if (
                                                picklistObj.PicklistCompositionType ==
                                                "PIECESMULTILINE"
                                            ) {
                                                self.picklistsPIECESMULTILINE(
                                                    self.picklistsPIECESMULTILINE() +
                                                        1
                                                );
                                                self.picklistsTOTAL(
                                                    self.picklistsTOTAL() + 1
                                                );
                                            } else if (
                                                picklistObj.PicklistCompositionType ==
                                                "PIECES1LINE"
                                            ) {
                                                self.picklistsPIECES1LINE(
                                                    self.picklistsPIECES1LINE() +
                                                        1
                                                );
                                                self.picklistsTOTAL(
                                                    self.picklistsTOTAL() + 1
                                                );
                                            } else if (
                                                picklistObj.PicklistCompositionType ==
                                                "P2C"
                                            ) {
                                                self.picklistsP2C(
                                                    self.picklistsP2C() + 1
                                                );
                                            } else if (
                                                picklistObj.PicklistCompositionType ==
                                                "INTERNAL"
                                            ) {
                                                self.picklistsINTERNAL(
                                                    self.picklistsINTERNAL() + 1
                                                );
                                            } else if (
                                                picklistObj.PicklistCompositionType ==
                                                "MIXED"
                                            ) {
                                                self.picklistsMIXED(
                                                    self.picklistsMIXED() + 1
                                                );
                                                self.picklistsTOTAL(
                                                    self.picklistsTOTAL() + 1
                                                );
                                            } else if (
                                                picklistObj.PicklistCompositionType ==
                                                "FULLPALLET"
                                            ) {
                                                self.picklistsFULLPALLET(
                                                    self.picklistsFULLPALLET() +
                                                        1
                                                );
                                                self.picklistsTOTAL(
                                                    self.picklistsTOTAL() + 1
                                                );
                                            }
                                        }
                                    );
                                }
                            }
                        );
                    }
                    self.page("menuPickingType");
                }
            }
        }).always(function () {
            self.showLoader(false);
        });
    };

    self.changeFilterMovement = function (selected_filter) {
        self.movementFiltersValue(selected_filter);
        self.movementFiltersArray.removeAll();
        self.openPalletMovement("pickReplenishment");

        //self.getNextPalletMoveRequest("4", selected_filter);
    };

    self.openPickingType = function (pickingType) {
        if (self.oldPickingType() != pickingType) {
            self.oldPickingType(pickingType);
            self.pickingFilterSection("");
            self.pickingFilterExpedition("");
            $(".radio_button_2").removeClass("radio_button_selected");
            $(".radio_button_3").removeClass("radio_button_selected");
        }

        self.currentPickingType(pickingType);
        if (pickingType != "P2C") {
            self.openPicken();
        } else {
            self.openPickenToCart();
        }
    };

    /**
     * Open the picklists list
     */
    self.openPicken = function () {
        self.globalPickingType("regular");
        self.successMessage(false);
        self.errorMessage(null);
        self.picklists([]);
        self.palletTypes([]);
        self.allPalletTypes([]);
        //download the picklists list
        self.getScanningPicklists("regular", true);
        //download the pallet types
        self.getPalletTypes();

        $(".sort_shown").hide();
        $(".filters_shown").hide();

        self.page("pickenPicklists");
    };

    /**
     * Open the pick to cart picklists
     */

    self.openPickenToCart = function () {
        self.globalPickingType("pickToCart");
        self.successMessage(false);
        self.errorMessage(null);
        self.picklists([]);
        self.getScanningPicklists("pickToCart", true);
        self.page("pickenPicklists");
    };

    /**
     * Open the screen where the user has to enter the pallet details: pallet type, height and weight
     */
    self.openNewPallet = function () {
        self.successMessage(false);
        self.errorMessage(null);
        //reset selected pallet & close dropdown if it's opened
        self.selectedPalletType({
            Height: ko.observable(""),
            Weight: ko.observable(""),
            Name: ko.observable(""),
            PalletType: null,
        });

        self.palletTypeWeightObservable("");

        if (self.showPalletDropdown()) {
            self.showPalletDropdown(false);
        }

        //if (self.selectedPicklist().DefaultPallet.length > 0) {
        if (self.selectedPicklist().UsePicklistPalletType === "true") {
            $.each(self.palletTypes(), function (key, pallet) {
                if (
                    pallet.PalletType === self.selectedPicklist().DefaultPallet
                ) {
                    self.selectPalletType(pallet);
                }
            });
        }

        self.page("newPallet");
    };

    /**
     * Show/Hide the Pallet type dropdown.
     */
    self.togglePalletDropdown = function () {
        self.showPalletDropdown(!self.showPalletDropdown());
    };

    /**
     * Set the pallet type as selected
     * @param pallet
     */
    self.selectPalletType = function (pallet) {
        self.showPalletDropdown(false);
        self.selectedPalletType().Height(pallet.DefaultHeight);
        self.selectedPalletType().Name(pallet.Name);
        self.selectedPalletType().PalletType = pallet.PalletType;

        if (
            !(
                self.selectedPalletType() &&
                self.selectedPalletType().Weight &&
                self.selectedPalletType().Weight() !== ""
            )
        ) {
            self.selectedPalletType().Weight = ko.observable("");
        }
    };

    /**
     * Send the selected pallet with its details filled to the server
     */
    //Supply pallet characteristics
    self.confirmAddNewPallet = function () {
        //if (self.palletTypeWeightObservable() !== '' || self.palletTypeWeightObservable() !== '') { //RFC: both Weight and Height are optional
        self.showLoader(true);
        console.log("SHOW LOADER CONFIRM ADD NEW PALLET");
        var guid = self.guid();
        if (self.globalPickingType() == "regular") {
            console.log("SELECTED PICKLIST: ");
            console.log(self.selectedPicklist());

            var jsonObj = {
                Scanning_GenericInterfaceClass: {
                    GUID: guid,
                    ActionType: 3,
                    Picklist: self.selectedPicklist().PicklistId,
                    UserId: self.username(),
                    PalletType: self.selectedPalletType().PalletType,
                    Weight: self.palletTypeWeightObservable() || "0",
                    Height: self.selectedPalletType().Height() || "0",
                    WarehouseID: self.warehouseId(),
                },
            };
        } else {
            $.each(
                self.selectedPicklist().combinedPicklists,
                function (index, currentPicklist) {
                    if (
                        currentPicklist.PicklistId ==
                        self.selectedPicklistLine().PicklistId
                    ) {
                        self.selectedPicklist().combinedPicklists[
                            index
                        ].OpenCarrierPresent = "false";
                    }
                }
            );

            self.pickingTUID("");
            self.currentTUID("");

            $.each(
                self.selectedPicklist().combinedPicklists,
                function (index, currentPicklist) {
                    if (
                        currentPicklist.PicklistId ==
                        self.selectedPicklistLine().PicklistId
                    ) {
                        currentPicklist.TUID = "";
                    }
                }
            );

            var jsonObj = {
                Scanning_GenericInterfaceClass: {
                    GUID: guid,
                    ActionType: 3,
                    Picklist: self.selectedPicklist().PicklistId,
                    UserId: self.username(),
                    PalletType: "",
                    Weight: "0",
                    Height: "0",
                    WarehouseID: self.warehouseId(),
                },
            };
        }

        jsonObj = JSON.stringify(jsonObj);
        self.showLoader(true);
        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.SCANNING_GENERIC_PUT +
                "?GUID=" +
                guid +
                "&UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                //self.showLoader(false);
                //after supplying the pallet characteristics, update the carrier flag to false
                self.selectedPicklist().OpenCarrierPresent = "false";
                // update the pallet full observable
                if (self.selectedPicklistLine()) {
                    self.selectedPicklistLine().PalletFullObservable(false);
                }

                //determine the next available line
                self.nextPickingLine(true);
                console.log(data);
                // IF MOVE DURING PICKING IS ALLOWED
                if (self.moveDuringPicking() == true) {
                    self.openPalletMovement(
                        "picking",
                        data.Scanning_GenericInterfaceClass.LSUId
                    );
                } else {
                    //on success decide the next step, open an available line or process the picklist
                    if (self.nextAvailablePicklistLineFound()) {
                        //if there is another picklist line to process select it and open the Picklist Line navigation
                        self.selectedPicklistLine(
                            self.selectedPicklist().PicklistLines.PicklistLine[
                                self.selectedPicklistLineIndex() - 1
                            ]
                        );
                        self.openPicklistLineNavigation();
                    } else {
                        //if there are no other picklist lines to process, process the picklist
                        self.openConfirmProcessPicklist();
                    }
                }
            })
            .error(function (xhr, status, error) {
                //if there's an error set the pickenErrorMessage observable with the message of the error. This will trigger the display of the error page, on top of the normal screen.
                if (xhr.responseText) {
                    self.showLoader(false);
                    var message = JSON.parse(xhr.responseText).message;
                    self.pickenErrorMessage(message);
                }
            })
            .always(function () {
                self.showLoader(false);
                console.log("HIDE LOADER CONFIRM ADD NEW PALLET");
            });
    };

    self.openConfirmProcessPicklist = function () {
        self.page("pickenProcessPicklist");
    };

    self.getGiftsAndSamplesPicklist = function () {
        self.showLoader(true);
        const section_code = self.selectedPicklist().SectionCode

        $.ajax({
            type: "GET",
            url:
                WS_ROOT +
                WS.GET_ScanningGiftsAndSamplesPicklist +
                "?PickToCartGroupId=" +
                self.selectedPicklist().PickToCartGroupId +
                "&WarehouseCode=" +
                self.warehouseId() +
                "&SectionCode=" +
                section_code +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (data) {

                function getGiftCategories(dataObj) {
                    if (dataObj.GiftCategoryPicklist) {
                        const categories = dataObj.GiftCategoryPicklist
                            .GiftCategoryLines.GiftCategoryPicklistLine;
                
                        const groupedCategories = categories.reduce((acc, curr) => {
                            const existingGroup = acc.find(group => group.GiftCategory === curr.GiftCategory);
                            if (existingGroup) {
                                const existingLocation = existingGroup.GiftCategoryLocation.find(location => location.Location === curr.GiftCategoryLocation);
                                if (existingLocation) {
                                    existingLocation.QuantityToPick += parseInt(curr.QuantityToPick);
                                } else {
                                    existingGroup.GiftCategoryLocation.push({ Location: curr.GiftCategoryLocation, QuantityToPick: parseInt(curr.QuantityToPick) });
                                }
                            } else {
                                acc.push({ GiftCategory: curr.GiftCategory, GiftCategoryLocation: [{ Location: curr.GiftCategoryLocation, QuantityToPick: parseInt(curr.QuantityToPick) }] });
                            }
                            return acc;
                        }, []);
                
                        groupedCategories.sort((a, b) => {
                            return compareLocations(a.GiftCategoryLocation[0].Location, b.GiftCategoryLocation[0].Location);
                        });
                
                        groupedCategories.forEach(group => {
                            group.GiftCategoryLocation.sort((a, b) => {
                                return compareLocations(a.Location, b.Location);
                            });
                        });

                        groupedCategories.sort((a, b) => {
                                return compareLocations(a.GiftCategory, b.GiftCategory);
                            });

                        return groupedCategories;
                    }
                    return [];
                }
                
                function compareLocations(locA, locB) {
                    const regex = /([^\d]+)|(\d+)/g;
                    const splitA = locA.match(regex);
                    const splitB = locB.match(regex);
                
                    while (splitA.length > 0 || splitB.length > 0) {
                        const a = splitA.shift() || "";
                        const b = splitB.shift() || "";
                
                        const isDigitA = !isNaN(a);
                        const isDigitB = !isNaN(b);
                
                        if (isDigitA && isDigitB) {
                            const diff = parseInt(a) - parseInt(b);
                            if (diff !== 0) {
                                return diff;
                            }
                        } else if (a !== b) {
                            return a.localeCompare(b);
                        }
                    }
                
                    return 0;
                }
                   
                function getGiftCards(dataObj) {   
                    if(dataObj.GiftCards){
                                      
                        let giftCardArray = dataObj.GiftCards.GiftCardPicklist

                        giftCardArray.sort((a, b) => {return compareLocations(a.GiftsCardPicklistLocation, b.GiftsCardPicklistLocation)});
                        return giftCardArray;
                    }
                    return [];
                }

                function getSamples(dataObj) {   
                    if(dataObj.SamplesPicklist && dataObj.SamplesPicklist.SamplesLines){
                        
                        let samplesArray = dataObj.SamplesPicklist.SamplesLines
                                        .SamplesPicklistLine

                          samplesArray.sort((a, b) => {return compareLocations(a.SamplesLocation, b.SamplesLocation)});
                        return samplesArray;
                    }
 
                    return [];
                }
            
                const dataObj = data.GiftsAndSamplesPicklist
                const giftCategories = getGiftCategories(dataObj);
                const samples = getSamples(dataObj);
                const giftCards = getGiftCards(dataObj);

                self.giftCategoriesPicklistLine(giftCategories);
                self.giftCardsPicklistLine(giftCards);
                self.samples(samples);

                self.changeGiftAndSamplesPage();
            },
            error: self.handleReplenishmentError,
        });
    }

    /**
     * Get the pallet types from the service
     */
    self.getPalletTypes = function () {
        $.getJSON(
            WS_ROOT +
                WS.GET_SCANNING_PALLET_TYPES +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            function (data) {
                if (data && data.ListOfPallets && data.ListOfPallets.Pallet) {
                    self.allPalletTypes(data.ListOfPallets.Pallet);
                    if (self.LOECodeOutbound() == 1)
                        self.palletTypes(data.ListOfPallets.Pallet);
                    else if (self.LOECodeOutbound() == 2) {
                        var filteredPallet = [];
                        $.each(
                            data.ListOfPallets.Pallet,
                            function (key, pallet) {
                                if (pallet.LSUOutboundType == "")
                                    filteredPallet.push(pallet);
                            }
                        );
                        self.palletTypes(filteredPallet);
                    } else {
                        var filteredPallet = [];
                        $.each(
                            data.ListOfPallets.Pallet,
                            function (key, pallet) {
                                if (pallet.LSUOutboundType == "D")
                                    filteredPallet.push(pallet);
                            }
                        );
                        self.palletTypes(filteredPallet);
                    }
                }
                console.log(self.palletTypes());
            }
        );
    };

    /**
     * Get the picklists list
     */
    self.getScanningPicklists = function (pickingType, updateFilters) {
        self.showLoader(true);
        var json_url =
            WS_ROOT +
            WS.GET_SCANNING_PICKLISTS +
            "?Warehouse=" +
            self.warehouseId() +
            "&User=" +
            self.loggedIn() +
            "&ConcernCode=" +
            self.ConcernCode +
            "&CompanyCode=" +
            self.CompanyCode;

        $.getJSON(json_url, function (data) {
            if (data && data.ScanningPicklist) {
                var picklists = data,
                    filteredPicklists = [],
                    filteredPicklistsAssigned = [],
                    filteredPicklistsFinal = [],
                    filterExpeditionCode = [],
                    filterSectionCode = [];

                if (picklists.ScanningPicklist) {
                    if (
                        picklists.ScanningPicklist
                            .ListOfAllowedSectionsForUser &&
                        picklists.ScanningPicklist.ListOfAllowedSectionsForUser
                            .AllowedSectionForUser
                    ) {
                        //go through all picklists
                        $.each(
                            picklists.ScanningPicklist
                                .ListOfAllowedSectionsForUser &&
                                picklists.ScanningPicklist
                                    .ListOfAllowedSectionsForUser
                                    .AllowedSectionForUser,
                            function (index, line) {
                                if (
                                    line.ListOfUnassignedPicklists &&
                                    line.ListOfUnassignedPicklists
                                        .UnassignedPicklist &&
                                    line.ListOfUnassignedPicklists
                                        .UnassignedPicklist.length > 0
                                ) {
                                    //go through picklists with assigned users
                                    $.each(
                                        line.ListOfUnassignedPicklists
                                            .UnassignedPicklist,
                                        function (i, picklistObj) {
                                            if (
                                                (self.currentPickingType() ==
                                                    "ALL" &&
                                                    picklistObj.PicklistCompositionType !=
                                                        "P2C" &&
                                                    picklistObj.PicklistCompositionType !=
                                                        "INTERNAL") ||
                                                self.currentPickingType() ==
                                                    picklistObj.PicklistCompositionType
                                            ) {
                                                var okToPush = true;
                                                if (
                                                    self.pickingFilterExpedition() !=
                                                        "" &&
                                                    self.pickingFilterExpedition() !=
                                                        picklistObj.ExpeditionCode
                                                ) {
                                                    okToPush = false;
                                                }

                                                if (
                                                    self.pickingFilterSection() !=
                                                        "" &&
                                                    self.pickingFilterSection() !=
                                                        picklistObj.SectionCode
                                                ) {
                                                    okToPush = false;
                                                }

                                                if (
                                                    self.pickingFilterCart() !=
                                                    ""
                                                ) {
                                                    if (
                                                        self.pickingFilterCart() ==
                                                            "Without cart" &&
                                                        picklistObj.CartId !=
                                                            "0"
                                                    ) {
                                                        okToPush = false;
                                                    }
                                                    if (
                                                        self.pickingFilterCart() ==
                                                            "With cart" &&
                                                        picklistObj.CartId ==
                                                            "0"
                                                    ) {
                                                        okToPush = false;
                                                    }
                                                }

                                                if (okToPush) {
                                                    filteredPicklists.push(
                                                        picklistObj
                                                    );
                                                }

                                                if (
                                                    filterExpeditionCode.indexOf(
                                                        picklistObj.ExpeditionCode
                                                    ) === -1
                                                ) {
                                                    filterExpeditionCode.push(
                                                        picklistObj.ExpeditionCode
                                                    );
                                                }

                                                if (
                                                    filterSectionCode.indexOf(
                                                        picklistObj.SectionCode
                                                    ) === -1
                                                ) {
                                                    filterSectionCode.push(
                                                        picklistObj.SectionCode
                                                    );
                                                }
                                            }
                                        }
                                    );
                                }
                                if (
                                    line.ListOfAssignedPicklists &&
                                    line.ListOfAssignedPicklists
                                        .AssignedPicklist &&
                                    line.ListOfAssignedPicklists
                                        .AssignedPicklist.length > 0
                                ) {
                                    //go through picklists with empty user
                                    $.each(
                                        line.ListOfAssignedPicklists
                                            .AssignedPicklist,
                                        function (i, picklistObj) {
                                            if (
                                                (self.currentPickingType() ==
                                                    "ALL" &&
                                                    picklistObj.PicklistCompositionType !=
                                                        "P2C" &&
                                                    picklistObj.PicklistCompositionType !=
                                                        "INTERNAL") ||
                                                self.currentPickingType() ==
                                                    picklistObj.PicklistCompositionType
                                            ) {
                                                var okToPush = true;
                                                if (
                                                    self.pickingFilterExpedition() !=
                                                        "" &&
                                                    self.pickingFilterExpedition() !=
                                                        picklistObj.ExpeditionCode
                                                ) {
                                                    okToPush = false;
                                                }

                                                if (
                                                    self.pickingFilterSection() !=
                                                        "" &&
                                                    self.pickingFilterSection() !=
                                                        picklistObj.SectionCode
                                                ) {
                                                    okToPush = false;
                                                }

                                                if (
                                                    self.pickingFilterCart() !=
                                                    ""
                                                ) {
                                                    if (
                                                        self.pickingFilterCart() ==
                                                            "Without cart" &&
                                                        picklistObj.CartId !=
                                                            "0"
                                                    ) {
                                                        okToPush = false;
                                                    }
                                                    if (
                                                        self.pickingFilterCart() ==
                                                            "With cart" &&
                                                        picklistObj.CartId ==
                                                            "0"
                                                    ) {
                                                        okToPush = false;
                                                    }
                                                }

                                                if (okToPush) {
                                                    filteredPicklistsAssigned.push(
                                                        picklistObj
                                                    );
                                                }

                                                if (
                                                    filterExpeditionCode.indexOf(
                                                        picklistObj.ExpeditionCode
                                                    ) === -1
                                                ) {
                                                    filterExpeditionCode.push(
                                                        picklistObj.ExpeditionCode
                                                    );
                                                }

                                                if (
                                                    filterSectionCode.indexOf(
                                                        picklistObj.SectionCode
                                                    ) === -1
                                                ) {
                                                    filterSectionCode.push(
                                                        picklistObj.SectionCode
                                                    );
                                                }
                                            }
                                        }
                                    );
                                }
                            }
                        );
                    }

                    //add properties to the picklists
                    filteredPicklists.map(function (picklist) {
                        //based on the AlreadyStarted value (Date value or nil) set Started. This is used when displaying the picklist details.
                        if (typeof picklist.AlreadyStarted === "string") {
                            picklist.Started = "JA";
                        } else {
                            picklist.Started = "NEE";
                        }

                        if (pickingType == "pickToCart") {
                            //picklist.PicklistId = picklist.PickToCartGroupId;
                            picklist.Customer = "";
                            picklist.Weight = "";
                        }

                        picklist.Transport =
                            picklist.TransportNr +
                            "-" +
                            picklist.TransporShipmentNumber;
                        picklist.WeightDisplayed = picklist.Weight + " kg";
                        //set the displayed date
                        picklist.Date = "-";
                        picklist.Date2 = "-";
                        picklist.dateObj = "";
                        picklist.dateObj2 = "";
                        if (
                            picklist.Deadline &&
                            picklist.Deadline.split("T").length > 0 &&
                            picklist.Deadline.split("T")[1].split(":").length >
                                0
                        ) {
                            picklist.Date =
                                picklist.Deadline.split("T")[0] +
                                " " +
                                picklist.Deadline.split("T")[1].split(":")[0] +
                                ":" +
                                picklist.Deadline.split("T")[1].split(":")[1];
                            picklist.dateObj = new Date(picklist.Deadline);
                        }

                        if (
                            picklist.PrintDateTime &&
                            picklist.PrintDateTime.split &&
                            picklist.PrintDateTime.split("T").length > 0 &&
                            picklist.PrintDateTime.split("T")[1].split(":")
                                .length > 0
                        ) {
                            picklist.Date2 =
                                picklist.PrintDateTime.split("T")[0] +
                                " " +
                                picklist.PrintDateTime.split("T")[1].split(
                                    ":"
                                )[0] +
                                ":" +
                                picklist.PrintDateTime.split("T")[1].split(
                                    ":"
                                )[1];
                            picklist.dateObj2 = new Date(
                                picklist.PrintDateTime
                            );
                        }

                        return picklist;
                    });

                    filteredPicklistsAssigned.map(function (picklist) {
                        //based on the AlreadyStarted value (Date value or nil) set Started. This is used when displaying the picklist details.
                        if (typeof picklist.AlreadyStarted === "string") {
                            picklist.Started = "JA";
                        } else {
                            picklist.Started = "NEE";
                        }

                        if (pickingType == "pickToCart") {
                            //picklist.PicklistId = picklist.PickToCartGroupId;
                            picklist.Customer = "";
                            picklist.Weight = "";
                        }

                        picklist.Transport =
                            picklist.TransportNr +
                            "-" +
                            picklist.TransporShipmentNumber;
                        picklist.WeightDisplayed = picklist.Weight + " kg";
                        //set the displayed date
                        picklist.Date = "-";
                        picklist.Date2 = "-";
                        picklist.dateObj = "";
                        picklist.dateObj2 = "";
                        if (
                            picklist.Deadline &&
                            picklist.Deadline.split("T").length > 0 &&
                            picklist.Deadline.split("T")[1].split(":").length >
                                0
                        ) {
                            picklist.Date =
                                picklist.Deadline.split("T")[0] +
                                " " +
                                picklist.Deadline.split("T")[1].split(":")[0] +
                                ":" +
                                picklist.Deadline.split("T")[1].split(":")[1];
                            picklist.dateObj = new Date(picklist.Deadline);
                        }

                        if (
                            picklist.PrintDateTime &&
                            picklist.PrintDateTime.split &&
                            picklist.PrintDateTime.split("T").length > 0 &&
                            picklist.PrintDateTime.split("T")[1].split(":")
                                .length > 0
                        ) {
                            picklist.Date2 =
                                picklist.PrintDateTime.split("T")[0] +
                                " " +
                                picklist.PrintDateTime.split("T")[1].split(
                                    ":"
                                )[0] +
                                ":" +
                                picklist.PrintDateTime.split("T")[1].split(
                                    ":"
                                )[1];
                            picklist.dateObj2 = new Date(
                                picklist.PrintDateTime
                            );
                        }

                        return picklist;
                    });

                    if (self.pickingSortType() == "asc") {
                        if (self.pickingSortElement() == "deadline") {
                            filteredPicklistsAssigned.sort(function (a, b) {
                                c = new Date(a.dateObj);
                                d = new Date(b.dateObj);

                                a2 = new Date(a.dateObj2);
                                b2 = new Date(b.dateObj2);

                                return c - d || a2 - b2;
                            });

                            filteredPicklists.sort(function (a, b) {
                                c = new Date(a.dateObj);
                                d = new Date(b.dateObj);

                                a2 = new Date(a.dateObj2);
                                b2 = new Date(b.dateObj2);

                                return c - d || a2 - b2;
                            });
                        } else if (
                            self.pickingSortElement() == "expeditioncode"
                        ) {
                            filteredPicklistsAssigned.sort(function (a, b) {
                                if (a.ExpeditionCode < b.ExpeditionCode) {
                                    return -1;
                                }
                                if (a.ExpeditionCode > b.ExpeditionCode) {
                                    return 1;
                                }
                                return 0;
                            });

                            filteredPicklists.sort(function (a, b) {
                                if (a.ExpeditionCode < b.ExpeditionCode) {
                                    return -1;
                                }
                                if (a.ExpeditionCode > b.ExpeditionCode) {
                                    return 1;
                                }
                                return 0;
                            });
                        } else if (self.pickingSortElement() == "sectioncode") {
                            filteredPicklistsAssigned.sort(function (a, b) {
                                if (a.SectionCode < b.SectionCode) {
                                    return -1;
                                }
                                if (a.SectionCode > b.SectionCode) {
                                    return 1;
                                }
                                return 0;
                            });

                            filteredPicklists.sort(function (a, b) {
                                if (a.SectionCode < b.SectionCode) {
                                    return -1;
                                }
                                if (a.SectionCode > b.SectionCode) {
                                    return 1;
                                }
                                return 0;
                            });
                        } else if (self.pickingSortElement() == "streetcode") {
                            filteredPicklistsAssigned.sort(function (a, b) {
                                if (a.FirstPickLocation < b.FirstPickLocation) {
                                    return -1;
                                }
                                if (a.FirstPickLocation > b.FirstPickLocation) {
                                    return 1;
                                }
                                return 0;
                            });

                            filteredPicklists.sort(function (a, b) {
                                if (a.SectionCode < b.SectionCode) {
                                    return -1;
                                }
                                if (a.SectionCode > b.SectionCode) {
                                    return 1;
                                }
                                return 0;
                            });
                        }
                    } else {
                        if (self.pickingSortElement() == "deadline") {
                            filteredPicklistsAssigned.sort(function (a, b) {
                                c = new Date(a.dateObj);
                                d = new Date(b.dateObj);

                                a2 = new Date(a.dateObj2);
                                b2 = new Date(b.dateObj2);

                                return d - c || b2 - a2;
                            });
                            filteredPicklists.sort(function (a, b) {
                                c = new Date(a.dateObj);
                                d = new Date(b.dateObj);

                                a2 = new Date(a.dateObj2);
                                b2 = new Date(b.dateObj2);

                                return d - c || b2 - a2;
                            });
                        } else if (
                            self.pickingSortElement() == "expeditioncode"
                        ) {
                            filteredPicklistsAssigned.sort(function (a, b) {
                                if (a.ExpeditionCode < b.ExpeditionCode) {
                                    return 1;
                                }
                                if (a.ExpeditionCode > b.ExpeditionCode) {
                                    return -1;
                                }
                                return 0;
                            });

                            filteredPicklists.sort(function (a, b) {
                                if (a.ExpeditionCode < b.ExpeditionCode) {
                                    return 1;
                                }
                                if (a.ExpeditionCode > b.ExpeditionCode) {
                                    return -1;
                                }
                                return 0;
                            });
                        } else if (self.pickingSortElement() == "sectioncode") {
                            filteredPicklistsAssigned.sort(function (a, b) {
                                if (a.SectionCode < b.SectionCode) {
                                    return 1;
                                }
                                if (a.SectionCode > b.SectionCode) {
                                    return -1;
                                }
                                return 0;
                            });

                            filteredPicklists.sort(function (a, b) {
                                if (a.SectionCode < b.SectionCode) {
                                    return 1;
                                }
                                if (a.SectionCode > b.SectionCode) {
                                    return -1;
                                }
                                return 0;
                            });
                        } else if (self.pickingSortElement() == "streetcode") {
                            filteredPicklistsAssigned.sort(function (a, b) {
                                if (a.FirstPickLocation < b.FirstPickLocation) {
                                    return 1;
                                }
                                if (a.FirstPickLocation > b.FirstPickLocation) {
                                    return -1;
                                }
                                return 0;
                            });

                            filteredPicklists.sort(function (a, b) {
                                if (a.FirstPickLocation < b.FirstPickLocation) {
                                    return 1;
                                }
                                if (a.FirstPickLocation > b.FirstPickLocation) {
                                    return -1;
                                }
                                return 0;
                            });
                        }
                    }

                    filteredPicklistsFinal =
                        filteredPicklistsAssigned.concat(filteredPicklists);

                    //assign the filtered picklists to the observable array, this will be used to display the picklists in html
                    self.picklists(filteredPicklistsFinal);
                    if (updateFilters == true) {
                        self.pickingFilterExpeditionArray(filterExpeditionCode);
                        self.pickingFilterSectionArray(filterSectionCode);
                    }
                    //console.log("FILTER EXPEDITION CODE:");
                    //console.log(self.pickingFilterExpeditionArray());
                    //console.log("FILTER SECTION CODE:");
                    //console.log(self.pickingFilterSectionArray());
                }
            }
        }).always(function () {
            self.showLoader(false);
        });
    };

    /**
     * Clear the picklist error message. This also hides the Error Message popup.
     */
    self.clearPickenErrorMessage = function () {
        self.pickenErrorMessage("");
    };

    self.changeExpeditionFilter = function () {
        console.log(self.pickingFilterExpedition());
    };

    self.changeSectionFilter = function () {
        console.log(self.pickingFilterSection());
    };

    self.emptyFilterExpedition = function () {
        self.pickingFilterExpedition("");
        self.getScanningPicklists(self.globalPickingType(), false);
    };

    self.emptyFilterSection = function () {
        self.pickingFilterSection("");
        self.getScanningPicklists(self.globalPickingType(), false);
    };

    self.emptyFilterCart = function () {
        self.pickingFilterCart("");
        self.getScanningPicklists(self.globalPickingType(), false);
    };

    self.changeFilterExpedition = function (selected_filter) {
        self.pickingFilterExpedition(selected_filter);
        self.getScanningPicklists(self.globalPickingType(), false);
    };

    self.changeFilterSection = function (selected_filter) {
        self.pickingFilterSection(selected_filter);
        self.getScanningPicklists(self.globalPickingType(), false);
    };

    self.changeFilterCart = function (selected_filter) {
        self.pickingFilterCart(selected_filter);
        self.getScanningPicklists(self.globalPickingType(), false);
    };

    self.changeSortType = function (direction, sort_element) {
        self.pickingSortType(direction);
        self.pickingSortElement(sort_element);
        console.log(self.pickingSortType() + " / " + self.pickingSortElement());
        var sortedPicklistsAssigned = [];
        var sortedPicklistsUnassigned = [];
        var sortedPicklistsFinal = [];
        //console.log(self.picklists());

        $.each(self.picklists(), function (key, current_picklist) {
            if (current_picklist.User != "") {
                sortedPicklistsAssigned.push(current_picklist);
            } else {
                sortedPicklistsUnassigned.push(current_picklist);
            }
        });

        if (direction == "asc") {
            if (sort_element == "deadline") {
                sortedPicklistsAssigned.sort(function (a, b) {
                    c = new Date(a.dateObj);
                    d = new Date(b.dateObj);

                    a2 = new Date(a.dateObj2);
                    b2 = new Date(b.dateObj2);

                    return c - d || a2 - b2;
                });

                sortedPicklistsUnassigned.sort(function (a, b) {
                    c = new Date(a.dateObj);
                    d = new Date(b.dateObj);

                    a2 = new Date(a.dateObj2);
                    b2 = new Date(b.dateObj2);

                    return c - d || a2 - b2;
                });
            } else if (sort_element == "expeditioncode") {
                sortedPicklistsAssigned.sort(function (a, b) {
                    if (a.ExpeditionCode < b.ExpeditionCode) {
                        return -1;
                    }
                    if (a.ExpeditionCode > b.ExpeditionCode) {
                        return 1;
                    }
                    return 0;
                });

                sortedPicklistsUnassigned.sort(function (a, b) {
                    if (a.ExpeditionCode < b.ExpeditionCode) {
                        return -1;
                    }
                    if (a.ExpeditionCode > b.ExpeditionCode) {
                        return 1;
                    }
                    return 0;
                });
            } else if (sort_element == "sectioncode") {
                sortedPicklistsAssigned.sort(function (a, b) {
                    if (a.SectionCode < b.SectionCode) {
                        return -1;
                    }
                    if (a.SectionCode > b.SectionCode) {
                        return 1;
                    }
                    return 0;
                });

                sortedPicklistsUnassigned.sort(function (a, b) {
                    if (a.SectionCode < b.SectionCode) {
                        return -1;
                    }
                    if (a.SectionCode > b.SectionCode) {
                        return 1;
                    }
                    return 0;
                });
            } else if (sort_element == "streetcode") {
                sortedPicklistsAssigned.sort(function (a, b) {
                    if (a.FirstPickLocation < b.FirstPickLocation) {
                        return -1;
                    }
                    if (a.FirstPickLocation > b.FirstPickLocation) {
                        return 1;
                    }
                    return 0;
                });

                sortedPicklistsUnassigned.sort(function (a, b) {
                    if (a.SectionCode < b.SectionCode) {
                        return -1;
                    }
                    if (a.SectionCode > b.SectionCode) {
                        return 1;
                    }
                    return 0;
                });
            } else if (sort_element == "cartidentification") {
                sortedPicklistsAssigned.sort(function (a, b) {
                    if (a.CartId < b.CartId) {
                        return -1;
                    }
                    if (a.CartId > b.CartId) {
                        return 1;
                    }
                    return 0;
                });

                sortedPicklistsUnassigned.sort(function (a, b) {
                    if (a.CartId < b.CartId) {
                        return -1;
                    }
                    if (a.CartId > b.CartId) {
                        return 1;
                    }
                    return 0;
                });
            }
        } else {
            if (sort_element == "deadline") {
                sortedPicklistsAssigned.sort(function (a, b) {
                    c = new Date(a.dateObj);
                    d = new Date(b.dateObj);

                    a2 = new Date(a.dateObj2);
                    b2 = new Date(b.dateObj2);

                    return d - c || b2 - a2;
                });
                sortedPicklistsUnassigned.sort(function (a, b) {
                    c = new Date(a.dateObj);
                    d = new Date(b.dateObj);

                    a2 = new Date(a.dateObj2);
                    b2 = new Date(b.dateObj2);

                    return d - c || b2 - a2;
                });
            } else if (sort_element == "expeditioncode") {
                sortedPicklistsAssigned.sort(function (a, b) {
                    if (a.ExpeditionCode < b.ExpeditionCode) {
                        return 1;
                    }
                    if (a.ExpeditionCode > b.ExpeditionCode) {
                        return -1;
                    }
                    return 0;
                });

                sortedPicklistsUnassigned.sort(function (a, b) {
                    if (a.ExpeditionCode < b.ExpeditionCode) {
                        return 1;
                    }
                    if (a.ExpeditionCode > b.ExpeditionCode) {
                        return -1;
                    }
                    return 0;
                });
            } else if (sort_element == "sectioncode") {
                sortedPicklistsAssigned.sort(function (a, b) {
                    if (a.SectionCode < b.SectionCode) {
                        return 1;
                    }
                    if (a.SectionCode > b.SectionCode) {
                        return -1;
                    }
                    return 0;
                });

                sortedPicklistsUnassigned.sort(function (a, b) {
                    if (a.SectionCode < b.SectionCode) {
                        return 1;
                    }
                    if (a.SectionCode > b.SectionCode) {
                        return -1;
                    }
                    return 0;
                });
            } else if (sort_element == "streetcode") {
                sortedPicklistsAssigned.sort(function (a, b) {
                    if (a.FirstPickLocation < b.FirstPickLocation) {
                        return 1;
                    }
                    if (a.FirstPickLocation > b.FirstPickLocation) {
                        return -1;
                    }
                    return 0;
                });

                sortedPicklistsUnassigned.sort(function (a, b) {
                    if (a.FirstPickLocation < b.FirstPickLocation) {
                        return 1;
                    }
                    if (a.FirstPickLocation > b.FirstPickLocation) {
                        return -1;
                    }
                    return 0;
                });
            } else if (sort_element == "cartidentification") {
                sortedPicklistsAssigned.sort(function (a, b) {
                    if (a.CartId < b.CartId) {
                        return 1;
                    }
                    if (a.CartId > b.CartId) {
                        return -1;
                    }
                    return 0;
                });

                sortedPicklistsUnassigned.sort(function (a, b) {
                    if (a.CartId < b.CartId) {
                        return 1;
                    }
                    if (a.CartId > b.CartId) {
                        return -1;
                    }
                    return 0;
                });
            }
        }

        sortedPicklistsFinal = sortedPicklistsAssigned.concat(
            sortedPicklistsUnassigned
        );

        self.picklists(sortedPicklistsFinal);

        console.log(self.picklists());
    };

    self.goToNextPicklist = function () {
        self.showLoader(true);

        if (self.globalPickingType() == "regular") {
            var jsonObj = {
                Scanning_GenericInterfaceClass: {
                    GUID: self.guid(),
                    ActionType: 4,
                    Picklist: self.selectedPicklist().PicklistId,
                    UserId: self.username(),
                    WarehouseID: self.warehouseId(),
                },
            };
        } else {
            var jsonObj = {
                Scanning_GenericInterfaceClass: {
                    GUID: self.guid(),
                    ActionType: 4,
                    Picklist: self.selectedPicklist().PicklistIdToSend,
                    UserId: self.username(),
                    WarehouseID: self.warehouseId(),
                },
            };
        }

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.SCANNING_GENERIC_PUT +
                "?UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function () {
                //on success get picklists and select next one
                self.picklists([]);

                self.showLoader(true);
                
                if(self.globalPickingType() == "pickToCart") {
                    self.forNextPalet(true);
                    self.getGiftsAndSamplesPicklist();
                } else {
                    self.nextPicklistAfterGiftAndSamples();
                }
            })
            .error(function (xhr, status, error) {
                //if there's an error set the pickenErrorMessage observable with the message of the error. This will trigger the display of the error page, on top of the normal screen.
                if (xhr.responseText) {
                    self.showLoader(false);
                    var message = JSON.parse(xhr.responseText).message;
                    self.pickenErrorMessage(message);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.nextPicklistAfterGiftAndSamples = function () {
        
        var json_url =
                    WS_ROOT +
                    WS.GET_SCANNING_PICKLISTS +
                    "?Warehouse=" +
                    self.warehouseId() +
                    "&User=" +
                    self.loggedIn() +
                    "&ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode;

                $.getJSON(json_url, function (data) {
                    if (data && data.ScanningPicklist) {
                        var picklists = data,
                            filteredPicklists = [],
                            filteredPicklistsAssigned = [],
                            filteredPicklistsFinal = [];

                        if (picklists.ScanningPicklist) {
                            if (
                                picklists.ScanningPicklist
                                    .ListOfAllowedSectionsForUser &&
                                picklists.ScanningPicklist
                                    .ListOfAllowedSectionsForUser
                                    .AllowedSectionForUser
                            ) {
                                //go through all picklists
                                $.each(
                                    picklists.ScanningPicklist
                                        .ListOfAllowedSectionsForUser &&
                                        picklists.ScanningPicklist
                                            .ListOfAllowedSectionsForUser
                                            .AllowedSectionForUser,
                                    function (index, line) {
                                        if (
                                            line.ListOfUnassignedPicklists &&
                                            line.ListOfUnassignedPicklists
                                                .UnassignedPicklist &&
                                            line.ListOfUnassignedPicklists
                                                .UnassignedPicklist.length > 0
                                        ) {
                                            //go through picklists with assigned users
                                            $.each(
                                                line.ListOfUnassignedPicklists
                                                    .UnassignedPicklist,
                                                function (i, picklistObj) {
                                                    if (
                                                        (self.currentPickingType() ==
                                                            "ALL" &&
                                                            picklistObj.PicklistCompositionType !=
                                                                "P2C" &&
                                                            picklistObj.PicklistCompositionType !=
                                                                "INTERNAL") ||
                                                        self.currentPickingType() ==
                                                            picklistObj.PicklistCompositionType
                                                    ) {
                                                        var okToPush = true;
                                                        if (
                                                            self.pickingFilterExpedition() !=
                                                                "" &&
                                                            self.pickingFilterExpedition() !=
                                                                picklistObj.ExpeditionCode
                                                        ) {
                                                            okToPush = false;
                                                        }

                                                        if (
                                                            self.pickingFilterSection() !=
                                                                "" &&
                                                            self.pickingFilterSection() !=
                                                                picklistObj.SectionCode
                                                        ) {
                                                            okToPush = false;
                                                        }
                                                        if (okToPush) {
                                                            filteredPicklists.push(
                                                                picklistObj
                                                            );
                                                        }
                                                    }
                                                }
                                            );
                                        }
                                        if (
                                            line.ListOfAssignedPicklists &&
                                            line.ListOfAssignedPicklists
                                                .AssignedPicklist &&
                                            line.ListOfAssignedPicklists
                                                .AssignedPicklist.length > 0
                                        ) {
                                            //go through picklists with empty user
                                            $.each(
                                                line.ListOfAssignedPicklists
                                                    .AssignedPicklist,
                                                function (i, picklistObj) {
                                                    if (
                                                        (self.currentPickingType() ==
                                                            "ALL" &&
                                                            picklistObj.PicklistCompositionType !=
                                                                "P2C" &&
                                                            picklistObj.PicklistCompositionType !=
                                                                "INTERNAL") ||
                                                        self.currentPickingType() ==
                                                            picklistObj.PicklistCompositionType
                                                    ) {
                                                        var okToPush = true;
                                                        if (
                                                            self.pickingFilterExpedition() !=
                                                                "" &&
                                                            self.pickingFilterExpedition() !=
                                                                picklistObj.ExpeditionCode
                                                        ) {
                                                            okToPush = false;
                                                        }

                                                        if (
                                                            self.pickingFilterSection() !=
                                                                "" &&
                                                            self.pickingFilterSection() !=
                                                                picklistObj.SectionCode
                                                        ) {
                                                            okToPush = false;
                                                        }

                                                        if (okToPush) {
                                                            filteredPicklistsAssigned.push(
                                                                picklistObj
                                                            );
                                                        }
                                                    }
                                                }
                                            );
                                        }
                                    }
                                );
                            }

                            //add properties to the picklists
                            filteredPicklists.map(function (picklist) {
                                //based on the AlreadyStarted value (Date value or nil) set Started. This is used when displaying the picklist details.
                                if (
                                    typeof picklist.AlreadyStarted === "string"
                                ) {
                                    picklist.Started = "JA";
                                } else {
                                    picklist.Started = "NEE";
                                }

                                if (self.globalPickingType() == "pickToCart") {
                                    //picklist.PicklistId = picklist.PickToCartGroupId;
                                    picklist.Customer = "";
                                    picklist.Weight = "";
                                }

                                picklist.Transport =
                                    picklist.TransportNr +
                                    "-" +
                                    picklist.TransporShipmentNumber;
                                picklist.WeightDisplayed =
                                    picklist.Weight + " kg";
                                //set the displayed date
                                picklist.Date = "-";
                                picklist.Date2 = "-";
                                picklist.dateObj = "";
                                picklist.dateObj2 = "";
                                if (
                                    picklist.Deadline &&
                                    picklist.Deadline.split("T").length > 0 &&
                                    picklist.Deadline.split("T")[1].split(":")
                                        .length > 0
                                ) {
                                    picklist.Date =
                                        picklist.Deadline.split("T")[0] +
                                        " " +
                                        picklist.Deadline.split("T")[1].split(
                                            ":"
                                        )[0] +
                                        ":" +
                                        picklist.Deadline.split("T")[1].split(
                                            ":"
                                        )[1];
                                    picklist.dateObj = new Date(
                                        picklist.Deadline
                                    );
                                }

                                if (
                                    picklist.PrintDateTime &&
                                    picklist.PrintDateTime.split &&
                                    picklist.PrintDateTime.split("T").length >
                                        0 &&
                                    picklist.PrintDateTime.split("T")[1].split(
                                        ":"
                                    ).length > 0
                                ) {
                                    picklist.Date2 =
                                        picklist.PrintDateTime.split("T")[0] +
                                        " " +
                                        picklist.PrintDateTime.split(
                                            "T"
                                        )[1].split(":")[0] +
                                        ":" +
                                        picklist.PrintDateTime.split(
                                            "T"
                                        )[1].split(":")[1];
                                    picklist.dateObj2 = new Date(
                                        picklist.PrintDateTime
                                    );
                                }

                                return picklist;
                            });

                            filteredPicklistsAssigned.map(function (picklist) {
                                //based on the AlreadyStarted value (Date value or nil) set Started. This is used when displaying the picklist details.
                                if (
                                    typeof picklist.AlreadyStarted === "string"
                                ) {
                                    picklist.Started = "JA";
                                } else {
                                    picklist.Started = "NEE";
                                }

                                if (self.globalPickingType() == "pickToCart") {
                                    //picklist.PicklistId = picklist.PickToCartGroupId;
                                    picklist.Customer = "";
                                    picklist.Weight = "";
                                }
                                picklist.Transport =
                                    picklist.TransportNr +
                                    "-" +
                                    picklist.TransporShipmentNumber;
                                picklist.WeightDisplayed =
                                    picklist.Weight + " kg";
                                //set the displayed date
                                picklist.Date = "-";
                                picklist.Date2 = "-";
                                picklist.dateObj = "";
                                picklist.dateObj2 = "";
                                if (
                                    picklist.Deadline &&
                                    picklist.Deadline.split("T").length > 0 &&
                                    picklist.Deadline.split("T")[1].split(":")
                                        .length > 0
                                ) {
                                    picklist.Date =
                                        picklist.Deadline.split("T")[0] +
                                        " " +
                                        picklist.Deadline.split("T")[1].split(
                                            ":"
                                        )[0] +
                                        ":" +
                                        picklist.Deadline.split("T")[1].split(
                                            ":"
                                        )[1];
                                    picklist.dateObj = new Date(
                                        picklist.Deadline
                                    );
                                }

                                if (
                                    picklist.PrintDateTime &&
                                    picklist.PrintDateTime.split &&
                                    picklist.PrintDateTime.split("T").length >
                                        0 &&
                                    picklist.PrintDateTime.split("T")[1].split(
                                        ":"
                                    ).length > 0
                                ) {
                                    picklist.Date2 =
                                        picklist.PrintDateTime.split("T")[0] +
                                        " " +
                                        picklist.PrintDateTime.split(
                                            "T"
                                        )[1].split(":")[0] +
                                        ":" +
                                        picklist.PrintDateTime.split(
                                            "T"
                                        )[1].split(":")[1];
                                    picklist.dateObj2 = new Date(
                                        picklist.PrintDateTime
                                    );
                                }

                                return picklist;
                            });

                            if (self.pickingSortType() == "asc") {
                                if (self.pickingSortElement() == "deadline") {
                                    filteredPicklistsAssigned.sort(function (
                                        a,
                                        b
                                    ) {
                                        c = new Date(a.dateObj);
                                        d = new Date(b.dateObj);

                                        a2 = new Date(a.dateObj2);
                                        b2 = new Date(b.dateObj2);

                                        return c - d || a2 - b2;
                                    });

                                    filteredPicklists.sort(function (a, b) {
                                        c = new Date(a.dateObj);
                                        d = new Date(b.dateObj);

                                        a2 = new Date(a.dateObj2);
                                        b2 = new Date(b.dateObj2);

                                        return c - d || a2 - b2;
                                    });
                                } else if (
                                    self.pickingSortElement() ==
                                    "expeditioncode"
                                ) {
                                    filteredPicklistsAssigned.sort(function (
                                        a,
                                        b
                                    ) {
                                        if (
                                            a.ExpeditionCode < b.ExpeditionCode
                                        ) {
                                            return -1;
                                        }
                                        if (
                                            a.ExpeditionCode > b.ExpeditionCode
                                        ) {
                                            return 1;
                                        }
                                        return 0;
                                    });

                                    filteredPicklists.sort(function (a, b) {
                                        if (
                                            a.ExpeditionCode < b.ExpeditionCode
                                        ) {
                                            return -1;
                                        }
                                        if (
                                            a.ExpeditionCode > b.ExpeditionCode
                                        ) {
                                            return 1;
                                        }
                                        return 0;
                                    });
                                } else if (
                                    self.pickingSortElement() == "sectioncode"
                                ) {
                                    filteredPicklistsAssigned.sort(function (
                                        a,
                                        b
                                    ) {
                                        if (a.SectionCode < b.SectionCode) {
                                            return -1;
                                        }
                                        if (a.SectionCode > b.SectionCode) {
                                            return 1;
                                        }
                                        return 0;
                                    });

                                    filteredPicklists.sort(function (a, b) {
                                        if (a.SectionCode < b.SectionCode) {
                                            return -1;
                                        }
                                        if (a.SectionCode > b.SectionCode) {
                                            return 1;
                                        }
                                        return 0;
                                    });
                                } else if (
                                    self.pickingSortElement() == "streetcode"
                                ) {
                                    filteredPicklistsAssigned.sort(function (
                                        a,
                                        b
                                    ) {
                                        if (
                                            a.FirstPickLocation <
                                            b.FirstPickLocation
                                        ) {
                                            return -1;
                                        }
                                        if (
                                            a.FirstPickLocation >
                                            b.FirstPickLocation
                                        ) {
                                            return 1;
                                        }
                                        return 0;
                                    });

                                    filteredPicklists.sort(function (a, b) {
                                        if (a.SectionCode < b.SectionCode) {
                                            return -1;
                                        }
                                        if (a.SectionCode > b.SectionCode) {
                                            return 1;
                                        }
                                        return 0;
                                    });
                                }
                            } else {
                                if (self.pickingSortElement() == "deadline") {
                                    filteredPicklistsAssigned.sort(function (
                                        a,
                                        b
                                    ) {
                                        c = new Date(a.dateObj);
                                        d = new Date(b.dateObj);

                                        a2 = new Date(a.dateObj2);
                                        b2 = new Date(b.dateObj2);

                                        return d - c || b2 - a2;
                                    });
                                    filteredPicklists.sort(function (a, b) {
                                        c = new Date(a.dateObj);
                                        d = new Date(b.dateObj);

                                        a2 = new Date(a.dateObj2);
                                        b2 = new Date(b.dateObj2);

                                        return d - c || b2 - a2;
                                    });
                                } else if (
                                    self.pickingSortElement() ==
                                    "expeditioncode"
                                ) {
                                    filteredPicklistsAssigned.sort(function (
                                        a,
                                        b
                                    ) {
                                        if (
                                            a.ExpeditionCode < b.ExpeditionCode
                                        ) {
                                            return 1;
                                        }
                                        if (
                                            a.ExpeditionCode > b.ExpeditionCode
                                        ) {
                                            return -1;
                                        }
                                        return 0;
                                    });

                                    filteredPicklists.sort(function (a, b) {
                                        if (
                                            a.ExpeditionCode < b.ExpeditionCode
                                        ) {
                                            return 1;
                                        }
                                        if (
                                            a.ExpeditionCode > b.ExpeditionCode
                                        ) {
                                            return -1;
                                        }
                                        return 0;
                                    });
                                } else if (
                                    self.pickingSortElement() == "sectioncode"
                                ) {
                                    filteredPicklistsAssigned.sort(function (
                                        a,
                                        b
                                    ) {
                                        if (a.SectionCode < b.SectionCode) {
                                            return 1;
                                        }
                                        if (a.SectionCode > b.SectionCode) {
                                            return -1;
                                        }
                                        return 0;
                                    });

                                    filteredPicklists.sort(function (a, b) {
                                        if (a.SectionCode < b.SectionCode) {
                                            return 1;
                                        }
                                        if (a.SectionCode > b.SectionCode) {
                                            return -1;
                                        }
                                        return 0;
                                    });
                                } else if (
                                    self.pickingSortElement() == "streetcode"
                                ) {
                                    filteredPicklistsAssigned.sort(function (
                                        a,
                                        b
                                    ) {
                                        if (
                                            a.FirstPickLocation <
                                            b.FirstPickLocation
                                        ) {
                                            return 1;
                                        }
                                        if (
                                            a.FirstPickLocation >
                                            b.FirstPickLocation
                                        ) {
                                            return -1;
                                        }
                                        return 0;
                                    });

                                    filteredPicklists.sort(function (a, b) {
                                        if (
                                            a.FirstPickLocation <
                                            b.FirstPickLocation
                                        ) {
                                            return 1;
                                        }
                                        if (
                                            a.FirstPickLocation >
                                            b.FirstPickLocation
                                        ) {
                                            return -1;
                                        }
                                        return 0;
                                    });
                                }
                            }

                            filteredPicklistsFinal =
                                filteredPicklistsAssigned.concat(
                                    filteredPicklists
                                );

                            if (filteredPicklistsFinal.length == 0) {
                                self.openPickenChooseType();
                                return;
                            }

                            //assign the filtered picklists to the observable array, this will be used to display the picklists in html
                            self.picklists(filteredPicklistsFinal);
                            console.log("FIRST PICKLIST: ");
                            console.log(self.picklists()[0]);
                            if (self.globalPickingType() == "regular") {
                                var picklistId = self.picklists()[0].PicklistId;
                            } else {
                                var picklistId = self.picklists()[0].PicklistId;
                            }
                            console.log("NEXT PICKLIST ID: " + picklistId);
                            if (picklistId != "") {
                                console.log("NEXT PICKLIST ID: " + picklistId);
                                self.showLoader(true);

                                var json_url =
                                    WS_ROOT +
                                    WS.GET_SCANNING_PICKLIST_DETAILS +
                                    "?Picklist=" +
                                    picklistId +
                                    "&ConcernCode=" +
                                    self.ConcernCode +
                                    "&CompanyCode=" +
                                    self.CompanyCode;

                                if (self.globalPickingType() == "pickToCart") {
                                    var section_code = "";
                                    $.each(
                                        self.picklists(),
                                        function (key, current_picklist) {
                                            if (
                                                current_picklist.PicklistId ==
                                                picklistId
                                            ) {
                                                section_code =
                                                    self.picklists()[key]
                                                        .SectionCode;
                                            }
                                        }
                                    );

                                    var json_url =
                                        WS_ROOT +
                                        WS.GET_SCANNING_PICKLIST_DETAILS_PICKTOCART +
                                        "?PickToCartGroupId=" +
                                        picklistId +
                                        "&WarehouseCode=" +
                                        self.warehouseId() +
                                        "&SectionCode=" +
                                        section_code +
                                        "&ConcernCode=" +
                                        self.ConcernCode +
                                        "&CompanyCode=" +
                                        self.CompanyCode;
                                    console.log(self.picklists());
                                }

                                $.getJSON(json_url, function (data) {
                                    if (
                                        (data &&
                                            data.Scanning_Picklist &&
                                            data.Scanning_Picklist.Picklist) ||
                                        (data &&
                                            data.PickToCartPicklist &&
                                            data.PickToCartPicklist
                                                .Scanning_Picklists)
                                    ) {
                                        var picklist = "";
                                        if (
                                            self.globalPickingType() ==
                                            "pickToCart"
                                        ) {
                                            $.each(
                                                self.picklists(),
                                                function (
                                                    key,
                                                    current_picklist
                                                ) {
                                                    if (
                                                        current_picklist.PicklistId ==
                                                        picklistId
                                                    ) {
                                                        picklist =
                                                            self.picklists()[
                                                                key
                                                            ];
                                                        picklist.PickToCartGroupId =
                                                            self.picklists()[
                                                                key
                                                            ].PicklistId;
                                                    }
                                                }
                                            );
                                            picklist.MaxPalletHeight = 0;
                                            picklist.PicklistLines =
                                                data.PickToCartPicklist.PicklistLines;
                                            picklist.combinedPicklists =
                                                data.PickToCartPicklist.Scanning_Picklists.Scanning_Picklist;
                                            picklist.NoOfLines =
                                                picklist.PicklistLines.PicklistLine.length;
                                            picklist.UsePicklistPalletType =
                                                "false";
                                            picklist.DefaultPallet = "";
                                            picklist.Instructions = "";
                                            picklist.DisplayNumberOfEmptyBoxes =
                                                "false";
                                            picklist.EmptyBoxes = "";
                                            picklist.PicklistId =
                                                picklist.PicklistLines.PicklistLine[0].PicklistId;
                                            picklist.PicklistIdToSend =
                                                picklist.PicklistLines.PicklistLine[0].PicklistId;
                                            picklist.UsePredefinedCarriers =
                                                data.PickToCartPicklist.Scanning_Picklists.Scanning_Picklist[0].UsePredefinedCarriers;
                                            self.usePredefinedCarriers(
                                                data.PickToCartPicklist
                                                    .Scanning_Picklists
                                                    .Scanning_Picklist[0]
                                                    .UsePredefinedCarriers
                                            );
                                        } else {
                                            picklist =
                                                data.Scanning_Picklist.Picklist;
                                            picklist.UsePredefinedCarriers =
                                                "false";
                                            self.usePredefinedCarriers("false");
                                        }
                                        console.log(picklist);

                                        if (
                                            self.globalPickingType() ==
                                            "regular"
                                        ) {
                                            self.picklistEndLocation(
                                                data.Scanning_Picklist.Picklist
                                                    .EndLocation
                                            );
                                        } else {
                                            self.picklistEndLocation(
                                                picklist.EndLocation
                                            );
                                        }
                                        //based on the AlreadyStarted value (Date value or nil) set Started. This is used when displaying the picklist details.
                                        if (
                                            typeof picklist.AlreadyStarted ===
                                            "string"
                                        ) {
                                            picklist.Started = "JA";
                                        } else {
                                            picklist.Started = "NEE";
                                        }
                                        self.movePickingType("");
                                        self.moveDuringPicking(false);

                                        if (
                                            self.globalPickingType() ==
                                            "regular"
                                        ) {
                                            if (
                                                picklist.Picklisttype == 2 ||
                                                picklist.Picklisttype == 4
                                            ) {
                                                if (
                                                    picklist.MovePalletsDuringInternalPicking ==
                                                    "true"
                                                ) {
                                                    self.movePickingType(
                                                        "Internal"
                                                    );
                                                    self.moveDuringPicking(
                                                        true
                                                    );
                                                }
                                            } else {
                                                if (
                                                    picklist.MovePalletsDuringPickin ==
                                                    "true"
                                                ) {
                                                    self.moveDuringPicking(
                                                        true
                                                    );
                                                }
                                            }
                                        }
                                        picklist.Transport =
                                            picklist.TransportNr +
                                            "-" +
                                            picklist.TransporShipmentNumber;
                                        picklist.WeightDisplayed =
                                            picklist.Weight + " kg";
                                        picklist.Date = "-";
                                        if (
                                            picklist.Deadline &&
                                            picklist.Deadline.split("T")
                                                .length > 0 &&
                                            picklist.Deadline.split(
                                                "T"
                                            )[1].split(":").length > 0
                                        ) {
                                            //set the Date that is displayed like:
                                            picklist.Date =
                                                picklist.Deadline.split(
                                                    "T"
                                                )[0] +
                                                " " +
                                                picklist.Deadline.split(
                                                    "T"
                                                )[1].split(":")[0] +
                                                ":" +
                                                picklist.Deadline.split(
                                                    "T"
                                                )[1].split(":")[1];
                                        }

                                        if (
                                            picklist.PicklistLines &&
                                            picklist.PicklistLines.PicklistLine
                                        ) {
                                            var quantityToPick = 0;
                                            var quantityToPick2 = 0;
                                            $.each(
                                                picklist.PicklistLines
                                                    .PicklistLine,
                                                function (key, picklistLine) {
                                                    if (
                                                        picklistLine.IsVariableWeightProduct ==
                                                        "false"
                                                    ) {
                                                        picklistLine.QuantityToPick2 =
                                                            ko.observable("");
                                                        picklistLine.QuantityPicked2 =
                                                            ko.observable("");
                                                        picklistLine.QuantityPickedInitial2 =
                                                            "";
                                                        picklistLine.UnitMeasurement2 =
                                                            "";

                                                        if (
                                                            picklistLine.IsContentOnlyYN ==
                                                            "true"
                                                        ) {
                                                            quantityToPick +=
                                                                1 *
                                                                picklistLine.QuantityToPickPEH;
                                                        }

                                                        //for each picklist line set, based on UserVEHorPEH, as observables the QuantityToPick, QuantityPicked and UnitMeasurement
                                                        if (
                                                            picklistLine.UseVEHorPEH ===
                                                                "P" ||
                                                            picklistLine.UseVEHorPEH ===
                                                                ""
                                                        ) {
                                                            picklistLine.QuantityToPick =
                                                                ko.observable(
                                                                    picklistLine.QuantityToPickPEH
                                                                );
                                                            picklistLine.QuantityPicked =
                                                                picklist.DefaultPickedQuantity ===
                                                                "true"
                                                                    ? ko.observable(
                                                                          parseFloat(
                                                                              picklistLine.QuantityToPickPEH
                                                                          ) -
                                                                              parseFloat(
                                                                                  picklistLine.QuantityPickedPEH
                                                                              )
                                                                      )
                                                                    : ko.observable(
                                                                          0
                                                                      );
                                                            picklistLine.QuantityPickedInitial =
                                                                picklistLine.QuantityPickedPEH;
                                                            picklistLine.UnitMeasurement =
                                                                picklistLine.UnitMeasurementPEH;
                                                        } else {
                                                            picklistLine.QuantityToPick =
                                                                ko.observable(
                                                                    picklistLine.QuantityToPickVEH
                                                                );
                                                            picklistLine.QuantityPicked =
                                                                picklist.DefaultPickedQuantity ===
                                                                "true"
                                                                    ? ko.observable(
                                                                          parseFloat(
                                                                              picklistLine.QuantityToPickVEH
                                                                          ) -
                                                                              parseFloat(
                                                                                  picklistLine.QuantityPickedVEH
                                                                              )
                                                                      )
                                                                    : ko.observable(
                                                                          0
                                                                      );
                                                            picklistLine.QuantityPickedInitial =
                                                                picklistLine.QuantityPickedVEH;
                                                            picklistLine.UnitMeasurement =
                                                                picklistLine.UnitMeasurementVEH;
                                                        }
                                                    }
                                                    // IF IsVariableWeightProduct is true, show both PEH and VEH
                                                    else {
                                                        if (
                                                            picklistLine.IsContentOnlyYN ==
                                                            "true"
                                                        ) {
                                                            quantityToPick +=
                                                                1 *
                                                                picklistLine.QuantityToPickPEH;
                                                        }

                                                        picklistLine.QuantityToPick =
                                                            ko.observable(
                                                                picklistLine.QuantityToPickPEH
                                                            );
                                                        picklistLine.QuantityPicked =
                                                            picklist.DefaultPickedQuantity ===
                                                            "true"
                                                                ? ko.observable(
                                                                      parseFloat(
                                                                          picklistLine.QuantityToPickPEH
                                                                      ) -
                                                                          parseFloat(
                                                                              picklistLine.QuantityPickedPEH
                                                                          )
                                                                  )
                                                                : ko.observable(
                                                                      0
                                                                  );
                                                        picklistLine.QuantityPickedInitial =
                                                            picklistLine.QuantityPickedPEH;
                                                        picklistLine.UnitMeasurement =
                                                            picklistLine.UnitMeasurementPEH;

                                                        if (
                                                            picklistLine.IsContentOnlyYN ==
                                                            "true"
                                                        ) {
                                                            quantityToPick2 +=
                                                                1 *
                                                                picklistLine.QuantityToPickVEH;
                                                        }

                                                        picklistLine.QuantityToPick2 =
                                                            ko.observable(
                                                                picklistLine.QuantityToPickVEH
                                                            );
                                                        picklistLine.QuantityPicked2 =
                                                            picklist.DefaultPickedQuantity ===
                                                            "true"
                                                                ? ko.observable(
                                                                      parseFloat(
                                                                          picklistLine.QuantityToPickVEH
                                                                      ) -
                                                                          parseFloat(
                                                                              picklistLine.QuantityPickedVEH
                                                                          )
                                                                  )
                                                                : ko.observable(
                                                                      0
                                                                  );
                                                        picklistLine.QuantityPickedInitial2 =
                                                            picklistLine.QuantityPickedVEH;
                                                        picklistLine.UnitMeasurement2 =
                                                            picklistLine.UnitMeasurementVEH;
                                                    }

                                                    //set as observable FullyPicked and PalletFull.
                                                    picklistLine.FullyPickedObservable =
                                                        ko.observable(
                                                            picklistLine.FullyPicked ===
                                                                "true"
                                                        );
                                                    picklistLine.PalletFullObservable =
                                                        ko.observable(false);
                                                    picklistLine.CheckBoxObservable =
                                                        ko.observable(false);
                                                    //set the date (BestBeforeDate) and format it
                                                    if (
                                                        picklistLine.BestBeforeDateApplicable ===
                                                        "true"
                                                    ) {
                                                        var initialDate =
                                                                new Date(
                                                                    picklistLine.BestBeforeDate
                                                                ),
                                                            formattedDate = "";

                                                        if (
                                                            initialDate.getFullYear() ==
                                                            5555
                                                        ) {
                                                            formattedDate = "-";
                                                        } else {
                                                            formattedDate =
                                                                (
                                                                    "0" +
                                                                    initialDate.getDate()
                                                                ).slice(-2) +
                                                                "-" +
                                                                (
                                                                    "0" +
                                                                    (initialDate.getMonth() +
                                                                        1)
                                                                ).slice(-2) +
                                                                "-" +
                                                                initialDate.getFullYear();
                                                        }
                                                        picklistLine.BestBeforeDate =
                                                            formattedDate;
                                                    }
                                                    //set the Instructions based on information from the picklist (WholePallet)
                                                    picklistLine.Instructions =
                                                        "-";
                                                    /*if (picklist.Translation) {
                                      picklistLine.Instructions = picklistLine.WholePalet === 'true' ? picklist.Translation.WholePallet : picklist.Translation.Packing;
                                    }*/
                                                    if (
                                                        picklistLine.NumberOfPackagesDescription
                                                    ) {
                                                        picklistLine.Instructions =
                                                            picklistLine.NumberOfPackagesDescription;
                                                    }

                                                    if (
                                                        picklistLine.QuantityPicked() %
                                                            1 !=
                                                        0
                                                    )
                                                        picklistLine.QuantityPicked(
                                                            picklistLine
                                                                .QuantityPicked()
                                                                .toFixed(2)
                                                        );
                                                }
                                            );
                                        }

                                        console.log(
                                            "QTY TO PICK: " +
                                                quantityToPick +
                                                " / ThresholdNumber: " +
                                                picklist.ThresholdNumber
                                        );
                                        if (
                                            quantityToPick >=
                                            parseInt(picklist.ThresholdNumber)
                                        ) {
                                            picklist.PicklistLines.PicklistLine.sort(
                                                function (x, y) {
                                                    // true values first
                                                    //return (x.IsContentOnlyYN === y.IsContentOnlyYN)? 0 : x.IsContentOnlyYN == "true" ? -1 : 1;
                                                    return x.IsContentOnlyYN ===
                                                        y.IsContentOnlyYN
                                                        ? x.PicklistLineId >
                                                          y.PicklistLineId
                                                            ? 0
                                                            : 1
                                                        : x.IsContentOnlyYN ==
                                                          "true"
                                                        ? -2
                                                        : -1;
                                                }
                                            );
                                            console.log(
                                                picklist.PicklistLines
                                                    .PicklistLine
                                            );
                                        }

                                        self.selectedPalletType({
                                            Height: ko.observable(""),
                                            Weight: ko.observable(""),
                                            Name: ko.observable(""),
                                            PalletType: null,
                                        });

                                        self.selectedPicklist(picklist);

                                        if (
                                            self.selectedPicklist()
                                                .UsePicklistPalletType ===
                                            "true"
                                        ) {
                                            $.each(
                                                self.allPalletTypes(),
                                                function (key, pallet) {
                                                    console.log(
                                                        "PALLET" + pallet
                                                    );
                                                    if (
                                                        pallet.PalletType ===
                                                        self.selectedPicklist()
                                                            .DefaultPallet
                                                    ) {
                                                        self.selectPalletType(
                                                            pallet
                                                        );
                                                    }
                                                }
                                            );
                                        }

                                        console.log(
                                            "PALLET NAME: " +
                                                self.selectedPalletType().Name()
                                        );

                                        self.showLoader(true);
                                        var jsonObj = {
                                            Scanning_GenericInterfaceClass: {
                                                GUID: self.guid(),
                                                ActionType: 1,
                                                Picklist:
                                                    self.selectedPicklist()
                                                        .PicklistId,
                                                UserId: self.username(),
                                                PickDateTime: new Date(),
                                                WarehouseID: self.warehouseId(),
                                            },
                                        };
                                        jsonObj = JSON.stringify(jsonObj);

                                        //PUT on the generic scanning PUT service. Request to update the timestamp, using value 1 for ActionType.
                                        $.ajax({
                                            type: "PUT",
                                            url:
                                                WS_ROOT +
                                                WS.SCANNING_GENERIC_PUT +
                                                "?UserID=" +
                                                self.username() +
                                                "&ConcernCode=" +
                                                self.ConcernCode +
                                                "&CompanyCode=" +
                                                self.CompanyCode,
                                            data: jsonObj,
                                            contentType:
                                                "application/json; charset=utf-8",
                                            dataType: "text",
                                        })
                                            .done(function () {
                                                self.page(
                                                    "pickenPicklistDetails"
                                                );

                                                if (
                                                    self.usePredefinedCarriers() ==
                                                    "true"
                                                ) {
                                                    setTimeout(function () {
                                                        $(
                                                            "#cartIdInput"
                                                        ).focus();
                                                    }, 250);
                                                }
                                            })
                                            .error(function (
                                                xhr,
                                                status,
                                                error
                                            ) {
                                                //if there's an error set the pickenErrorMessage observable with the message of the error. This will trigger the display of the error page, on top of the normal screen.
                                                if (xhr.responseText) {
                                                    self.showLoader(false);
                                                    var message = JSON.parse(
                                                        xhr.responseText
                                                    ).message;
                                                    self.pickenErrorMessage(
                                                        message
                                                    );
                                                }
                                            })
                                            .always(function () {
                                                self.showLoader(false);
                                            });
                                    }
                                }).always(function () {
                                    self.showLoader(false);
                                });
                            }
                        }
                    }
                }).always(function () {
                    self.showLoader(false);
                });
    }

    self.changeToSamplesPicklist = function () {
        self.showLoader(true);

        const isEmptySamples = self.samples().length < 1;
        const isEmptyGiftCard = self.giftCardsPicklistLine().length < 1;
        
        if(!isEmptySamples){
            self.page("samples")
            self.renderGiftSampleBtn();
            self.showLoader(false);
            return;
        }

        if(!isEmptyGiftCard){
            self.page("giftCardPicklist")
            self.renderGiftSampleBtn();
            self.showLoader(false);
            return;
        }

        if(self.forNextPalet() == false){
        self.openPickenOrToCart();
        } else {
        self.nextPicklistAfterGiftAndSamples();
        }
    }

    self.changeToCardGiftsPicklist = function () {
        self.showLoader(true);

        const isEmptyGiftCard = self.giftCardsPicklistLine().length < 1;

        if(!isEmptyGiftCard){
            self.page("giftCardPicklist")
            self.renderGiftSampleBtn();
            self.showLoader(false);
            return;
        }

        if(self.forNextPalet() == false){
        self.openPickenOrToCart();
        } else {
        self.nextPicklistAfterGiftAndSamples();
        }
    }


    self.redirectToPickenOrNextPicklist = function () {
        self.showLoader(true);
        
        if(self.forNextPalet() == false){
        self.openPickenOrToCart();
        } else {
        self.nextPicklistAfterGiftAndSamples();
        }

        self.showLoader(false);
    }

    self.changeGiftAndSamplesPage = function () {
        self.showLoader(true);
        if(self.giftCategoriesPicklistLine().length > 0){
            self.page("giftCategoryList");
            self.renderGiftSampleBtn();
            self.showLoader(false);
            return;
        }
        
        if(self.samples().length > 0){
            self.page("samples");
            self.renderGiftSampleBtn();
            self.showLoader(false);
            return;
        }

        if(self.giftCardsPicklistLine().length > 0){
            self.page("giftCardPicklist");
            self.renderGiftSampleBtn();
            self.showLoader(false);
            return;
        }
 
        if(self.forNextPalet() == false){
        self.openPickenOrToCart();
        } else {
        self.nextPicklistAfterGiftAndSamples();
        }
    }

    self.openPickenOrToCart = function () { 
        if (self.globalPickingType() == "regular") {
            self.openPicken();
        } else {
            self.openPickenToCart();
        }
    }

    self.renderGiftSampleBtn = function() {
        window.scrollTo(0, 0);

        self.manageGiftSampleButtonDisplay();

        window.addEventListener('resize', self.manageGiftSampleButtonDisplay);
        window.addEventListener('scroll', function() {
            self.handleScroll();
        });
    };

    self.handleScroll = function() {
        if (window.scrollY + window.innerHeight + 6 >= document.documentElement.scrollHeight) {
            self.showGiftSampleButton(true);
        } else {
            self.showGiftSampleButton(false);
        }
    };

    self.manageGiftSampleButtonDisplay = function() {
        if (window.scrollY + window.innerHeight + 6 >= document.documentElement.scrollHeight) {
            self.showGiftSampleButton(true);
        } else {
            self.showGiftSampleButton(false);
        }
    };
    

    /**
     * Process the picklist
     */
    self.processPicklist = function () {
        self.showLoader(true);

        var jsonObj = {
            Scanning_GenericInterfaceClass: {
                GUID: self.guid(),
                ActionType: 4,
                Picklist:
                    self.globalPickingType() == "regular"
                        ? self.selectedPicklist().PicklistId
                        : self.selectedPicklist().PicklistIdToSend,
                UserId: self.username(),
                WarehouseID: self.warehouseId(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.SCANNING_GENERIC_PUT +
                "?UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function () {
                //on success go back to the picklists list
                if(self.globalPickingType() == "pickToCart") {
                    self.forNextPalet(false);
                    self.getGiftsAndSamplesPicklist();
                } else {
                    self.openPickenOrToCart();
                }

            })
            .error(function (xhr, status, error) {
                //if there's an error set the pickenErrorMessage observable with the message of the error. This will trigger the display of the error page, on top of the normal screen.
                if (xhr.responseText) {
                    self.showLoader(false);
                    var message = JSON.parse(xhr.responseText).message;
                    self.pickenErrorMessage(message);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
           
    };

    // Outbound LSU Check module
    self.openOutboundLSU = function () {
        //hide fields except pallet id
        self.showOutboundRemarks(false);
        self.page("outboundLSU");
        //clear values
        self.clearOutboundValues();
        //focus PalletId
        $("#scanOutboundPalletId").focus();
    };

    //scan Outbound LSU Pallet Id
    self.keyPressOutboundPalletId = function (event) {
        if (event.which == 13) {
            //get request to validate pallet id
            self.validateOutboundLSU_PalletId();
        }
        return true;
    };

    //outbound LSU check get request for validation the scanned PalletId
    self.validateOutboundLSU_PalletId = function () {
        self.showLoader(true);
        $.getJSON(
            WS_ROOT +
                WS.GET_LSUCHECK_PALLETID +
                "?PalletId=" +
                self.scanOutboundPallet() +
                "&State=10" +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            function (data) {
                if (data && data.LSU_Outbound_Ext_ManualCheck) {
                    if (
                        data.LSU_Outbound_Ext_ManualCheck.PalletId ==
                        self.scanOutboundPallet()
                    ) {
                        //palletId is valid
                        //store the check id if retrieved
                        if (data.LSU_Outbound_Ext_ManualCheck.CheckID) {
                            self.fillOutboundCheck(
                                data.LSU_Outbound_Ext_ManualCheck.CheckID
                            );
                            //show remarks and focus it
                            self.showOutboundRemarks(true);
                            $("#outboundRemarks").focus();
                        }
                    } else {
                        //invalid pallet
                        self.showOutboundRemarks(false);
                        self.errorMessage(
                            self.Dictionary[self.Lang()].invalidPallet
                        );
                        self.hideErrorMessage();
                        //clear and focus PalletId
                        self.scanOutboundPallet("");
                        $("#scanOutboundPalletId").focus();
                    }
                }
            }
        )
            .done(function () {
                self.showLoader(false);
            })
            .error(function (xhr, status, error) {
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    self.hideErrorMessage();
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    //button Outbound LSU Check
    self.confirmOutboundLSU = function () {
        //show Loader
        var lsuCheckGuid = self.guid();
        var jsonObj = {
            LSU_ManualCheck: {
                _pk_GUID: lsuCheckGuid,
                LSU_OutboundId: self.scanOutboundPallet(),
                LSU_CheckId: self.fillOutboundCheck(),
                CheckingRemarks: self.fillOutboundRemarks(),
                UserID: self.loggedIn(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_LSUCHECK +
                "?UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        }).error(function (xhr, status, error) {
            if (xhr.responseText) {
                //self.showLoader(false);
                var message = JSON.parse(xhr.responseText).message;
                self.errorMessage(message);
                self.hideErrorMessage();
                //focus pallet Id
                $("#scanOutboundPalletId").focus();
            }
        });

        self.clearOutboundValues();
        //hide remarks and focus pallet id
        self.showOutboundRemarks(false);
        $("#scanOutboundPalletId").focus();
    };

    self.clearOutboundValues = function () {
        //clear fields on PUT SUCCESS
        self.fillOutboundCheck("");
        self.fillOutboundRemarks("");
        self.scanOutboundPallet("");
    };

    /**
     * PICKLIST module
     */
    self.openPicklist = function () {
        self.page("scanPicklist");
    };

    self.getPicklist = function () {};

    //key events for picklist inputs
    self.keyPressPicklistModule = function (value, data, event) {
        if (
            44 <= event.which &&
            event.which <= 200 &&
            (value() ? value().length < 20 : true)
        ) {
            if (value() ? value().length == 0 : true) {
                value("");
            }
            value(value() + String.fromCharCode(event.which));
        } else if (event.which == 13) {
            //get picklist
            self.getPicklist();
        } else {
            return false;
        }
    };

    /**
     * Load Inbound module
     */

    self.getInboundMoveInfo = function () {
        console.log(self.currentSortedPalletId());
        var ok = true;
        if (self.currentSortedPalletId() instanceof Array) {
            if (!self.currentSortedPalletId().includes(self.scanMoveInbound()))
                ok = false;
        } else {
            if (self.scanMoveInbound() != self.currentSortedPalletId()) {
                ok = false;
            }
        }

        if (!ok) {
            if (self.Lang() == "EN")
                self.errorMessage("Wrong scanned pallet ID.");
            else self.errorMessage("Verkeerde pallet id gescand.");

            self.hideErrorMessage(3000);
            self.scanMoveInbound("");
        } else {
            //self.currentSortedPalletId(self.scanMoveInbound());

            /*
            if (self.currentSortedPalletId() instanceof Array) {
                $.each(self.currentSortedPalletId(), function (index, value) {
                    if (value == self.scanMoveInbound()) {
                        self.currentAmountInbound(
                            parseInt(self.currentTotalAmountReceived()[index])
                        );
                        self.currentNewPalletTotal(
                            parseInt(self.currentTotalAmountReceived()[index])
                        );
                    }
                });
            }
            */

            if (self.currentSortedPalletId() instanceof Array) {
                $.each(self.currentSortedPalletId(), function (index, value) {
                    if (value == self.scanMoveInbound()) {
                        self.currentAmountInbound(
                            parseInt(
                                self.currentSortedPalletTotalAmountReceived()[
                                    index
                                ]
                            )
                        );

                        self.showLoader(true);
                        var jsonObj = {
                            InboundChecking_DetermineAmounts: {
                                InboundId: self.inboundId(),
                                WarehouseCode: self.warehouseId(),
                                ProductId: self.currentProductIdInbound(),
                                ProductBarcodeListId:
                                    self.currentScannedBarcodeId(),
                                InboundLine:
                                    self.currentSorterPalletInboundLine()[
                                        index
                                    ],
                            },
                        };
                        jsonObj = JSON.stringify(jsonObj);

                        $.ajax({
                            type: "PUT",
                            url:
                                WS_ROOT +
                                WS.InboundChecking_PUTDetermineQuantity +
                                "?ConcernCode=" +
                                self.ConcernCode +
                                "&CompanyCode=" +
                                self.CompanyCode +
                                "&UserId=" +
                                self.username(),
                            data: jsonObj,
                            contentType: "application/json; charset=utf-8",
                            dataType: "json",
                        })
                            .done(function (data) {
                                self.expectedReceived(
                                    parseInt(
                                        data.InboundChecking_DetermineAmounts
                                            .QuantityExpected
                                    ) +
                                        " / " +
                                        parseInt(
                                            data
                                                .InboundChecking_DetermineAmounts
                                                .QuantityReceived
                                        )
                                );
                            })
                            .error(function (xhr, status, error) {
                                self.showLoader(false);
                                if (xhr.responseText) {
                                    var message = JSON.parse(
                                        xhr.responseText
                                    ).message;
                                    if (message.indexOf("Bezig") > -1) {
                                        message.substr(
                                            0,
                                            message.lastIndexOf("Bezig")
                                        );
                                        var message = message.substring(
                                            0,
                                            message.indexOf("Bezig")
                                        );
                                    }
                                    if (message.indexOf("Busy") > -1) {
                                        message.substr(
                                            0,
                                            message.lastIndexOf("Busy")
                                        );
                                        var message = message.substring(
                                            0,
                                            message.indexOf("Busy")
                                        );
                                    }
                                    self.errorMessage(message);
                                    self.hideErrorMessage(3000);
                                }
                            })
                            .always(function () {
                                self.showLoader(false);
                            });
                    }
                });
            }

            self.currentNewPalletTotal(self.currentAmountInbound());

            self.moveLastPage(true);
            self.showFinalBottomButtons1(true);
            self.showQtyScan(true);
            setTimeout(function () {
                $("#inboundProductQty").focus();
            }, 250);
            self.showFinalBottomButtons2(true);
        }
    };

    self.processRepalletize = function () {
        self.hideErrorMessage(0);
        self.showLoader(true);
        var jsonObj = {
            Interface_RepalletizeAutostore_FinishSession: {
                RepalletizeSession: self.repalletizeData().RepalletizeSession,
                PalletNumber: self.scanRepalletize(),
                PalletType: self.repalletizeData().PalletType,
                QuantityPerNewPallet: self.scanRepalletizeCalc(),
                QuantityCurrentPallet: self.qtyCurrentPallet(),
                isFilledManually: self.isFilledManually(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_Repalletize_Process +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserId=" +
                self.username(),
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                //console.log(data);

                self.successMessage(true);
                if (self.Lang() == "EN")
                    self.errorMessage("Repalletize processed");
                else self.errorMessage("Herpalletiseren verwerkt");

                self.hideErrorMessage(2000);
                $("#repalletizePalletId").prop("readonly", false);
                self.showStartRepalletize(false);
                self.showProcessButton(false);
                self.scanRepalletize("");
                setTimeout(function () {
                    $("#repalletizePalletId").focus();
                }, 250);
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                if (JSON.parse(xhr.responseText).msgId != 400101306) {
                    $("#repalletizePalletId").prop("readonly", false);
                    self.showProcessButton(false);
                    self.scanRepalletize("");
                    self.showStartRepalletize(false);
                    setTimeout(function () {
                        $("#repalletizePalletId").focus();
                    }, 250);
                }

                //self.scanRepalletize("");
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.getRepalletizeInfo = function () {
        self.hideErrorMessage(0);
        self.showProcessButton(false);
        self.showLoader(true);
        var guid = self.guid();
        var jsonObj = {
            Interface_RepalletizeAutostore_StartSession: {
                PalletNumber: self.scanRepalletize(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_Repalletize +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserId=" +
                self.username(),
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                console.log(data);

                if (data && data.Interface_RepalletizeAutostore_StartSession) {
                    data.Interface_RepalletizeAutostore_StartSession.ProductDescription =
                        nl2br(
                            data.Interface_RepalletizeAutostore_StartSession
                                .ProductDescription
                        );

                    if (
                        data.Interface_RepalletizeAutostore_StartSession
                            .InboundNumber == 0
                    )
                        data.Interface_RepalletizeAutostore_StartSession.InboundNumber =
                            "";

                    self.repalletizeData(
                        data.Interface_RepalletizeAutostore_StartSession
                    );

                    self.qtyCurrentPallet(
                        data.Interface_RepalletizeAutostore_StartSession
                            .QuantityCurrentPallet
                    );

                    if (
                        data.Interface_RepalletizeAutostore_StartSession
                            .QuantityPerNewPallet > 0
                    ) {
                        self.numberOfNewPallets(
                            data.Interface_RepalletizeAutostore_StartSession
                                .NumberOfNewPallets
                        );
                        self.looseGoods(
                            data.Interface_RepalletizeAutostore_StartSession
                                .LooseGoods
                        );
                        self.scanRepalletizeCalc(
                            data.Interface_RepalletizeAutostore_StartSession
                                .QuantityPerNewPallet
                        );
                        self.showProcessButton(true);
                        $("#repalletizeCalcPalletId").prop("readonly", true);
                        self.isFilledManually(false);
                    } else {
                        self.isFilledManually(true);
                        $("#repalletizeCalcPalletId").prop("readonly", false);
                        self.numberOfNewPallets("");
                        self.looseGoods("");
                        self.scanRepalletizeCalc("");

                        setTimeout(function () {
                            $("#repalletizeCalcPalletId").focus();
                        }, 250);
                    }

                    self.showStartRepalletize(true);
                    $("#repalletizePalletId").prop("readonly", true);
                }
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                self.scanRepalletize("");
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.getValidateTUID = function () {
        self.showLoader(true);
        
        var jsonObj = {
            Validate_TUID: {
                TUID: self.pickingTUID(),
                SectionCode: self.selectedPicklist().SectionCode,
                WarehouseCode: self.warehouseId(),
                PicklistId:
                    self.globalPickingType() == "regular"
                        ? self.selectedPicklist().PicklistId
                        : self.selectedPicklistLine().PicklistId,
            },
        };

        if (self.usePredefinedCarriers() == "true") {
            jsonObj = {
                Scanning_GenericInterfaceClass: {
                    GUID: self.guid(),
                    ActionType: 6,
                    Picklist: self.selectedPicklistLine().PicklistId,
                    PicklistLine: self.selectedPicklistLine().PicklistLineId,
                    WarehouseID: self.warehouseId(),
                    ValueToValidate: self.pickingTUID(),
                    UserId: self.username(),
                    ScannedValueType: "CL",
                },
            };

            jsonObj = JSON.stringify(jsonObj);

            $.ajax({
                type: "PUT",
                url:
                    WS_ROOT +
                    WS.SCANNING_GENERIC_PUT +
                    "?UserID=" +
                    self.username() +
                    "&ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode,
                data: jsonObj,
                contentType: "application/json; charset=utf-8",
                dataType: "text",
            })
                .done(function (data) {
                    self.showLoader(false);
                    self.updatePickingQuantity(false, true);
                })
                .error(function (xhr, status, error) {
                    //self.showFinalBottomButtons(true);
                    self.showLoader(false);
                    if (xhr.responseText) {
                        var message = JSON.parse(xhr.responseText).message;
                        if (message.indexOf("Bezig") > -1) {
                            message.substr(0, message.lastIndexOf("Bezig"));
                            var message = message.substring(
                                0,
                                message.indexOf("Bezig")
                            );
                        }
                        if (message.indexOf("Busy") > -1) {
                            message.substr(0, message.lastIndexOf("Busy"));
                            var message = message.substring(
                                0,
                                message.indexOf("Busy")
                            );
                        }
                        self.errorMessage(message);
                        self.hideErrorMessage(3000);
                    }
                })
                .always(function () {
                    self.pickingTUID("");
                    self.showLoader(false);
                });
        } else {
            jsonObj = JSON.stringify(jsonObj);

            $.ajax({
                type: "PUT",
                url:
                    WS_ROOT +
                    WS.PUT_Validate_TUID +
                    "?WarehouseCode=" +
                    self.warehouseId() +
                    "&SectionCode=" +
                    self.selectedPicklist().SectionCode +
                    "&TUID=" +
                    self.pickingTUID() +
                    "&ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode +
                    "&UserID=" +
                    self.username(),
                data: jsonObj,
                contentType: "application/json; charset=utf-8",
                dataType: "text",
            })
                .done(function (data) {
                    console.log("TU ID IS OK!");
                    self.currentTUID(self.pickingTUID());
                    //self.showLoader(false);
                    $.each(
                        self.selectedPicklist().combinedPicklists,
                        function (index, currentPicklist) {
                            if (
                                currentPicklist.PicklistId ==
                                self.selectedPicklistLine().PicklistId
                            ) {
                                self.selectedPicklist().combinedPicklists[
                                    index
                                ].OpenCarrierPresent = "true";
                            }
                        }
                    );

                    self.updatePickingQuantity(false, true);
                })
                .error(function (xhr, status, error) {
                    //console.log("TU ID IS OK!");
                    self.pickingTUID("");
                    self.showLoader(false);
                    if (xhr.responseText) {
                        var message = JSON.parse(xhr.responseText).message;
                        if (message.indexOf("Bezig") > -1) {
                            message.substr(0, message.lastIndexOf("Bezig"));
                            var message = message.substring(
                                0,
                                message.indexOf("Bezig")
                            );
                        }
                        if (message.indexOf("Busy") > -1) {
                            message.substr(0, message.lastIndexOf("Busy"));
                            var message = message.substring(
                                0,
                                message.indexOf("Busy")
                            );
                        }
                        self.errorMessage(message);
                        self.hideErrorMessage(3000);
                    }
                })
                .always(function () {
                    //self.showLoader(false);
                });
        }
    };

    self.getBoxInfo = function () {
        console.log("SELECTED PICKLIST:");
        console.log(self.selectedPicklist());
        /*self.selectedPicklist().Boxes.Box =
            self.selectedPicklist().Boxes.Box || [];*/

        if (self.selectedPicklist().Boxes == null) {
            self.selectedPicklist().Boxes = {};
            self.selectedPicklist().Boxes.Box = [];
        }

        var boxFound = false;
        $.each(self.selectedPicklist().Boxes.Box, function (index, currentBox) {
            if (currentBox.BoxReference == self.scanBox()) {
                boxFound = true;

                /*self.boxLines.removeAll();*/
                self.boxLines(
                    self.selectedPicklist().Boxes.Box[index].BoxLines.BoxLine
                );
            }
        });

        if (!boxFound) {
            self.updatePickingQuantity();
        } else {
            console.log("BOX FOUND!");
            console.log(self.boxLines());
            self.page("boxContents");
        }

        console.log("SELECTED PICKLIST UPD:");
        console.log(self.selectedPicklist());
    };

    self.getScalePalletMeasurementInfo = function () {
        self.showLoader(true);
        var jsonObj = {
            StartPalletMeasuringModule: {
                LSUOutboundId: self.scanPalletMeasurement(),
                WarehouseLocationBarcode: self.scanScalePalletMeasurement(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_PalletMeasurement_Step2 +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserID=" +
                self.username(),

            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function (data) {
                self.showLoader(false);
                console.log(data);
                $("#scalePalletMeasurementId").attr("readonly", "readonly");
                setTimeout(function () {
                    $("#scalePalletMeasurementId").blur();
                }, 250);
                self.showMeasureButton(true);
            })
            .error(function (xhr, status, error) {
                self.scanScalePalletMeasurement("");
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.finishPalletMeasure = function () {
        self.showLoader(true);
        var jsonObj = {
            FinishPalletMeasuringModule: {
                LSUOutboundId: self.scanPalletMeasurement(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_PalletMeasurement_Step4 +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserID=" +
                self.username(),

            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                console.log(data);
                self.showMeasureButton(false);
                self.palletMeasurementStep3(false);
                self.palletMeasurementStep2(false);
                self.scanPalletMeasurement("");
                self.scanScalePalletMeasurement("");
                self.palletMeasurementKG("");
                $("#scalePalletMeasurementId").removeAttr("readonly");
                setTimeout(function () {
                    $("#palletMeasurementId").removeAttr("readonly");
                    $("#palletMeasurementId").focus();
                }, 250);
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.getPalletMeasurement = function () {
        self.showLoader(true);
        var jsonObj = {
            ExecutePalletMeasuringModule: {
                LSUOutboundId: self.scanPalletMeasurement(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_PalletMeasurement_Step3 +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserID=" +
                self.username(),

            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                console.log(data);
                self.palletMeasurementKG(
                    data.ExecutePalletMeasuringModule.WeightInKg
                );
                self.showMeasureButton(false);
                self.palletMeasurementStep3(true);
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.getPalletMeasurementInfo = function () {
        self.showLoader(true);
        var jsonObj = {
            ValidateLSUOutboundForPalletMeasurement: {
                LSUOutboundId: self.scanPalletMeasurement(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_PalletMeasurement_Step1 +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserID=" +
                self.username(),

            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                console.log(data);
                self.palletMeasurementStep2(true);
                $("#palletMeasurementId").attr("readonly", "readonly");
                setTimeout(function () {
                    $("#scalePalletMeasurementId").removeAttr("readonly");
                    $("#scalePalletMeasurementId").focus();
                }, 250);
            })
            .error(function (xhr, status, error) {
                self.scanPalletMeasurement("");
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.getInboundInfo = function () {
        self.hideErrorMessage(0);
        self.showLoader(true);
        self.inboundId("");
        self.supplierName("");
        self.noOfPallets("");
        self.sortingLocation("");
        self.showStartInbound(false);
        self.showExpected(false);
        var guid = self.guid();
        var jsonObj = {
            Interface_InboundScanning_StartScanning: {
                GUID: guid,
                PalletBarcodeScanned: self.scanInbound(),
                TypeOfPallet: "-",
                WarehouseId: self.warehouseId(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_InboundScanner +
                "?GUID=" +
                guid +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserID=" +
                self.username(),
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                console.log(data);

                if (
                    data &&
                    data.Interface_InboundScanning_StartScanning &&
                    data.Interface_InboundScanning_StartScanning.TypeOfPallet
                ) {
                    self.scanInbound(
                        data.Interface_InboundScanning_StartScanning
                            .PalletBarcodeScanned
                    );

                    if (
                        data.Interface_InboundScanning_StartScanning
                            .TypeOfPallet == "GRP" &&
                        data.Interface_InboundScanning_StartScanning
                            .UseInboundScannerForGR == "false"
                    ) {
                        if (self.Lang() == "EN")
                            self.errorMessage(
                                "Inboundscanner is not available for this inbound."
                            );
                        else
                            self.errorMessage(
                                "Inboundscanner is niet beschikbaar voor deze inslag."
                            );
                        self.scanInbound("");
                        self.hideErrorMessage(3000);
                    } else if (
                        data.Interface_InboundScanning_StartScanning
                            .TypeOfPallet == "-"
                    ) {
                        if (self.Lang() == "EN")
                            self.errorMessage(
                                "Unable to retrieve pallet info."
                            );
                        else
                            self.errorMessage(
                                "Het is niet mogelijk om de pallet informatie op te halen."
                            );
                        self.scanInbound("");
                        self.hideErrorMessage(3000);
                    } else if (
                        data.Interface_InboundScanning_StartScanning
                            .TypeOfPallet == "GRP"
                    ) {
                        self.inboundId(
                            data.Interface_InboundScanning_StartScanning
                                .InboundId
                        );
                        self.supplierName(
                            data.Interface_InboundScanning_StartScanning
                                .SupplierCode
                        );
                        self.noOfPallets(
                            data.Interface_InboundScanning_StartScanning
                                .NrOfGRPallets
                        );
                        self.sortingLocation(
                            data.Interface_InboundScanning_StartScanning
                                .LocationAK
                        );
                        //self.currentPalletsInbound(data.ScannedPallets.ScannedPallet.GRPallets);
                        //self.currentPallet(data.ScannedPallets.ScannedPallet.PalletId);
                        $("#inboundPalletId").prop("readonly", true);
                        self.showStartInbound(true);
                        self.showBroken(true);
                    } else {
                        self.showFinalBottomButtons1(false);
                        self.showFinalBottomButtons2(false);
                        // TO BE IMPLEMENTED
                        self.inboundId(
                            data.Interface_InboundScanning_StartScanning
                                .InboundId
                        );
                        self.supplierName(
                            data.Interface_InboundScanning_StartScanning
                                .SupplierCode
                        );
                        self.currentProductDescriptionInbound(
                            data.Interface_InboundScanning_StartScanning
                                .ProductDescription
                        );
                        self.currentProductIdInbound(
                            data.Interface_InboundScanning_StartScanning
                                .ProductId
                        );
                        self.currentProductBarcodeInbound(
                            data.Interface_InboundScanning_StartScanning
                                .ProductBarcode
                        );
                        self.currentAmountInbound(
                            data.Interface_InboundScanning_StartScanning
                                .TotalAmountReceived
                        );

                        if (
                            data.Interface_InboundScanning_StartScanning
                                .SortedPalletState == "10"
                        ) {
                            self.showFinalBottomButtons2(true);
                        } else {
                            self.showFinalBottomButtons1(true);
                        }
                        self.page("inboundScanningProductSP");
                    }
                } else {
                    if (self.Lang() == "EN")
                        self.errorMessage("Unable to retrieve pallet info.");
                    else
                        self.errorMessage(
                            "Het is niet mogelijk om de pallet informatie op te halen."
                        );
                    self.scanInbound("");
                    self.hideErrorMessage(3000);
                }
            })
            .error(function (xhr, status, error) {
                self.scanInbound("");
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.openChosenProductNow = function (productNumber) {
        if (productNumber == "unknown") {
            self.currentProductDescriptionInbound("UNKNOWN");
            self.currentProductIdInbound("UNKNOWN");
            self.currentProductDescriptionInboundSend("");
            self.currentProductBarcodeInbound(self.productInbound());

            self.showProductScan(true);
            self.showNextPallet(false);
            self.showBroken(false);
            self.getInboundProductQty();
            self.page("inboundScanningProduct");
        } else {
            $.each(self.productList(), function (index, currentProduct) {
                if (currentProduct.Productnumber == productNumber) {
                    self.currentProductDescriptionInbound(
                        currentProduct.ProductDescription
                    );
                    self.currentProductIdInbound(currentProduct.Productnumber);
                    self.currentProductDescriptionInboundSend(
                        currentProduct.ProductDescription
                    );
                    self.currentProductBarcodeInbound(self.productInbound());

                    self.showProductScan(true);
                    self.showNextPallet(false);
                    self.showBroken(false);
                    self.getInboundProductQty();
                    self.page("inboundScanningProduct");

                    return false;
                }
            });
        }
    };

    self.determineInboundLine = function () {
        self.showLoader(true);
        var jsonObj = {
            DetermineInboundLine: {
                InboundId: self.inboundId(),
                WarehouseId: self.warehouseId(),
                ProductId: self.currentProductIdInbound(),
                ProductBarcode: self.productInbound(),
                ProductBarcodeAction: self.productBarcodeAction(),
            },
        };
        if (self.currentInboundLine() == "0") {
            self.showInstructionActivities(false);
            self.informationActivitiesToShow.removeAll();
        }

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.InboundScanner_DetermineInboundLine_PUT +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserId=" +
                self.username(),
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                self.currentInboundLine(data.DetermineInboundLine.InboundLine);

                self.informationActivities(
                    self.InboundLineActivities().filter(function (_item) {
                        return (
                            data.DetermineInboundLine.InboundLine ===
                            _item.InboundLine
                        );
                    })
                );
                console.log(self.informationActivities());

                if (
                    self.informationActivities().length == 1 &&
                    self.informationActivities()[0]
                        .LogisticalActivitiesInstruction != null
                ) {
                    const InboundLineInformations = Array.isArray(
                        self.informationActivities()[0]
                            .LogisticalActivitiesInstruction.Instruction
                    )
                        ? self.informationActivities()[0]
                              .LogisticalActivitiesInstruction.Instruction
                        : [];

                    console.log(InboundLineInformations);

                    self.informationActivitiesToShow(
                        InboundLineInformations.filter(function (_item) {
                            return _item.DisplayOnInboundScanning === "true";
                        })
                    );

                    if (self.informationActivitiesToShow().length > 0) {
                        self.showInstructionActivities(true);
                    }

                    console.log(self.informationActivitiesToShow());
                }

                self.determineQuantity(self.currentInboundLine());
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.openChosenProduct = function (productNumber) {
        self.openChosenProductNow(productNumber);
    };

    self.inboundChecking = function () {
        self.moveLastPage(false);
        self.hideErrorMessage(0);
        self.showLoader(true);
        self.expectedQty(0);
        self.remainingQty(0);

        var jsonObj = {
            ScannedBarcode: {
                Barcode: self.productInbound(),
                InboundId: self.inboundId(),
                WarehouseId: self.warehouseId(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.InboundChecking_ScanProductBarcode_PUT +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserId=" +
                self.username(),
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                console.log(data);

                self.showInstructionActivities(false);
                self.informationActivitiesToShow.removeAll();
                if (data && data.ScannedBarcode) {
                    self.productBarcodeAction(
                        data.ScannedBarcode.ProductBarcodeAction
                    );

                    self.InboundLineActivities(
                        Array.isArray(
                            data.ScannedBarcode.InboundLines.InboundLine
                        )
                            ? data.ScannedBarcode.InboundLines.InboundLine
                            : []
                    );

                    self.informationActivities(
                        self.InboundLineActivities().filter(function (_item) {
                            return (
                                data.ScannedBarcode.InboundLine ===
                                _item.InboundLine
                            );
                        })
                    );
                    console.log(self.informationActivities());

                    if (
                        self.informationActivities().length == 1 &&
                        self.informationActivities()[0]
                            .LogisticalActivitiesInstruction != null
                    ) {
                        const InboundLineInformations = Array.isArray(
                            self.informationActivities()[0]
                                .LogisticalActivitiesInstruction.Instruction
                        )
                            ? self.informationActivities()[0]
                                  .LogisticalActivitiesInstruction.Instruction
                            : [];

                        console.log(InboundLineInformations);

                        self.informationActivitiesToShow(
                            InboundLineInformations.filter(function (_item) {
                                return (
                                    _item.DisplayOnInboundScanning === "true"
                                );
                            })
                        );

                        if (self.informationActivitiesToShow().length > 0) {
                            self.showInstructionActivities(true);
                        }

                        console.log(self.informationActivitiesToShow());
                    }

                    self.currentScannedBarcodeId(data.ScannedBarcode.Id);
                    //ProductBarcodeAction OPB
                    if (
                        data.ScannedBarcode.ProductBarcodeAction == "OPB" ||
                        data.ScannedBarcode.ProductBarcodeAction == "OILMP"
                    ) {
                        self.multipleProductsPage(false);
                        self.currentProductDescriptionInbound(
                            data.ScannedBarcode.ProductDescription
                        );
                        self.currentProductIdInbound(
                            data.ScannedBarcode.Productnumber
                        );
                        self.currentProductDescriptionInboundSend(
                            data.ScannedBarcode.ProductDescription
                        );
                        self.currentProductBarcodeInbound(
                            self.productInbound()
                        );

                        self.currentInboundLine(
                            data.ScannedBarcode.InboundLine
                        );

                        self.showProductScan(true);
                        self.showNextPallet(false);
                        self.showBroken(false);
                        self.getInboundProductQty();
                    }
                    //ProductBarcodeAction UNK
                    else if (
                        data.ScannedBarcode.ProductBarcodeAction == "UNK"
                    ) {
                        self.multipleProductsPage(false);
                        self.currentProductDescriptionInbound("UNKNOWN");
                        self.currentProductIdInbound("UNKNOWN");
                        self.currentProductDescriptionInboundSend("");
                        self.currentProductBarcodeInbound(
                            self.productInbound()
                        );
                        self.currentInboundLine(
                            data.ScannedBarcode.InboundLine
                        );

                        self.showProductScan(true);
                        self.showNextPallet(false);
                        self.showBroken(false);
                        self.getInboundProductQty();
                    }
                    //ProductBarcodeAction MPB
                    else if (
                        data.ScannedBarcode.ProductBarcodeAction == "MPB"
                    ) {
                        self.productList(
                            data.ScannedBarcode.ProductBarcodes.ProductBarcode
                        );
                        self.currentInboundLine(
                            data.ScannedBarcode.InboundLine
                        );
                        self.multipleProductsPage(true);
                        self.page("chooseProductPage");
                    } else if (
                        data.ScannedBarcode.ProductBarcodeAction == "MIL"
                    ) {
                        //data.ScannedBarcode.ProductBarcodes.ProductBarcode
                        //data.ScannedBarcode.InboundLines.InboundLine

                        /**
                         * check if data is valid (as it's expected)
                         */
                        const ProductBarcode = Array.isArray(
                            data.ScannedBarcode.ProductBarcodes.ProductBarcode
                        )
                            ? data.ScannedBarcode.ProductBarcodes.ProductBarcode
                            : [];
                        const InboundLine = Array.isArray(
                            data.ScannedBarcode.InboundLines.InboundLine
                        )
                            ? data.ScannedBarcode.InboundLines.InboundLine
                            : [];

                        self.productList(
                            ProductBarcode.filter(function (_item) {
                                return InboundLine.some(function (_inbItem) {
                                    return (
                                        _inbItem.Productnumber ===
                                        _item.Productnumber
                                    );
                                });
                            })
                        );
                        if (self.productList().length == 1) {
                            self.openChosenProduct(
                                self.productList()[0].Productnumber
                            );
                            self.multipleProductsPage(false);
                        } else {
                            self.multipleProductsPage(true);
                            self.page("chooseProductPage");
                        }
                    }
                }
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.getInboundProductInfo = function () {
        self.moveLastPage(false);
        self.hideErrorMessage(0);
        self.showLoader(true);
        self.expectedQty(0);
        self.remainingQty(0);
        $.getJSON(
            WS_ROOT +
                WS.GET_ProductInboundScanning +
                "?ProductBarcode=" +
                self.productInbound() +
                "&ConcernCode=" +
                self.ConcernCode,
            function (data) {
                $("#inboundProductId").prop("readonly", true);
                //console.log(data);
                if (
                    data &&
                    data.ProductBarcode &&
                    data.ProductBarcode.ProductNumberBarcode
                ) {
                    self.currentProductDescriptionInbound(
                        data.ProductBarcode.ProductNumberBarcode
                            .ProductDescription
                    );
                    self.currentProductIdInbound(
                        data.ProductBarcode.ProductNumberBarcode.ProductId
                    );
                    self.currentProductDescriptionInboundSend(
                        data.ProductBarcode.ProductNumberBarcode
                            .ProductDescription
                    );
                    self.currentProductBarcodeInbound(self.productInbound());
                    self.currentProductIdInbound(
                        data.ProductBarcode.ProductNumberBarcode.ProductId
                    );

                    if (self.currentProductIdInbound() == "") {
                        if (self.Lang() == "EN")
                            self.currentProductIdInbound("UNKNOWN");
                        else self.currentProductIdInbound("UNKNOWN");
                    }

                    if (self.currentProductDescriptionInbound() == "") {
                        if (self.Lang() == "EN")
                            self.currentProductDescriptionInbound("UNKNOWN");
                        else self.currentProductDescriptionInbound("UNKNOWN");
                    }
                } else {
                    if (self.Lang() == "EN")
                        self.currentProductDescriptionInbound("UNKNOWN");
                    else self.currentProductDescriptionInbound("UNKNOWN");

                    if (self.Lang() == "EN")
                        self.currentProductIdInbound("UNKNOWN");
                    else self.currentProductIdInbound("UNKNOWN");

                    self.currentProductDescriptionInboundSend("");
                    self.currentProductBarcodeInbound(self.productInbound());
                }
                self.showProductScan(true);
                self.showNextPallet(false);
                self.showBroken(false);
                /*self.showQtyScan(true);
      setTimeout(function() {
        $('#inboundProductQty').focus();
      }, 250);*/
                self.getInboundProductQty();
            }
        )
            .done(function () {
                self.showLoader(false);
            })
            .error(function (xhr, status, error) {
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.calcAmount = function () {
        if (parseInt(self.productInboundQty()) > 0)
            self.currentNewPalletTotal(
                parseInt(self.currentAmountInbound()) +
                    parseInt(self.productInboundQty())
            );
        else self.currentNewPalletTotal(parseInt(self.currentAmountInbound()));

        if (isNaN(self.currentNewPalletTotal())) {
            self.currentAmountInbound(0);
            self.currentNewPalletTotal(
                parseInt(self.currentAmountInbound()) +
                    parseInt(self.productInboundQty())
            );
        }
    };

    self.determineQuantity = function (currentInboundLine) {
        self.showLoader(true);
        var jsonObj = {
            InboundChecking_DetermineAmounts: {
                InboundId: self.inboundId(),
                WarehouseCode: self.warehouseId(),
                ProductId: self.currentProductIdInbound(),
                ProductBarcodeListId: self.currentScannedBarcodeId(),
                InboundLine: currentInboundLine,
            },
        };
        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.InboundChecking_PUTDetermineQuantity +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserId=" +
                self.username(),
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.expectedReceived(
                    parseInt(
                        data.InboundChecking_DetermineAmounts.QuantityExpected
                    ) +
                        " / " +
                        parseInt(
                            data.InboundChecking_DetermineAmounts
                                .QuantityReceived
                        )
                );
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.getInboundProductQty = function () {
        self.hideErrorMessage(0);
        self.showLoader(true);
        self.showProductNewPallet(false);
        self.showExpected(false);

        var jsonObj = {
            SearchOpenSortedPallets: {
                InboundId: self.inboundId(),
                WarehouseId: self.warehouseId(),
                ProductId: self.currentProductIdInbound(),
                ProductBarcode: self.currentProductBarcodeInbound(),
                IsBrokenProduct: self.brokenProduct(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.InboundScanner_SearchOpenSortedPallets_PUT +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserId=" +
                self.username(),
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.currentSearchOpenPalletId(data.SearchOpenSortedPallets.Id);

                if (data.SearchOpenSortedPallets.SortedPallet == null) {
                    self.determineInboundLine();
                    self.showMoveProductButton(false);
                    self.showProductNewPallet(true);
                    self.showExpected(true);
                    self.currentAmountInbound(0);
                    self.currentDestination("");
                } else {
                    self.currentInboundLine(
                        data.SearchOpenSortedPallets.SortedPallet
                            .ListOpenSortedPallets[0].InboundLine
                    );
                    console.log(
                        "CURRENT INBOUND LINE: " + self.currentInboundLine()
                    );
                    self.informationActivities(
                        self.InboundLineActivities().filter(function (_item) {
                            return (
                                self.currentInboundLine() === _item.InboundLine
                            );
                        })
                    );
                    console.log(self.informationActivities());

                    if (
                        self.informationActivities().length == 1 &&
                        self.informationActivities()[0]
                            .LogisticalActivitiesInstruction != null
                    ) {
                        const InboundLineInformations = Array.isArray(
                            self.informationActivities()[0]
                                .LogisticalActivitiesInstruction.Instruction
                        )
                            ? self.informationActivities()[0]
                                  .LogisticalActivitiesInstruction.Instruction
                            : [];

                        console.log(InboundLineInformations);

                        self.informationActivitiesToShow(
                            InboundLineInformations.filter(function (_item) {
                                return (
                                    _item.DisplayOnInboundScanning === "true"
                                );
                            })
                        );

                        if (self.informationActivitiesToShow().length > 0) {
                            self.showInstructionActivities(true);
                        }

                        console.log(self.informationActivitiesToShow());
                    }

                    self.determineQuantity(0);
                    if (
                        data.SearchOpenSortedPallets.SortedPallet
                            .ListOpenSortedPallets[0].InboundLinesFound > 1
                    ) {
                        self.twoInboundLines(true);
                    } else self.twoInboundLines(false);

                    var sortedPalletInboundLineArray = [];
                    var sortedPalletArray = [];
                    var sortedPalletIdArray = [];
                    var sortedPalletTotalAmountReceivedArray = [];
                    $.each(
                        data.SearchOpenSortedPallets.SortedPallet
                            .ListOpenSortedPallets,
                        function (index, currentPallet) {
                            sortedPalletArray.push(currentPallet.SortedPallet);
                            sortedPalletIdArray.push(
                                currentPallet.SortedPalletId
                            );
                            sortedPalletTotalAmountReceivedArray.push(
                                currentPallet.TotalAmountReceived
                            );
                            sortedPalletInboundLineArray.push(
                                currentPallet.InboundLine
                            );
                            self.currentDestination(
                                currentPallet.DefaultDestination
                            );
                        }
                    );

                    self.currentSortedPallet(sortedPalletArray);
                    self.currentSortedPalletId(sortedPalletIdArray);
                    self.currentSorterPalletInboundLine(
                        sortedPalletInboundLineArray
                    );
                    self.currentSortedPalletTotalAmountReceived(
                        sortedPalletTotalAmountReceivedArray
                    );

                    self.showMoveProductButton(true);
                    self.showProductNewPallet(false);
                    self.showExpected(true);
                }
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    // OLD FUNCTION
    self.getInboundProductQty_old = function () {
        self.hideErrorMessage(0);
        self.showLoader(true);
        self.showProductNewPallet(false);
        self.showExpected(false);
        $.getJSON(
            WS_ROOT +
                WS.PUT_GET_InboundSortedPallet +
                "?ConcernCode=" +
                self.ConcernCode +
                "&InboundId=" +
                self.inboundId() +
                "&ProductBarcode=" +
                self.currentProductBarcodeInbound() +
                "&WarehouseCode=" +
                self.warehouseId() +
                "&State=1&IsBrokenProduct=" +
                self.brokenProduct(),
            function (data) {
                console.log(data);

                var totalAmount = 0;
                var qtyExpected = 0;

                if (
                    data &&
                    data.InboundScanning_SortedPallet &&
                    data.InboundScanning_SortedPallet.SortedPallet
                ) {
                    /*if (data.InboundScanning_SortedPallet.TotalAmountReceived instanceof Array) {
          $.each(data.SortedPalletList.SortedPallet, function( index, value ) {
            totalAmount += parseInt(value);
          });
        }
        else
        {
          totalAmount = data.InboundScanning_SortedPallet.TotalAmountReceived;
        }*/

                    if (
                        data.InboundScanning_SortedPallet
                            .QuantityExpected instanceof Array
                    ) {
                        $.each(
                            data.InboundScanning_SortedPallet.QuantityExpected,
                            function (index, value) {
                                qtyExpected += parseInt(value);
                            }
                        );
                    } else {
                        qtyExpected =
                            data.InboundScanning_SortedPallet.QuantityExpected;
                    }

                    $.getJSON(
                        WS_ROOT +
                            WS.GET_SortedPalletList +
                            "?ConcernCode=" +
                            self.ConcernCode +
                            "&InboundId=" +
                            self.inboundId() +
                            "&ProductBarcode=" +
                            self.currentProductBarcodeInbound() +
                            "&WarehouseCode=" +
                            self.warehouseId(),
                        function (data) {
                            console.log("Sorted Pallet List:");
                            console.log(data);

                            if (
                                data &&
                                data.SortedPalletList &&
                                data.SortedPalletList.SortedPallet
                            ) {
                                $.each(
                                    data.SortedPalletList.SortedPallet,
                                    function (index, value) {
                                        console.log(value.TotalAmountReceived);
                                        totalAmount += parseInt(
                                            value.TotalAmountReceived
                                        );
                                    }
                                );
                            }
                            self.expectedReceived(
                                parseInt(qtyExpected) +
                                    " / " +
                                    parseInt(totalAmount)
                            );
                        }
                    );

                    self.currentAmountInbound(
                        parseInt(
                            data.InboundScanning_SortedPallet
                                .TotalAmountReceived
                        )
                    );
                    self.totalAmountReceived(
                        parseInt(
                            data.InboundScanning_SortedPallet
                                .TotalAmountReceived
                        )
                    );
                    self.currentTotalAmountReceived(
                        parseInt(
                            data.InboundScanning_SortedPallet
                                .TotalAmountReceived
                        )
                    );
                    self.currentNewPalletTotal(
                        parseInt(
                            data.InboundScanning_SortedPallet
                                .TotalAmountReceived
                        )
                    );

                    if (
                        data.InboundScanning_SortedPallet.InboundLinesFound >
                            1 &&
                        data.InboundScanning_SortedPallet.InboundLine == 0
                    ) {
                        self.twoInboundLines(true);
                    } else self.twoInboundLines(false);

                    self.currentSortedPallet(
                        data.InboundScanning_SortedPallet.SortedPallet
                    );
                    self.currentSortedPalletId(
                        data.InboundScanning_SortedPallet.SortedPalletId
                    );

                    if (
                        data.InboundScanning_SortedPallet
                            .DefaultDestination instanceof Array
                    ) {
                        var filtered =
                            data.InboundScanning_SortedPallet.DefaultDestination.filter(
                                function (el) {
                                    return el != "";
                                }
                            );
                        self.currentDestination(filtered);
                    } else {
                        self.currentDestination(
                            data.InboundScanning_SortedPallet.DefaultDestination
                        );
                    }

                    console.log(
                        "Current sorted pallet: " +
                            data.InboundScanning_SortedPallet.SortedPallet
                    );
                    self.showMoveProductButton(true);
                    self.showProductNewPallet(false);
                    self.showExpected(true);
                } else {
                    self.showMoveProductButton(false);
                    self.showProductNewPallet(true);
                    self.showExpected(false);
                }
            }
        )
            .done(function () {
                self.showLoader(false);
            })
            .error(function (xhr, status, error) {
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    /**
     * Load Shipment module
     */
    self.getShipmentInfo = function () {
        self.showLoader(true);
        var guid = self.guid();
        var jsonObj = {
            PalletMovementRequestGroup: {
                GUID: guid,
                ScannedValue: self.scanShipment(),
                WarehouseId: self.warehouseId(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_GET_MoveRequestGroup +
                "?GUID=" +
                guid +
                "&UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                //store the movement info
                if (data && data.PalletMovementRequestGroup) {
                    if (
                        data.PalletMovementRequestGroup.MoveRequestGroupId !==
                        "0"
                    ) {
                        self.shipmentInfo(data.PalletMovementRequestGroup);
                        //on success go to pallet movement
                        //setTimeout(function () {
                        if (
                            data.PalletMovementRequestGroup
                                .OpenPalletMoveRequests !== "0"
                        ) {
                            self.openPalletMovement("loadShipment", "");
                            self.scanShipment("");
                            $("#scanShipmentId").focus();
                        } else {
                            self.errorMessage(
                                self.Dictionary[self.Lang()].noMoveRequest
                            );
                            self.hideErrorMessage();
                            self.scanShipment("");
                            $("#scanShipmentId").focus();
                        }
                    } else {
                        //if we retrieve a message response from the XML, show it. otherwise use default warning message
                        if (data.PalletMovementRequestGroup.ResultMessage) {
                            self.errorMessage(
                                data.PalletMovementRequestGroup.ResultMessage
                            );
                        } else {
                            self.errorMessage(
                                self.Dictionary[self.Lang()].noShipment
                            );
                        }
                        self.hideErrorMessage();
                        self.scanShipment("");
                        $("#scanShipmentId").focus();
                    }
                }
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage();
                    //clear shipment and focus again
                    self.scanShipment("");
                    $("#scanShipmentId").focus();
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.keyPressUpdatePickedAmount = function (event) {
        if ($("#confirmOnPicking").hasClass("disabled")) return true;
        if (event.which == 13 && self.showLoader() == false) {
            self.updatePickedAmount();
        }
        return true;
    };

    self.keyPressScanShipment = function (event) {
        if (event.which == 13) {
            self.getShipmentInfo();
        }
        return true;
    };

    self.keyPressScanMerge = function (event) {
        if (event.which == 13) {
            self.getMergeInfo();
        }
        return true;
    };

    self.keyPressScanPalletEnLocatieInfo = function (event) {
        if (event.which == 13) {
            self.getPalletEnLocatieInfo();
        }
        return true;
    };

    self.preventLetters = function (event) {
        var keyValue = event.key;
        if (keyValue.match(/[0-9]/g)) {
            return true;
        }
        return false;
    };

    self.keyPressCalcRepalletize = function (event) {
        if (self.scanRepalletizeCalc() != "") {
            self.showProcessButton(true);
            self.numberOfNewPallets(
                Math.ceil(
                    parseInt(self.qtyCurrentPallet()) /
                        parseInt(self.scanRepalletizeCalc())
                )
            );
            self.looseGoods(
                parseInt(self.qtyCurrentPallet()) %
                    parseInt(self.scanRepalletizeCalc())
            );
            console.log(
                parseInt(self.qtyCurrentPallet()) +
                    " / " +
                    parseInt(self.scanRepalletizeCalc())
            );
        } else self.showProcessButton(false);
    };

    self.keyPressScanRepalletize = function (event) {
        if (event.which == 13) {
            self.getRepalletizeInfo();
        }
        return true;
    };

    self.keyPressScanInbound = function (event) {
        if (event.which == 13) {
            self.getInboundInfo();
        }
        return true;
    };

    self.keyPressPalletMeasurement = function (event) {
        if (event.which == 13) {
            self.getPalletMeasurementInfo();
        }
        return true;
    };

    self.keyPressScalePalletMeasurement = function (event) {
        if (event.which == 13) {
            self.getScalePalletMeasurementInfo();
        }
        return true;
    };

    self.keyPressScanBox = function (event) {
        if (event.which == 13) {
            self.getBoxInfo();
        }
        return true;
    };

    self.keyPressValidateTUID = function (event) {
        if (event.which == 13) {
            self.getValidateTUID();
        }
        return true;
    };

    self.keyPressScanMoveInbound = function (event) {
        if (event.which == 13) {
            self.getInboundMoveInfo();
        }
        return true;
    };

    self.keyPressScanInboundProduct = function (event) {
        if (event.which == 13) {
            console.log("Product Inbound: " + self.productInbound());
            if (
                self.productInbound() !== undefined &&
                self.productInbound() != ""
            ) {
                //self.getInboundProductInfo();
                self.inboundChecking();
            } else {
                //
                if (self.Lang() == "EN")
                    self.errorMessage("Please add a barcode.");
                else self.errorMessage("Vul een barcode in.");
                self.hideErrorMessage(3000);
            }
        }
        return true;
    };

    self.keyPressScanInboundProductQty = function (event) {
        if (event.which == 13) {
            self.getInboundProductQty();
        }
        return true;
    };

    self.keyPressPickingBarcode = function (event) {
        if (event.which == 13) {
            self.getPickenScanBarcode();
        }
        return true;
    };

    self.keyPressCycleCountBarcode = function (event) {
        if (event.which == 13) {
            self.getCycleCountScanBarcode();
        }
        return true;
    };

    self.getCycleCountScanBarcode = function () {
        if (self.multiBarcodes() == "") {
            if (self.Lang() == "EN") self.errorMessage("Incorrect barcode.");
            else self.errorMessage("Incorrecte barcode.");
            self.hideErrorMessage();
            self.cycleCountBarcode("");
        } else {
            if (
                self.multiBarcodes() &&
                self.multiBarcodes() != "" &&
                self.multiBarcodes().includes(self.cycleCountBarcode())
            ) {
                self.openCycleLine();
                setTimeout(function () {
                    $("#QuantityCounted_PU").focus();
                }, 250);
                self.cycleCountBarcode("");
                self.currentPageCycleCountPV(false);
                self.currentPageZeroLines(false);
            } else {
                if (self.Lang() == "EN")
                    self.errorMessage("Incorrect barcode.");
                else self.errorMessage("Incorrecte barcode.");
                self.hideErrorMessage();
                self.cycleCountBarcode("");
            }
        }
    };

    self.getPickenScanBarcode = function () {
        self.showLoader(true);

        /*if (self.globalPickingType() == "pickToCart") {
            $.each(
                self.selectedPicklist().combinedPicklists,
                function (index, currentPicklist) {
                    if (
                        currentPicklist.PicklistId ==
                        self.selectedPicklistLine().PicklistId
                    ) {
                    }
                }
            );
        }*/

        var jsonObj = {
            Scanning_GenericInterfaceClass: {
                GUID: self.guid(),
                ActionType: 6,
                Picklist:
                    self.globalPickingType() == "regular"
                        ? self.selectedPicklist().PicklistId
                        : self.selectedPicklistLine().PicklistId,
                PicklistLine: self.selectedPicklistLine().PicklistLineId,
                WarehouseID: self.warehouseId(),
                ValueToValidate: self.pickingBarcode(),
                UserId: self.username(),
                ScannedValueType: "PB",
            },
        };

        if (self.usePredefinedCarriers() == "true") {
            jsonObj = {
                Scanning_GenericInterfaceClass: {
                    GUID: self.guid(),
                    ActionType: 6,
                    Picklist:
                        self.globalPickingType() == "regular"
                            ? self.selectedPicklist().PicklistId
                            : self.selectedPicklistLine().PicklistId,
                    PicklistLine: self.selectedPicklistLine().PicklistLineId,
                    WarehouseID: self.warehouseId(),
                    ValueToValidate: self.pickingBarcode(),
                    UserId: self.username(),
                    ScannedValueType: "PB",
                },
            };

            jsonObj = JSON.stringify(jsonObj);

            $.ajax({
                type: "PUT",
                url:
                    WS_ROOT +
                    WS.SCANNING_GENERIC_PUT +
                    "?UserID=" +
                    self.username() +
                    "&ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode,
                data: jsonObj,
                contentType: "application/json; charset=utf-8",
                dataType: "text",
            })
                .done(function (data) {
                    self.showLoader(false);
                    self.barcodeToConfirm(self.pickingBarcode());
                    self.pickedWithBarcode(true);
                    self.pickedManually(false);

                    if (self.globalPickingType() == "pickToCart") {
                        $.each(
                            self.selectedPicklist().combinedPicklists,
                            function (index, currentPicklist) {
                                if (
                                    currentPicklist.PicklistId ==
                                    self.selectedPicklistLine().PicklistId
                                ) {
                                    self.selectedPicklist().DefaultPickedQuantity =
                                        self.selectedPicklist().combinedPicklists[
                                            index
                                        ].DefaultPickedQuantity;
                                }
                            }
                        );
                    }

                    if (
                        self.selectedPicklist().DefaultPickedQuantity === "true"
                    ) {
                        self.selectedPicklistLine().QuantityPicked(
                            parseFloat(
                                self.selectedPicklistLine().QuantityToPick()
                            ) -
                                parseFloat(
                                    self.selectedPicklistLine()
                                        .QuantityPickedInitial
                                )
                        );
                    }

                    if (
                        self.selectedPicklist().DefaultPickedQuantity ===
                            "true" &&
                        self.selectedPicklistLine().QuantityPicked() ==
                            self.selectedPicklistLine().QuantityToPick() -
                                self.selectedPicklistLine()
                                    .QuantityPickedInitial
                    ) {
                        self.selectedPicklistLine().FullyPickedObservable(true);
                    }

                    if (
                        self.selectedPicklistLine().IsVariableWeightProduct ==
                        "true"
                    ) {
                        if (
                            self.selectedPicklist().DefaultPickedQuantity ===
                                "true" &&
                            self.selectedPicklistLine().QuantityPicked2() ==
                                self.selectedPicklistLine().QuantityToPick2() -
                                    self.selectedPicklistLine()
                                        .QuantityPickedInitial2
                        ) {
                            self.selectedPicklistLine().FullyPickedObservable(
                                true
                            );
                        }
                    }

                    if(self.globalPickingType() == "pickToCart" 
                        && self.skipScreenConfirmQuantity() === "true")
                    {
                        if (self.usePredefinedCarriers() == "true") {
                            self.cartLocationShow(self.selectedPicklistLine().CartLocation);
                        }
                        self.pickingTUID("")
                        self.page("validateTUID")
                        setTimeout(function () {
                            $("#pickingTUID").focus();
                        }, 250)
                    }else{
                        self.page("pickenAddAmount");
                    }
                    setTimeout(function () {
                        $(".QuantityPicked").focus();
                    }, 250);
                    console.log("OK");
                })
                .error(function (xhr, status, error) {
                    //self.showFinalBottomButtons(true);
                    self.showLoader(false);
                    if (xhr.responseText) {
                        var message = JSON.parse(xhr.responseText).message;
                        if (message.indexOf("Bezig") > -1) {
                            message.substr(0, message.lastIndexOf("Bezig"));
                            var message = message.substring(
                                0,
                                message.indexOf("Bezig")
                            );
                        }
                        if (message.indexOf("Busy") > -1) {
                            message.substr(0, message.lastIndexOf("Busy"));
                            var message = message.substring(
                                0,
                                message.indexOf("Busy")
                            );
                        }
                        self.errorMessage(message);
                        self.hideErrorMessage(3000);
                    }
                })
                .always(function () {
                    self.showLoader(false);
                });
        } else {
            jsonObj = JSON.stringify(jsonObj);

            //PUT on the generic scanning PUT service. Request to update the timestamp, using value 1 for ActionType.
            $.ajax({
                type: "PUT",
                url:
                    WS_ROOT +
                    WS.SCANNING_GENERIC_PUT +
                    "?UserID=" +
                    self.username() +
                    "&ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode,
                data: jsonObj,
                contentType: "application/json; charset=utf-8",
                dataType: "text",
            })
                .done(function (data) {
                    self.showLoader(false);
                    self.barcodeToConfirm(self.pickingBarcode());
                    self.pickedWithBarcode(true);
                    self.pickedManually(false);

                    if (self.globalPickingType() == "pickToCart") {
                        $.each(
                            self.selectedPicklist().combinedPicklists,
                            function (index, currentPicklist) {
                                if (
                                    currentPicklist.PicklistId ==
                                    self.selectedPicklistLine().PicklistId
                                ) {
                                    self.selectedPicklist().DefaultPickedQuantity =
                                        self.selectedPicklist().combinedPicklists[
                                            index
                                        ].DefaultPickedQuantity;
                                }
                            }
                        );
                    }

                    if (
                        self.selectedPicklist().DefaultPickedQuantity === "true"
                    ) {
                        self.selectedPicklistLine().QuantityPicked(
                            parseFloat(
                                self.selectedPicklistLine().QuantityToPick()
                            ) -
                                parseFloat(
                                    self.selectedPicklistLine()
                                        .QuantityPickedInitial
                                )
                        );
                    }

                    if (
                        self.selectedPicklist().DefaultPickedQuantity ===
                            "true" &&
                        self.selectedPicklistLine().QuantityPicked() ==
                            self.selectedPicklistLine().QuantityToPick() -
                                self.selectedPicklistLine()
                                    .QuantityPickedInitial
                    ) {
                        self.selectedPicklistLine().FullyPickedObservable(true);
                    }

                    if (
                        self.selectedPicklistLine().IsVariableWeightProduct ==
                        "true"
                    ) {
                        if (
                            self.selectedPicklist().DefaultPickedQuantity ===
                                "true" &&
                            self.selectedPicklistLine().QuantityPicked2() ==
                                self.selectedPicklistLine().QuantityToPick2() -
                                    self.selectedPicklistLine()
                                        .QuantityPickedInitial2
                        ) {
                            self.selectedPicklistLine().FullyPickedObservable(
                                true
                            );
                        }
                    }

                    if(self.globalPickingType() == "pickToCart" 
                        && self.skipScreenConfirmQuantity() === "true")
                    {
                        if (self.usePredefinedCarriers() == "true") {
                            self.cartLocationShow(self.selectedPicklistLine().CartLocation);
                        }
                        self.pickingTUID("")
                        self.page("validateTUID")
                        setTimeout(function () {
                            $("#pickingTUID").focus();
                        }, 250)
                    }else{
                        self.page("pickenAddAmount");
                    }
      
                    setTimeout(function () {
                        $(".QuantityPicked").focus();
                    }, 250);
                    console.log("OK");
                })
                .error(function (xhr, status, error) {
                    //self.showFinalBottomButtons(true);
                    self.pickingBarcode("");
                    self.showLoader(false);
                    if (xhr.responseText) {
                        var message = JSON.parse(xhr.responseText).message;
                        if (message.indexOf("Bezig") > -1) {
                            message.substr(0, message.lastIndexOf("Bezig"));
                            var message = message.substring(
                                0,
                                message.indexOf("Bezig")
                            );
                        }
                        if (message.indexOf("Busy") > -1) {
                            message.substr(0, message.lastIndexOf("Busy"));
                            var message = message.substring(
                                0,
                                message.indexOf("Busy")
                            );
                        }
                        self.errorMessage(message);
                        self.hideErrorMessage(3000);
                    }
                })
                .always(function () {
                    self.showLoader(false);
                });
        }
    };

    /*self.getPickenScanBarcode = function () {
        console.log(self.multiBarcodes());
        if (self.multiBarcodes() == "") {
            if (self.Lang() == "EN") self.errorMessage("Incorrect barcode.");
            else self.errorMessage("Incorrecte barcode.");
            self.hideErrorMessage();
            self.pickingBarcode("");
        } else {
            if (
                self.multiBarcodes() &&
                self.multiBarcodes() != "" &&
                self.multiBarcodes().includes(self.pickingBarcode())
            ) {
                self.barcodeToConfirm(self.pickingBarcode());
                self.pickedWithBarcode(true);
                self.pickedManually(false);

                var show_tu_id_scan = false;
                if (self.globalPickingType() == "pickToCart") {
                    $.each(
                        self.selectedPicklist().combinedPicklists,
                        function (index, currentPicklist) {
                            if (
                                currentPicklist.PicklistId ==
                                self.selectedPicklistLine().PicklistId
                            ) {
                                if (
                                    currentPicklist.OpenCarrierPresent ==
                                    "false"
                                ) {
                                    show_tu_id_scan = true;
                                }
                            }
                        }
                    );
                }

                if (show_tu_id_scan) {
                    console.log("NEED TO SHOW TU ID VALIDATOR");
                    self.validateFrom("confirm_product");
                    self.pickingTUID("");
                    self.currentTUID("");
                    self.page("validateTUID");
                    setTimeout(function () {
                        $("#pickingTUID").focus();
                    }, 250);
                } else {
                    if (
                        self.selectedPicklist().DefaultPickedQuantity ===
                            "true" &&
                        self.selectedPicklistLine().QuantityPicked() ==
                            self.selectedPicklistLine().QuantityToPick() -
                                self.selectedPicklistLine()
                                    .QuantityPickedInitial
                    ) {
                        self.selectedPicklistLine().FullyPickedObservable(true);
                    }

                    if (
                        self.selectedPicklistLine().IsVariableWeightProduct ==
                        "true"
                    ) {
                        if (
                            self.selectedPicklist().DefaultPickedQuantity ===
                                "true" &&
                            self.selectedPicklistLine().QuantityPicked2() ==
                                self.selectedPicklistLine().QuantityToPick2() -
                                    self.selectedPicklistLine()
                                        .QuantityPickedInitial2
                        ) {
                            self.selectedPicklistLine().FullyPickedObservable(
                                true
                            );
                        }
                    }

                    self.page("pickenAddAmount");
                    setTimeout(function () {
                        $(".QuantityPicked").focus();
                    }, 250);
                    console.log("OK");
                }
            } else {
                if (self.Lang() == "EN")
                    self.errorMessage("Incorrect barcode.");
                else self.errorMessage("Incorrecte barcode.");
                self.hideErrorMessage();
                self.pickingBarcode("");
            }
        }
    };*/

    self.nextPallet = function () {
        self.currentPallet("");
        self.scanInbound("");
        self.productInbound("");
        self.showStartInbound(false);
        self.brokenProduct(false);
        self.twoInboundLines(false);
        $("#inboundPalletId").prop("readonly", false);
        self.goToPage("inboundScanning");
    };

    self.palletReadySP = function () {
        self.showLoader(true);
        var guid = self.guid();
        var jsonObj = {
            Interface_InboundScanning_GenericActionSortedPalle: {
                GUID: guid,
                SortedPalletId: self.scanInbound(),
                ActionType: "RFC",
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_Generic_InboundScanner +
                "?GUID=" +
                guid +
                "&UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                self.resetInbound(true);
                self.goToPage("inboundScanning");
            })
            .error(function (xhr, status, error) {
                console.log("Product moved error");
                //self.showFinalBottomButtons(true);
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                //console.log('Product moved always');
                self.showLoader(false);
            });
    };

    self.palletNotReadySP = function () {
        self.showLoader(true);
        var guid = self.guid();
        var jsonObj = {
            Interface_InboundScanning_GenericActionSortedPalle: {
                GUID: guid,
                SortedPalletId: self.scanInbound(),
                ActionType: "NRFC",
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_Generic_InboundScanner +
                "?GUID=" +
                guid +
                "&UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                self.resetInbound(true);
                self.goToPage("inboundScanning");
            })
            .error(function (xhr, status, error) {
                console.log("Product moved error");
                //self.showFinalBottomButtons(true);
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                //console.log('Product moved always');
                self.showLoader(false);
            });
    };

    self.reprintLabel = function () {
        self.showLoader(true);
        var guid = self.guid();
        var jsonObj = {
            Interface_InboundScanning_GenericActionSortedPalle: {
                GUID: guid,
                SortedPalletId: self.scanInbound(),
                ActionType: "RSPS",
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_Generic_InboundScanner +
                "?GUID=" +
                guid +
                "&UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                //self.resetInbound();
                //self.goToPage('inboundScanning');
                self.successMessage(true);
                if (self.Lang() == "EN")
                    self.errorMessage("The label was reprinted.");
                else self.errorMessage("Label is opnieuw afgedrukt.");

                self.hideErrorMessage(3000);
            })
            .error(function (xhr, status, error) {
                console.log("Product moved error");
                //self.showFinalBottomButtons(true);
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                //console.log('Product moved always');
                self.showLoader(false);
            });
    };

    self.palletReady = function () {
        if ($("#inboundProductQty").val() == "") {
            if (self.Lang() == "EN")
                self.errorMessage("Please enter quantity.");
            else self.errorMessage("Please enter quantity.");

            setTimeout(function () {
                $("#inboundProductQty").focus();
            }, 250);

            self.hideErrorMessage(3000);
            return;
        }

        if ($("#inboundProductQty").val() <= 0) {
            if (self.Lang() == "EN") self.errorMessage("Invalid quantity.");
            else self.errorMessage("Invalid quantity.");

            setTimeout(function () {
                $("#inboundProductQty").focus();
            }, 250);

            self.hideErrorMessage(3000);
            return;
        }

        self.showLoader(true);
        var guid = self.guid();
        var jsonObj = {
            InboundScanning_ProductMovement: {
                GUID: guid,
                SortedPalletId: self.scanMoveInbound(),
                IsReadyForChecking: true,
                ProductBarcode: self.currentProductBarcodeInbound(),
                QuantityReceived: self.productInboundQty(),
                ListOpenSortedPalletsId: self.currentSearchOpenPalletId(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_ProductMoved +
                "?GUID=" +
                guid +
                "&UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                self.resetInbound();
                self.goToPage("inboundScanningProduct");
            })
            .error(function (xhr, status, error) {
                console.log("Product moved error");
                //self.showFinalBottomButtons(true);
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                //console.log('Product moved always');
                self.showLoader(false);
            });
    };

    self.printPallet = function () {
        self.showLoader(true);
        var guid = self.guid();
        var jsonObj = {
            SortedPalletDetails: {
                GUID: guid,
                InboundId: self.inboundId(),
                InboundLine: self.currentInboundLine(),
                ProductId: self.currentProductIdInbound(),
                WarehouseCode: self.warehouseId(),
                ProductDescription: self.currentProductDescriptionInboundSend(),
                ProductBarcode: self.currentProductBarcodeInbound(),
                UserId: self.username(),
                CompanyCode: self.CompanyCode,
                SupplierCode: self.supplierName(),
                IsBrokenProduct: self.brokenProduct(),
                GoodReceiptPallet: self.scanInbound(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_CREATE_SORTED_PALLET +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserId=" +
                self.username(),
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                //store the movement info
                console.log(data);

                if (data && data.SortedPalletDetails) {
                    if (data.SortedPalletDetails.InboundLinesFound > 1) {
                        self.twoInboundLines(true);
                    } else self.twoInboundLines(false);

                    /*
                    var qtyExpected = 0;
                    var totalAmount = 0;

                    if (
                        data.SortedPalletDetails.QuantityExpected instanceof
                        Array
                    ) {
                        $.each(
                            data.SortedPalletDetails.QuantityExpected,
                            function (index, value) {
                                qtyExpected += parseInt(value);
                            }
                        );
                    } else {
                        qtyExpected = data.SortedPalletDetails.QuantityExpected;
                    }

                    $.getJSON(
                        WS_ROOT +
                            WS.GET_SortedPalletList +
                            "?ConcernCode=" +
                            self.ConcernCode +
                            "&InboundId=" +
                            self.inboundId() +
                            "&ProductBarcode=" +
                            self.currentProductBarcodeInbound() +
                            "&WarehouseCode=" +
                            self.warehouseId(),
                        function (data) {
                            console.log("Sorted Pallet List:");
                            console.log(data);

                            if (
                                data &&
                                data.SortedPalletList &&
                                data.SortedPalletList.SortedPallet
                            ) {
                                $.each(
                                    data.SortedPalletList.SortedPallet,
                                    function (index, value) {
                                        console.log(value.TotalAmountReceived);
                                        totalAmount += parseInt(
                                            value.TotalAmountReceived
                                        );
                                    }
                                );
                            }
                            self.expectedReceived(
                                parseInt(qtyExpected) +
                                    " / " +
                                    parseInt(totalAmount)
                            );
                            self.showExpected(true);
                        }
                    );*/

                    self.currentSortedPallet(
                        data.SortedPalletDetails.SortedPallet
                    );
                    self.currentSortedPalletId(
                        data.SortedPalletDetails.SortedPalletId
                    );
                    self.currentDestination(
                        data.SortedPalletDetails.DefaultDestination
                    );
                }
                self.scanMoveInbound("");
                self.showFinalBottomButtons1(false);
                self.showFinalBottomButtons2(false);
                self.productWasMoved(false);
                self.palletReadyForChecking(false);
                self.goToPage("inboundScanningMoveProduct");
            })
            .error(function (xhr, status, error) {
                console.log("bbb");
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.goToInboundScanningMove = function () {
        self.scanMoveInbound("");
        self.showFinalBottomButtons1(false);
        self.showFinalBottomButtons2(false);
        self.productWasMoved(false);
        self.palletReadyForChecking(false);
        self.goToPage("inboundScanningMoveProduct");
    };

    self.resetInbound = function (all) {
        self.showStartInbound(false);
        self.productInbound("");
        self.productInboundQty("");
        self.showBroken(true);
        self.brokenProduct(false);
        self.twoInboundLines(false);
        if (all == true) self.scanInbound("");

        self.showProductScan(false);
        self.showQtyScan(false);
        self.showProductNewPallet(false);
        self.showMoveProductButton(false);
        self.showProductNewPallet(false);
        self.showMoveProductButton(false);
        self.showNextPallet(true);
        self.moveLastPage(false);
        self.showExpected(false);
        self.currentAmountInbound("");
        self.productInboundQty("");
        self.currentNewPalletTotal("");
    };

    self.goToInboundScanning = function () {
        if ($("#inboundProductQty").val() == "") {
            if (self.Lang() == "EN")
                self.errorMessage("Please enter quantity.");
            else self.errorMessage("Please enter quantity.");

            self.hideErrorMessage(3000);

            setTimeout(function () {
                $("#inboundProductQty").focus();
            }, 250);

            return;
        }

        if ($("#inboundProductQty").val() <= 0) {
            if (self.Lang() == "EN") self.errorMessage("Invalid quantity.");
            else self.errorMessage("Invalid quantity.");

            self.hideErrorMessage(3000);

            setTimeout(function () {
                $("#inboundProductQty").focus();
            }, 250);

            return;
        }

        self.showLoader(true);
        var guid = self.guid();
        var jsonObj = {
            InboundScanning_ProductMovement: {
                SortedPalletId: self.scanMoveInbound(),
                IsReadyForChecking: false,
                ProductBarcode: self.currentProductBarcodeInbound(),
                QuantityReceived: self.productInboundQty(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_ProductMoved +
                "?GUID=" +
                guid +
                "&UserID=" +
                self.username() +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                self.resetInbound();
                self.goToPage("inboundScanningProduct");
            })
            .error(function (xhr, status, error) {
                console.log("Product moved error");
                //self.showFinalBottomButtons(true);
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                //console.log('Product moved always');
                self.showLoader(false);
            });
    };

    self.okCounting = function () {
        if (
            self.individualCartons() > 0 ||
            self.cartonsPerLayer() > 0 ||
            self.layers() > 0
        ) {
            if (self.unitsPerCarton() == "" || self.unitsPerCarton() == "0") {
                if (self.Lang() == "EN")
                    self.errorMessage(
                        "Unit per carton should be bigger than 0."
                    );
                else self.errorMessage("Geef aantal units per doos in.");

                self.hideErrorMessage(3000);
                return;
            }
        }

        self.showLoader(true);
        var guid = self.guid();
        var jsonObj = {
            Interface_InboundScanning_CountingAssistant: {
                SortedPalletId: self.scanMoveInbound(),
                ProductBarcode: self.currentProductBarcodeInbound(),
                InboundId: self.inboundId(),
                UnitsPerCarton: self.unitsPerCarton(),
                CartonsPerLayer: self.cartonsPerLayer(),
                Layers: self.layers(),
                IndividualUnits: self.individualUnits(),
                IndividualCartons: self.individualCartons(),
                TotalUnits: self.totalUnits(),
                TotalCartons: self.totalCartons(),
                IsCountingAssistantCleared: false,
                Type: "S",
                isAmountChanged: false,
                ProductId: self.currentProductIdInbound(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_CountingAssistant +
                "?GUID=" +
                guid +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&SortedPalletId=" +
                self.scanMoveInbound() +
                "&ProductBarcode=" +
                self.currentProductBarcodeInbound() +
                "&UserID=" +
                self.username(),
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                console.log(data);
                self.productInboundQty(parseInt(self.totalUnits()));
                self.calcAmount();
                self.goToPage("inboundScanningMoveProduct");
                setTimeout(function () {
                    $("#inboundProductQty").focus();
                }, 250);
            })
            .error(function (xhr, status, error) {
                console.log("Product moved error");
                //self.showFinalBottomButtons(true);
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                //console.log('Product moved always');
                self.showLoader(false);
            });
    };

    self.cancelCounting = function () {
        self.showLoader(true);
        var guid = self.guid();
        var jsonObj = {
            Interface_InboundScanning_CountingAssistant: {
                SortedPalletId: self.scanMoveInbound(),
                ProductBarcode: self.currentProductBarcodeInbound(),
                InboundId: self.inboundId(),
                UnitsPerCarton: self.unitsPerCarton(),
                CartonsPerLayer: self.cartonsPerLayer(),
                Layers: self.layers(),
                IndividualUnits: self.individualUnits(),
                IndividualCartons: self.individualCartons(),
                TotalUnits: self.totalUnits(),
                TotalCartons: self.totalCartons(),
                IsCountingAssistantCleared: true,
                Type: "S",
                isAmountChanged: false,
                ProductId: self.currentProductIdInbound(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_CountingAssistant +
                "?GUID=" +
                guid +
                "&ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&SortedPalletId=" +
                self.scanMoveInbound() +
                "&ProductBarcode=" +
                self.currentProductBarcodeInbound() +
                "&UserID=" +
                self.username(),
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                self.unitsPerCarton("0");
                self.cartonsPerLayer("0");
                self.layers("1");
                self.individualCartons("0");
                self.individualUnits("0");
                self.totalCartons("0");
                self.totalUnits("0");
            })
            .error(function (xhr, status, error) {
                console.log("Product moved error");
                //self.showFinalBottomButtons(true);
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                //console.log('Product moved always');
                self.showLoader(false);
            });
    };

    self.confirmWarningUnfinishedProcessPickingCancel = function (button) {
        if (button === "warningUnfinished_No") {
            self.page(self.previousPage());
        } else if (button === "warningUnfinished_Yes") {
            self.cancelPickingLine();
        }
    };

    self.confirmWarningUnfinishedProcessInboundCancel = function (button) {
        if (button === "warningUnfinished_No") {
            self.page(self.previousPage());
        } else if (button === "warningUnfinished_Yes") {
            self.productInbound("");
            self.showProductScan(false);
            self.showExpected(false);
            self.showMoveProductButton(false);
            self.showBroken(true);
            self.brokenProduct(false);
            self.twoInboundLines(false);
            self.showNextPallet(true);
            self.showProductNewPallet(false);
            self.moveLastPage(false);
            self.showQtyScan(false);
            self.productInboundQty("");

            self.goToPage("inboundScanningProduct");
        }
    };

    self.confirmWarningUnfinishedProcessInbound = function (button) {
        if (button === "warningUnfinished_No") {
            self.page(self.previousPage());
        } else if (button === "warningUnfinished_Yes") {
            self.resetInbound(true);
            self.scanInbound("");
            self.currentPallet("");
            self.moveLastPage(false);
            self.expectedReceived(false);
            self.inboundId("");
            $("#inboundProductId").prop("readonly", false);
            $("#inboundPalletId").prop("readonly", false);

            setTimeout(function () {
                $("#inboundPalletId").focus();
            }, 250);

            if (self.previousPage() == "inboundScanning") {
                self.page("menu");
            } else {
                self.page("inboundScanning");
            }
        }
    };

    // PALLET EN LOCATIE MODULE
    self.getPalletEnLocatieInfo = function () {
        self.showLoader(true);
        var guid = self.guid();
        var formattedPallet = self.scanPalletEnLocatie().replace("<", "%3C");
        var jsonObj = {
            PalletScanner_PutPalletOrLocationBarcode: {
                _pk_GUID: guid,
                Warehouse: self.warehouseId(),
                ScannedBarcode: self.scanPalletEnLocatie(),
                UserID: self.username(),
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_PALLETORLOCATIE +
                "?ConcernCode=" +
                self.ConcernCode +
                "&_pk_GUID=" +
                guid,
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "json",
        })
            .done(function (data) {
                self.showLoader(false);
                console.log(data);
                self.palletEnLocatieArray.removeAll();

                if (data && data.PalletScanner_PutPalletOrLocationBarcode) {
                    if (
                        data.PalletScanner_PutPalletOrLocationBarcode
                            .IsStockPallet == "true"
                    ) {
                        $.getJSON(
                            WS_ROOT +
                                WS.GET_SINGLEPALLETINFO +
                                "?ConcernCode=" +
                                self.ConcernCode +
                                "&_pk_Magazijn=" +
                                self.warehouseId() +
                                "&PalletID=" +
                                formattedPallet,
                            function (data) {
                                console.log(data);
                                $.each(
                                    data.PalletInformation.Pallet
                                        .PalletScanner_Get_SinglePalletInfo,
                                    function (key, palletInfo) {
                                        self.palletEnLocatieArray.push(
                                            palletInfo
                                        );
                                    }
                                );
                                self.showPalletInfoList(true);
                                self.currentPalletInfo(0);
                                if (
                                    self.palletEnLocatieArray()[
                                        self.currentPalletInfo()
                                    ].AssDerivedVeh != ""
                                ) {
                                    $(".veh").css("visibility", "visible");
                                    $(".vehpeh").css("visibility", "visible");
                                } else {
                                    $(".veh").css("visibility", "hidden");
                                    $(".vehpeh").css("visibility", "hidden");
                                }
                                self.titleForPalletEnLocatie(
                                    "Pallet 1/" +
                                        self.palletEnLocatieArray().length
                                );
                                if (self.palletEnLocatieArray().length == 1)
                                    $(".scanned-pallets-info").css(
                                        "height",
                                        "360px"
                                    );
                                else
                                    $(".scanned-pallets-info").css(
                                        "height",
                                        "320px"
                                    );
                            }
                        );
                    } else if (
                        data.PalletScanner_PutPalletOrLocationBarcode
                            .IsLocation == "true"
                    ) {
                        $.getJSON(
                            WS_ROOT +
                                WS.GET_LOCATIONPALLETINFO +
                                "?ConcernCode=" +
                                self.ConcernCode +
                                "&_pk_Magazijn=" +
                                self.warehouseId() +
                                "&LocationBarcode=" +
                                formattedPallet,
                            function (data) {
                                console.log(data);
                                $.each(
                                    data.PalletInformation.Pallet
                                        .PalletScanner_Get_Location_PalletInfo,
                                    function (key, palletInfo) {
                                        self.palletEnLocatieArray.push(
                                            palletInfo
                                        );
                                    }
                                );
                                self.showPalletInfoList(true);
                                self.currentPalletInfo(0);
                                if (
                                    self.palletEnLocatieArray()[
                                        self.currentPalletInfo()
                                    ].AssDerivedVeh != ""
                                ) {
                                    $(".veh").css("visibility", "visible");
                                    $(".vehpeh").css("visibility", "visible");
                                } else {
                                    $(".veh").css("visibility", "hidden");
                                    $(".vehpeh").css("visibility", "hidden");
                                }
                                self.titleForPalletEnLocatie(
                                    "Pallet 1/" +
                                        self.palletEnLocatieArray().length
                                );
                                if (self.palletEnLocatieArray().length == 1)
                                    $(".scanned-pallets-info").css(
                                        "height",
                                        "360px"
                                    );
                                else
                                    $(".scanned-pallets-info").css(
                                        "height",
                                        "320px"
                                    );
                            }
                        );
                    } else {
                        self.errorMessage(
                            "No pallet or location found. Scan a different barcode."
                        );
                        self.hideErrorMessage(3000);
                        self.scanPalletEnLocatie("");
                    }
                } else {
                    self.errorMessage(
                        "No pallet or location found. Scan a different barcode."
                    );
                    self.hideErrorMessage(3000);
                    self.scanPalletEnLocatie("");
                }
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage();
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };
    self.changeBroken = function () {
        if (self.brokenProduct() == true) self.brokenProduct(false);
        else self.brokenProduct(true);
        //console.log(self.brokenProduct());
    };

    self.brokenProduct.subscribe(function () {
        setTimeout(function () {
            $("#inboundProductId").focus();
        }, 250);
    });

    // MERGE PALLET MODULE

    self.getMergeInfo = function () {
        self.hideErrorMessage(0);
        self.showLoader(true);

        $.getJSON(
            WS_ROOT +
                WS.GET_MERGINGPALLETS +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&LSUOutbound=" +
                self.scanMerge(),
            function (data) {
                console.log(data);

                if (data && data.LSU_Outbound && data.LSU_Outbound.Debtor) {
                    self.showScannedMerge(true);

                    if (self.scannedPalletsList().length == 0) {
                        self.showLoader(true);

                        $.getJSON(
                            WS_ROOT +
                                WS.GET_PalletsForMerge +
                                "?ConcernCode=" +
                                self.ConcernCode +
                                "&CompanyCode=" +
                                self.CompanyCode +
                                "&TransportNumber=" +
                                data.LSU_Outbound.TransportNumber +
                                "&TransportShipment=" +
                                data.LSU_Outbound.TransportShipment,
                            function (data_pallets) {
                                console.log(data_pallets);

                                var ok = false;
                                if (
                                    data_pallets &&
                                    data_pallets.LSU_Outbound &&
                                    data_pallets.LSU_Outbound.PalletID
                                ) {
                                    if (
                                        data_pallets.LSU_Outbound
                                            .PalletID instanceof Array
                                    )
                                        ok = true;
                                }

                                if (!ok) {
                                    if (self.Lang() == "EN")
                                        self.errorMessage(
                                            "There are no outbound pallets to be merged with the scanned one."
                                        );
                                    else
                                        self.errorMessage(
                                            "There are no outbound pallets to be merged with the scanned one."
                                        );
                                    self.hideErrorMessage(3000);
                                    self.showScannedMerge(false);
                                    self.showStartMerge(false);
                                    self.scanMerge("");
                                }
                            }
                        )
                            .done(function () {
                                self.showLoader(false);
                            })
                            .error(function (xhr, status, error) {
                                if (xhr.responseText) {
                                    var message = JSON.parse(
                                        xhr.responseText
                                    ).message;
                                    self.errorMessage(message);
                                    self.hideErrorMessage(3000);
                                }
                            })
                            .always(function () {
                                self.showLoader(false);
                            });
                    }

                    if (self.scannedPalletsList().length > 0) {
                        if (
                            self.initialPalletMergeFull().DeliveryAddress !=
                            data.LSU_Outbound.DeliveryAddress
                        ) {
                            if (self.Lang() == "EN")
                                self.errorMessage(
                                    "Delivery address is different."
                                );
                            else
                                self.errorMessage("Afleveradres is afwijkend.");
                            self.hideErrorMessage(3000);
                            return;
                        } else if (
                            self.initialPalletMergeFull().WarehouseId !=
                            data.LSU_Outbound.WarehouseId
                        ) {
                            if (self.Lang() == "EN")
                                self.errorMessage("Warehouse is different.");
                            else self.errorMessage("Magazijn is afwijkend.");
                            self.hideErrorMessage(3000);
                            return;
                        } else if (
                            self.initialPalletMergeFull().TransportShipment !=
                                data.LSU_Outbound.TransportShipment ||
                            self.initialPalletMergeFull().TransportNumber !=
                                data.LSU_Outbound.TransportNumber
                        ) {
                            if (self.Lang() == "EN")
                                self.errorMessage(
                                    "Transport shipment is different."
                                );
                            else
                                self.errorMessage(
                                    "Transport verzendingen  is afwijkend."
                                );
                            self.hideErrorMessage(3000);
                            return;
                        }
                    }
                    self.initialMergePallet(self.scanMerge());
                    self.initialTransportMerge(
                        data.LSU_Outbound.TransportNumber +
                            "-" +
                            data.LSU_Outbound.TransportShipment
                    );
                    self.initialCustomerMerge(data.LSU_Outbound.Debtor);
                    self.initialPalletMergeFull(data.LSU_Outbound);

                    if (
                        data.LSU_Outbound.PalletHeight > self.maxHeightMerge()
                    ) {
                        self.maxHeightMerge(data.LSU_Outbound.PalletHeight);
                    }

                    if (self.scannedPalletsList().length == 0) {
                        self.currentMergeGUID(self.guid());
                        self.showStartMerge(true);
                    } else {
                        self.mergePalletsStart();
                    }
                } else {
                    if (self.Lang() == "EN")
                        self.errorMessage("Unable to retrieve pallet.");
                    else
                        self.errorMessage(
                            "Niet in staat om de pallet op te halen."
                        );
                    self.hideErrorMessage(3000);
                    self.showStartMerge(false);
                }
            }
        )
            .done(function () {
                self.showLoader(false);
            })
            .error(function (xhr, status, error) {
                self.scanMerge("");

                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.mergePalletsStart = function () {
        self.showLoader(true);

        var palletExists = false;
        $.each(self.scannedPalletsList(), function (index, existingPallet) {
            if (existingPallet == self.initialMergePallet()) {
                palletExists = true;
            }
        });

        if (!palletExists) {
            //var guid = self.guid();
            var jsonObj = {
                Scan_MergingSession: {
                    GUID: self.currentMergeGUID(),
                    TransportNumber:
                        self.initialPalletMergeFull().TransportNumber,
                    TransportShipment:
                        self.initialPalletMergeFull().TransportShipment,
                    DeliveryAddress:
                        self.initialPalletMergeFull().DeliveryAddress,
                    CustomerId: self.initialPalletMergeFull().Debtor,
                    WarehouseId: self.initialPalletMergeFull().WarehouseId,
                    ActionType: "0",
                    PalletIdToCancel: "0",
                    Scan_MergingSession_Pallets: {
                        Scan_MergingSession_Pallet: {
                            GUID: self.currentMergeGUID(),
                            PalletId: self.initialMergePallet(),
                            InitialLocationBarcode:
                                self.initialPalletMergeFull()
                                    .InitialLocationBarcode,
                            ProductionLSUReference:
                                self.initialPalletMergeFull()
                                    .ProductionLSUReference,
                        },
                    },
                },
            };

            jsonObj = JSON.stringify(jsonObj);

            $.ajax({
                type: "PUT",
                url:
                    WS_ROOT +
                    WS.PUT_MERGINGPALLETS +
                    "?ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode +
                    "&UserID=" +
                    self.username() +
                    "&GUID=" +
                    self.currentMergeGUID(),
                data: jsonObj,
                contentType: "application/json; charset=utf-8",
                dataType: "text",
            })
                .done(function (data) {
                    self.showLoader(false);
                    self.scannedPalletsList.push(self.initialMergePallet());
                    self.scanMerge("");

                    setTimeout(function () {
                        $("#mergePalletId").focus();
                    }, 250);
                })
                .error(function (xhr, status, error) {
                    self.showLoader(false);
                    if (xhr.responseText) {
                        var message = JSON.parse(xhr.responseText).message;
                        if (message.indexOf("Bezig") > -1) {
                            message.substr(0, message.lastIndexOf("Bezig"));
                            var message = message.substring(
                                0,
                                message.indexOf("Bezig")
                            );
                        }
                        if (message.indexOf("Busy") > -1) {
                            message.substr(0, message.lastIndexOf("Busy"));
                            var message = message.substring(
                                0,
                                message.indexOf("Busy")
                            );
                        }
                        self.errorMessage(message);
                        self.hideErrorMessage();
                    }
                })
                .always(function () {
                    self.showLoader(false);
                });
        } else {
            if (self.Lang() == "EN")
                self.errorMessage("This pallet has been scanned already.");
            else self.errorMessage("Deze pallet is reeds gescand.");
            self.hideErrorMessage();
        }
    };

    self.mergeCreatePallet = function () {
        self.showLoader(true);
        var jsonObj = {
            Scan_MergingSession: {
                GUID: self.currentMergeGUID(),
                EndLocation: self.targetLocationMerge(),
                PalletHeight: self.palletHeightMerge(),
                PalletType: self.selectedPalletTypeMerge(),
                ActionType: "1",
                TransportNumber: self.initialPalletMergeFull().TransportNumber,
                TransportShipment:
                    self.initialPalletMergeFull().TransportShipment,
                CustomerId: self.initialPalletMergeFull().Debtor,
                DeliveryAddress: self.initialPalletMergeFull().DeliveryAddress,
                WarehouseId: self.initialPalletMergeFull().WarehouseId,
                NewPalletId: "0",
                PalletIdToCancel: "0",
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_MERGINGPALLETS +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserID=" +
                self.username() +
                "&GUID=" +
                self.currentMergeGUID(),
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function (data) {
                self.showLoader(false);
                console.log(data);
                $.getJSON(
                    WS_ROOT +
                        WS.PUT_MERGINGPALLETS +
                        "?ConcernCode=" +
                        self.ConcernCode +
                        "&CompanyCode=" +
                        self.CompanyCode +
                        "&GUID=" +
                        self.currentMergeGUID(),
                    function (data) {
                        console.log(data);
                        self.newPalletId(data.Scan_MergingSession.NewPalletId);
                        self.goToPage("mergePalletsSuccess");
                        self.successMessage(true);
                        if (self.Lang() == "EN")
                            self.errorMessage("Pallet successfully merged.");
                        else self.errorMessage("Pallets samengevoegd.");
                        self.hideErrorMessage();
                    }
                );
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                self.goToPage("mergePalletsFail");
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage();
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.cancelLine = function () {
        self.showLoader(true);

        var jsonObj = {
            Scan_MergingSession: {
                GUID: self.currentMergeGUID(),
                ActionType: "3",
                PalletIdToCancel:
                    self.scannedPalletsList()[
                        self.scannedPalletsList().length - 1
                    ],
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_MERGINGPALLETS +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserID=" +
                self.username() +
                "&GUID=" +
                self.currentMergeGUID(),
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function (data) {
                self.showLoader(false);
                self.scannedPalletsList.pop();
                if (self.scannedPalletsList().length == 0) {
                    self.showScannedMerge(false);
                }
                setTimeout(function () {
                    $("#mergePalletId").focus();
                }, 250);
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage(3000);
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.mergePalletsType = function () {
        $.getJSON(
            WS_ROOT +
                WS.PUT_MERGINGPALLETS +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&GUID=" +
                self.currentMergeGUID(),
            function (data) {
                var defaultType = data.Scan_MergingSession.PalletType;

                self.targetLocationMerge(
                    self.initialPalletMergeFull().InitialLocationBarcode
                );
                //self.palletHeightMerge(self.maxHeightMerge());
                //self.palletHeightMerge(self.initialPalletMergeFull().InitialLocationBarcode);
                $.getJSON(
                    WS_ROOT +
                        WS.GET_PALLETTYPES +
                        "?ConcernCode=" +
                        self.ConcernCode,
                    function (data) {
                        console.log(data);
                        //self.palletTypeDescriptions(data.PalletSoort.Description);
                        //self.palletTypeValues(data.PalletSoort.PalletSoort);
                        $.each(
                            data.PalletSoort.Description,
                            function (key, palletSoort) {
                                if (data.PalletSoort.PalletSoort[key] == "E")
                                    self.palletHeightMerge(
                                        data.PalletSoort.DefaultHeight[key]
                                    );

                                if (
                                    self.LOECodeOutbound() == 1 ||
                                    (self.LOECodeOutbound() == 2 &&
                                        data.PalletSoort.LSUOutboundType[key] ==
                                            "") ||
                                    (self.LOECodeOutbound() == 3 &&
                                        data.PalletSoort.LSUOutboundType[key] ==
                                            "D")
                                ) {
                                    self.palletTypeDescriptions.push({
                                        name:
                                            data.PalletSoort.PalletSoort[key] +
                                            " - " +
                                            palletSoort,
                                        id: data.PalletSoort.PalletSoort[key],
                                        defaultHeight:
                                            data.PalletSoort.DefaultHeight[key],
                                    });
                                }
                            }
                        );
                        var element =
                            document.getElementById("selectPalletTypes");
                        if (defaultType == "") {
                            element.value = "E";
                            self.selectedPalletTypeMerge("E");
                        } else {
                            element.value = defaultType;
                            self.selectedPalletTypeMerge(defaultType);
                        }

                        self.goToPage("mergePalletsType");
                    }
                );
            }
        );
    };

    self.mergePalletsCancel = function () {
        self.showLoader(true);

        var jsonObj = {
            Scan_MergingSession: {
                GUID: self.currentMergeGUID(),
                ActionType: "2",
                PalletIdToCancel: "0",
            },
        };

        jsonObj = JSON.stringify(jsonObj);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_MERGINGPALLETS +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserID=" +
                self.username() +
                "&GUID=" +
                self.currentMergeGUID(),
            data: jsonObj,
            contentType: "application/json; charset=utf-8",
            dataType: "text",
        })
            .done(function (data) {
                self.showLoader(false);
                console.log(data);
                self.mergePalletsReset("");
            })
            .error(function (xhr, status, error) {
                self.showLoader(false);
                self.mergePalletsReset("");
                if (xhr.responseText) {
                    var message = JSON.parse(xhr.responseText).message;
                    if (message.indexOf("Bezig") > -1) {
                        message.substr(0, message.lastIndexOf("Bezig"));
                        var message = message.substring(
                            0,
                            message.indexOf("Bezig")
                        );
                    }
                    if (message.indexOf("Busy") > -1) {
                        message.substr(0, message.lastIndexOf("Busy"));
                        var message = message.substring(
                            0,
                            message.indexOf("Busy")
                        );
                    }
                    self.errorMessage(message);
                    self.hideErrorMessage();
                }
            })
            .always(function () {
                self.showLoader(false);
            });
    };

    self.mergePalletsReset = function (option) {
        self.successMessage(false);
        self.scanMerge("");
        self.initialMergePallet("");
        self.initialTransportMerge("");
        self.initialCustomerMerge("");
        self.showStartMerge(false);
        self.initialPalletMergeFull("");
        self.scannedPalletsList.removeAll();
        self.showScannedMerge(false);
        self.targetLocationMerge("");
        self.palletTypeMerge("");
        self.palletHeightMerge("");
        self.maxHeightMerge(0);
        self.palletTypeDescriptions.removeAll();
        self.palletTypeValues.removeAll();
        self.selectedPalletTypeMerge("E");
        self.currentMergeGUID("");
        self.newPalletId("");
        if (option == "openMenu") self.openMenu();
        else self.goToPage("mergePallets");
    };

    self.goToNextPallet = function () {
        $(".list-" + self.currentPalletInfo()).hide();
        if (
            self.currentPalletInfo() + 1 ==
            self.palletEnLocatieArray().length
        ) {
            self.currentPalletInfo(0);
        } else self.currentPalletInfo(self.currentPalletInfo() + 1);
        $(".list-" + self.currentPalletInfo()).show();
        if (
            self.palletEnLocatieArray()[self.currentPalletInfo()]
                .AssDerivedVeh != ""
        ) {
            $(".veh").css("visibility", "visible");
            $(".vehpeh").css("visibility", "visible");
        } else {
            $(".veh").css("visibility", "hidden");
            $(".vehpeh").css("visibility", "hidden");
        }
        self.titleForPalletEnLocatie(
            "Pallet " +
                (self.currentPalletInfo() + 1) +
                "/" +
                self.palletEnLocatieArray().length
        );
    };

    self.goToPrevPallet = function () {
        $(".list-" + self.currentPalletInfo()).hide();
        if (self.currentPalletInfo() - 1 < 0) {
            self.currentPalletInfo(self.palletEnLocatieArray().length - 1);
        } else self.currentPalletInfo(self.currentPalletInfo() - 1);
        $(".list-" + self.currentPalletInfo()).show();
        if (
            self.palletEnLocatieArray()[self.currentPalletInfo()]
                .AssDerivedVeh != ""
        ) {
            $(".veh").css("visibility", "visible");
            $(".vehpeh").css("visibility", "visible");
        } else {
            $(".veh").css("visibility", "hidden");
            $(".vehpeh").css("visibility", "hidden");
        }
        self.titleForPalletEnLocatie(
            "Pallet " +
                (self.currentPalletInfo() + 1) +
                "/" +
                self.palletEnLocatieArray().length
        );
    };

    self.updatePalletHeight = function () {
        //console.log($("#selectPalletTypes").prop('selectedIndex'));
        self.palletHeightMerge(
            self.palletTypeDescriptions()[
                $("#selectPalletTypes").prop("selectedIndex")
            ].defaultHeight
        );
    };

    self.emptyZero = function (element) {
        if ($("#" + element).val() == "0") $("#" + element).val("");

        if (element == "layers") {
            if ($("#" + element).val() == "1") $("#" + element).val("");
        }
    };

    self.calcCountingAssistant = function (data, event) {
        self.unitsPerCarton(parseInt(self.unitsPerCarton()));
        if (isNaN(self.unitsPerCarton())) self.unitsPerCarton("");

        self.cartonsPerLayer(parseInt(self.cartonsPerLayer()));
        if (isNaN(self.cartonsPerLayer())) self.cartonsPerLayer("");

        self.layers(parseInt(self.layers()));
        if (isNaN(self.layers())) self.layers("");

        self.individualCartons(parseInt(self.individualCartons()));
        if (isNaN(self.individualCartons())) self.individualCartons("");

        self.individualUnits(parseInt(self.individualUnits()));
        if (isNaN(self.individualUnits())) self.individualUnits("");

        self.totalCartons(
            parseInt(self.cartonsPerLayer()) * parseInt(self.layers()) +
                parseInt(self.individualCartons())
        );
        self.totalUnits(
            parseInt(self.totalCartons()) * parseInt(self.unitsPerCarton()) +
                parseInt(self.individualUnits())
        );
        if (isNaN(self.totalCartons())) {
            self.totalCartons("");
        }
        if (isNaN(self.totalUnits())) {
            self.totalUnits("");
        }
    };

    self.ensureNumberical = function (data, e) {
        var keyValue = e.key;

        // if is ENTER focus next input
        if (e.which === 13 && e.target.value !== "") {
            var nextInput = "counting-assistant-ok";

            switch (e.target.getAttribute("id")) {
                case "unitsPerCarton": {
                    nextInput = "cartonsPerLayer";
                    break;
                }
                case "cartonsPerLayer": {
                    nextInput = "layers";
                    break;
                }
                case "layers": {
                    nextInput = "individualCartons";
                    break;
                }
                case "individualCartons": {
                    nextInput = "individualUnits";
                    break;
                }
                case "individualUnits": {
                    nextInput = "counting-assistant-ok";
                    break;
                }
            }
            e.preventDefault();
            e.stopPropagation();
            document.getElementById(nextInput).focus();
        }

        if (keyValue.match(/[0-9]/g)) {
            return true;
        }
        return false;
    };
    /*if(localStorage.getItem('page') != '')
  {
    self.loggedIn(localStorage.getItem('loggedIn'));
    self.warehouseId(localStorage.getItem('warehouseId'));
    self.canChangeEnvironment(localStorage.getItem('canChangeEnvironment'));
    self.Lang(localStorage.getItem('Lang'));
    self.page(localStorage.getItem('page'));
    self.goToPage(localStorage.getItem('page'));
  }*/
    //self.loggedIn('aaa');
    //self.page('inboundScanningMoveProduct');
    //self.showFinalBottomButtons1(true);
    //self.showFinalBottomButtons2(true);

    self.openReplenishmentActions = function () {
        self.opiateClass("");
        self.successMessage(false);
        self.errorMessage(null);
        self.page("replenishmentActions");
        self.goToReplenishmentActionStep2();
    };

    self.refreshReplenishActions = function () {
        self.goToReplenishmentActionStep2();
    };

    self.goToReplenishmentActionStep2 = function () {
        self.actionIsCanceled(false);
        self.replenishmentActionIsNotAnymoreValid(false);
        self.replenishmentActions([]);
        self.replenishmentActions(null);
        self.showLoader(true);
        self.processedActions.removeAll();

        $.when(
            $.getJSON(
                WS_ROOT +
                    WS.GET_REPLENISHMENT_ACTIONS +
                    "?ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode +
                    "&User=" +
                    self.loggedIn() +
                    "&Warehouse=" +
                    self.warehouseId() +
                    "&ActionIsFinalized=false",
                function (data) {
                    //console.log("Data: " + data.ReplenishmentActions);
                    var allowedSections = [];
                    var actions = [];
                    var replenishData = data && data.ReplenishmentActions;
                    if (
                        replenishData &&
                        replenishData.AllowedSectionsForScanner
                    ) {
                        allowedSections =
                            replenishData.AllowedSectionsForScanner || [];
                        if (!$.isArray(allowedSections)) {
                            allowedSections = [allowedSections];
                        }
                        allowedSections = allowedSections
                            .filter(function (section) {
                                return (section.UserID = self.loggedIn());
                            })
                            .map(function (section) {
                                return section.Section;
                            });

                        actions = replenishData.AllowedSectionsForScanner;
                        //console.log("Actions: " + actions);
                        if (!$.isArray(actions)) {
                            actions = [actions];
                        }
                        console.log(actions);
                        var allActions = [];
                        actions.forEach(function (action) {
                            if (
                                action &&
                                action.ScanData_PickReplenishmentActions
                            ) {
                                if (
                                    !$.isArray(
                                        action.ScanData_PickReplenishmentActions
                                    )
                                ) {
                                    action.ScanData_PickReplenishmentActions = [
                                        action.ScanData_PickReplenishmentActions,
                                    ];
                                }

                                action.ScanData_PickReplenishmentActions.forEach(
                                    function (act) {
                                        allActions.push(act);
                                    }
                                );
                            }
                        });
                        console.log(allActions);

                        actions = allActions;
                        // Filter action by actionFinalized, user and allowed Sections
                        actions = actions.filter(function (action) {
                            return (
                                action.LastActionPerformed != "4" &&
                                action.LastActionPerformed != "5" &&
                                (action.User.toLowerCase().trim() ===
                                    self.loggedIn().toLowerCase().trim() ||
                                    action.User === "")
                            );
                        });
                        // sort by UserId and addTime asc

                        if (
                            !$.isArray(replenishData.AllowedSectionsForScanner)
                        ) {
                            self.replenishmentOrder(
                                replenishData.AllowedSectionsForScanner
                                    .ReplenishmentOrder
                            );
                        } else {
                            self.replenishmentOrder(
                                replenishData.AllowedSectionsForScanner[0]
                                    .ReplenishmentOrder
                            );
                        }

                        if (self.replenishmentOrder() == 1) {
                            actions.sort(function (action1, action2) {
                                if (
                                    action1.User.toLowerCase() ===
                                        self.loggedIn().toLowerCase() &&
                                    action1.User.toLowerCase() !==
                                        action2.User.toLowerCase()
                                ) {
                                    return -1;
                                }
                                if (
                                    action2.User.toLowerCase() ===
                                        self.loggedIn().toLowerCase() &&
                                    action1.User.toLowerCase() !==
                                        action2.User.toLowerCase()
                                ) {
                                    return 1;
                                }
                                if (
                                    action1.User.toLowerCase() ===
                                        action2.User.toLowerCase() &&
                                    action1.AddTime === action2.Addtime
                                ) {
                                    return 0;
                                }

                                return new Date(action1.AddTime) <
                                    new Date(action2.AddTime)
                                    ? -1
                                    : 1;
                            });
                        } else if (self.replenishmentOrder() == 3) {
                            actions.sort(function (action1, action2) {
                                if (
                                    action1.User.toLowerCase() ===
                                        self.loggedIn().toLowerCase() &&
                                    action1.User.toLowerCase() !==
                                        action2.User.toLowerCase()
                                ) {
                                    return -1;
                                }
                                if (
                                    action2.User.toLowerCase() ===
                                        self.loggedIn().toLowerCase() &&
                                    action1.User.toLowerCase() !==
                                        action2.User.toLowerCase()
                                ) {
                                    return 1;
                                }
                                if (
                                    action1.User.toLowerCase() ===
                                        action2.User.toLowerCase() &&
                                    action1.LocationFromPhysical ===
                                        action2.LocationFromPhysical
                                ) {
                                    return 0;
                                }
                                return action1.LocationFromPhysical <
                                    action2.LocationFromPhysical
                                    ? -1
                                    : 1;
                            });
                        } else {
                            actions.sort(function (action1, action2) {
                                if (
                                    action1.User.toLowerCase() ===
                                        self.loggedIn().toLowerCase() &&
                                    action1.User.toLowerCase() !==
                                        action2.User.toLowerCase()
                                ) {
                                    return -1;
                                }
                                if (
                                    action2.User.toLowerCase() ===
                                        self.loggedIn().toLowerCase() &&
                                    action1.User.toLowerCase() !==
                                        action2.User.toLowerCase()
                                ) {
                                    return 1;
                                }
                                if (
                                    action1.User.toLowerCase() ===
                                        action2.User.toLowerCase() &&
                                    action1.LocationToPhysical ===
                                        action2.LocationToPhysical
                                ) {
                                    return 0;
                                }
                                return action1.LocationToPhysical <
                                    action2.LocationToPhysical
                                    ? -1
                                    : 1;
                            });
                        }
                    }
                    actions.forEach(function (action) {
                        action.Date = "";
                        if (action.AddTime) {
                            action.Date = new Date(action.AddTime)
                                .toISOString()
                                .slice(0, 16)
                                .replace("T", " ");
                        }
                    });

                    self.replenishmentActions(actions);
                }
            ),
            $.getJSON(
                WS_ROOT +
                    WS.DEFAULT_TRUCK +
                    "?ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode +
                    "&UsesrId=" +
                    self.loggedIn() +
                    "&Warehouse=" +
                    self.warehouseId(),

                function (truckData) {
                    if (truckData && truckData.DefaultTruck) {
                        self.scannerDefaultTruck(truckData.DefaultTruck.Truck);
                    }
                }
            )
        )
            .then(function (data) {
                var actions = self.replenishmentActions();
                var foundAction = actions.find(function (action) {
                    return (
                        self.loggedIn() === action.User &&
                        [2, 3].indexOf(
                            parseInt(action.LastActionPerformed, 10)
                        ) !== -1
                    );
                });
                if (foundAction) {
                    foundAction.AvailableOnPallets = 0;
                    foundAction.TotalOnPallets = 0;
                    foundAction.QuantityToReplenish = 0;
                    self.updateScreenForAction(foundAction);
                    console.log("updateScreenForAction");
                    console.log(foundAction);
                } else {
                    self.goToReplenishStep(2);
                    console.log("goToReplenishStep2");
                }
                self.showLoader(false);
            })
            .fail(self.handleReplenishmentError);
    };

    self.updateScreenForAction = function (action) {
        self.replenishmentAction(action);
        var currentStep = parseInt(action.LastActionPerformed, 10);

        if (currentStep > 1) {
            self.replenishTruck(action.Truck);
        }

        console.log("CURRENT STEP: " + currentStep);

        switch (currentStep) {
            case 1: {
                self.goToReplenishStep(4);
                break;
            }
            case 2: {
                self.goToReplenishStep(6);
                break;
            }
            case 3: {
                self.goToReplenishmentActionStep8();
                break;
            }
            case 4: {
                self.goToReplenishStep(10);
                break;
            }
            case 5: {
                console.log("5 = goToReplenishStep 10");
                self.goToReplenishStep(10);
                break;
            }

            default: {
                // send to second screen;
                self.goToReplenishmentActionStep2();
                self.replenishmentAction(null);
            }
        }
    };

    self.openReplenishmentNextAction = function () {
        var action = self.replenishmentAction();
        var actions = self.replenishmentActions();

        console.log("CURRENT ACTION = " + action);

        self.processedActions.push(action.ReplenishmentId);

        console.log(self.processedActions());

        var currentIndex = null;
        if (action && actions && actions.length) {
            //console.log("Replenish 0: " + actions[0]);

            if (self.replenishmentOrder() == 1) {
                console.log(actions);
                var nextAction = "";
                var nextActionFound = false;
                actions.forEach(function (act, idx) {
                    console.log(idx + " Action: " + act.ReplenishmentId);
                    if (!nextActionFound) {
                        if (
                            !self
                                .processedActions()
                                .includes(act.ReplenishmentId)
                        ) {
                            console.log(
                                "PROCESSED ACTIONS DOES NOT INCLUDE INCLUDES: " +
                                    act.ReplenishmentId
                            );
                            nextAction = idx;
                            nextActionFound = true;
                        }
                    }
                });

                if (nextActionFound) {
                    self.selectReplenishmentAction(actions[nextAction]);
                    return;
                }

                //console.log("REMAINING ACTIONS = " + actions.length);
                /*if (actions[0].ReplenishmentId === action.ReplenishmentId) {
                    if (actions.length > 1) {
                        self.selectReplenishmentAction(actions[1]);
                        return;
                    }
                } else {
                    self.selectReplenishmentAction(actions[0]);
                    return;
                }*/
            } else {
                actions.forEach(function (act, idx) {
                    if (act.ReplenishmentId === action.ReplenishmentId) {
                        currentIndex = idx;
                    }
                });

                if (currentIndex !== null && actions[currentIndex + 1]) {
                    self.selectReplenishmentAction(actions[currentIndex + 1]);
                    return;
                }
            }
        }

        // send to second screen;
        self.goToReplenishmentActionStep2();
        self.replenishmentAction(null);
    };

    self.selectReplenishmentAction = function (action) {
        action.AvailableOnPallets = 0;
        action.TotalOnPallets = 0;
        action.QuantityToReplenish = 0;

        if (
            action.LastActionPerformed !== "" &&
            parseInt(action.LastActionPerformed, 10) !== 0
        ) {
            self.updateScreenForAction(action);
        } else {
            self.showLoader(true);
            $.ajax({
                type: "PUT",
                url:
                    WS_ROOT +
                    WS.PUT_REPLENISHMENT_ACTION_TYPE +
                    "?UserId=" +
                    self.loggedIn() +
                    "&ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode,
                data: JSON.stringify({
                    ScanData_PickReplenishmentResponse: {
                        ActionType: 1,
                        ReplenishmentId: action.ReplenishmentId,
                        LocationFrom: action.LocationFromBarcode,
                        Warehouse: action.Warehouse,
                        Product: action.Product,
                    },
                }),
                dataType: "json",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    self.replenishmentAction(action);

                    if (
                        data &&
                        data.ScanData_PickReplenishmentResponse &&
                        data.ScanData_PickReplenishmentResponse
                            .ReplenishmentActionIsNotValidAnymore === "true"
                    ) {
                        self.errorMessage(
                            self.Dictionary[self.Lang()].notMoveablePallet
                        );
                        self.saveLastActionPerformed(5, function () {
                            setTimeout(function () {
                                self.goToReplenishmentActionStep2();
                                self.errorMessage(null);
                            }, 10000);
                        });
                    } else {
                        self.goToReplenishStep(3);
                        self.showLoader(false);
                    }
                },
                error: self.handleReplenishmentError,
            });
        }
    };

    self.startReplenishmentAction = function () {
        var action = self.replenishmentAction();
        self.showLoader(true);

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_REPLENISHMENT_ACTION_TYPE +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserId=" +
                self.loggedIn(),
            dataType: "json",
            data: JSON.stringify({
                ScanData_PickReplenishmentResponse: {
                    ReplenishmentId: action.ReplenishmentId,
                    ActionType: 2,
                    GraspBatchNumber: action.GraspBatchNumber,
                    GraspVGSCode: action.GraspVGSCode,
                    GraspLocation: action.LocationToBarcode,
                    Warehouse: action.Warehouse,
                    Product: action.Product,
                    LocationFrom: action.LocationFromBarcode,
                },
            }),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                if (
                    data &&
                    data.ScanData_PickReplenishmentResponse &&
                    data.ScanData_PickReplenishmentResponse
                        .ReplenishmentActionIsNotValidAnymore === "true"
                ) {
                    self.errorMessage(
                        self.Dictionary[self.Lang()].notValidAction
                    );

                    self.replenishmentActionIsNotAnymoreValid(true);

                    self.saveLastActionPerformed(5, function () {
                        setTimeout(function () {
                            self.goToReplenishmentActionStep2();
                            self.errorMessage(null);
                        }, 3000);
                    });
                } else {
                    self.saveLastActionPerformed(1);
                    self.goToReplenishStep(4);
                    self.showLoader(false);
                }
            },
            error: self.handleReplenishmentError,
        });
    };

    self.fromLocationKeyUp = function (data, event) {
        self.replenishFromLocation(event.target.value);

        if (event.which === 13 && event.target.value) {
            self.doReplenishmentLocationRequest();
        }
    };

    self.replenishTruckScan = function (data, event) {
        self.replenishTruck(event.target.value);
        if (event.which === 13 && event.target.value) {
            self.doReplenishmentLocationRequest();
        }
    };

    self.doReplenishmentLocationRequest = function () {
        if (!self.replenishTruck()) {
            self.errorMessage(self.Dictionary[self.Lang()].truckIsNotValid);
            self.hideErrorMessage(3000);
            return;
        }
        if (
            self.replenishFromLocation() !==
            self.replenishmentAction().LocationFromBarcode
        ) {
            $("#replenish-action-location-from").val("");
            self.errorMessage(
                self.Dictionary[self.Lang()].fromLocationNotValid
            );
            self.hideErrorMessage(3000);
            return;
        }

        if (!self.isDoingReplenishentRequest()) {
            self.isDoingReplenishentRequest(true);
            self.showLoader(true);
            var action = self.replenishmentAction();
            $.ajax({
                type: "PUT",
                url:
                    WS_ROOT +
                    WS.PUT_REPLENISHMENT_ACTION_TYPE +
                    "?ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode +
                    "&UserId=" +
                    self.loggedIn(),
                dataType: "json",
                data: JSON.stringify({
                    ScanData_PickReplenishmentResponse: {
                        ReplenishmentId: action.ReplenishmentId,
                        ActionType: 3,
                        TruckId: self.replenishTruck(),
                        LocationFrom: action.LocationFromBarcode,
                        User: self.loggedIn(),
                        Warehouse: action.Warehouse,
                        Product: action.Product,
                    },
                }),
                dataType: "text",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    self.saveLastActionPerformed(2);
                    self.goToReplenishStep(6);
                    self.isDoingReplenishentRequest(false);
                    self.showLoader(false);
                },
                error: self.handleReplenishmentError,
            });
        }
    };

    self.cancelSplitRequest = function (pressedButton) {
        switch (pressedButton) {
            case "cancel_no":
                self.scanLocationSplit("");
                self.page("splitPalletLocation");
                setTimeout(function () {
                    $("#scanLocationSplit").focus();
                }, 250);
                break;
            case "cancel_yes":
                self.step2Split();
                break;
        }
    };

    self.cancelMoveRequest = function (pressedButton) {
        switch (pressedButton) {
            case "cancel_no":
                self.scanLocation("");
                self.page("palletMovement");
                setTimeout(function () {
                    $("#scanLocation").focus();
                }, 250);
                break;
            case "cancel_yes":
                self.step2();

                break;
        }
    };

    self.cancelPalletMovementBBD = function (pressedButton) {
        self.successMessage(true);
        self.errorMessage(self.Dictionary[self.Lang()].movementSuccessful);
        self.page(self.previousPage());
    };

    self.cancelReplenishmentActionsBBD = function (pressedButton) {
        self.page("replenishmentActions");
        //self.doReplenishmentToLocationRequest();
        self.goToReplenishmentActionStep7();
        self.isDoingReplenishentRequest(false);
        self.showLoader(false);
    };

    self.cancelReplenishmentActions = function (pressedButton) {
        switch (pressedButton) {
            case "cancel_no":
                self.replenishEndLocation("");
                self.page("replenishmentActions");
                self.goToReplenishStep(9);
                break;
            case "cancel_yes":
                self.showLoader(true);
                var action = self.replenishmentAction();

                $.ajax({
                    type: "PUT",
                    url:
                        WS_ROOT +
                        WS.PUT_REPLENISHMENT_ACTION_TYPE +
                        "?ConcernCode=" +
                        self.ConcernCode +
                        "&CompanyCode=" +
                        self.CompanyCode +
                        "&UserId=" +
                        self.loggedIn(),
                    data: JSON.stringify({
                        ScanData_PickReplenishmentResponse: {
                            ReplenishmentId: action.ReplenishmentId,
                            ActionType: 7,
                            TruckId: self.replenishTruck(),
                            LocationFrom: action.LocationFromBarcode,
                            User: self.loggedIn(),
                            Warehouse: action.Warehouse,
                            Product: action.Product,
                            EndLocation: self.replenishToLocationFinalize(),
                        },
                    }),
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        self.saveLastActionPerformed(5);
                        self.page("replenishmentActions");
                        self.goToReplenishStep(10);
                        self.showLoader(false);
                    },
                    error: self.handleReplenishmentError,
                });
                break;
        }
    };

    self.toLocationKeyUp = function (data, event) {
        self.replenishToLocation(event.target.value);
        if (event.which === 13 && event.target.value) {
            self.doReplenishmentToLocationRequest();
        }
    };

    self.doReplenishmentToLocationRequest = function () {
        //console.log("Replenishment request");
        if (!self.isDoingReplenishentRequest()) {
            self.isDoingReplenishentRequest(true);
            self.showLoader(true);
            var action = self.replenishmentAction();

            $.ajax({
                type: "PUT",
                url:
                    WS_ROOT +
                    WS.PUT_REPLENISHMENT_ACTION_TYPE +
                    "?ConcernCode=" +
                    self.ConcernCode +
                    "&CompanyCode=" +
                    self.CompanyCode +
                    "&UserId=" +
                    self.loggedIn(),
                dataType: "json",
                data: JSON.stringify({
                    ScanData_PickReplenishmentResponse: {
                        ReplenishmentId: action.ReplenishmentId,
                        ActionType: 4,
                        TruckId: self.replenishTruck(),
                        LocationFrom: action.LocationFromBarcode,
                        ScannedGraspLocation: self.replenishToLocation(),
                        GraspLocation: action.LocationToBarcode,
                        User: self.loggedIn(),
                        Warehouse: action.Warehouse,
                        Product: action.Product,
                        IntermediateLocation: action.IntermediateLocation,
                        ReplenishmentUsingIntermediateLocation:
                            action.ReplenishmentUsingIntermediateLocation,
                    },
                }),
                dataType: "text",
                contentType: "application/json; charset=utf-8",
                success: function (data) {
                    var action = self.replenishmentAction();
                    console.log(action);
                    if (
                        action.ReplenishmentUsingIntermediateLocation ==
                            "false" &&
                        action.BBDApplicable == "true"
                    ) {
                        self.showLoader(false);
                        self.page("warningReplenishmentActionsBBD");
                    } else {
                        self.goToReplenishmentActionStep7();
                        self.isDoingReplenishentRequest(false);
                        self.showLoader(false);
                    }
                },
                error: self.handleReplenishmentError,
            });
        }
    };

    self.confirmManuallyFromLocation = function () {
        self.showLoader(true);
        var action = self.replenishmentAction();
        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_REPLENISHMENT_ACTIONS +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&Id=" +
                action.Id,
            data: JSON.stringify({
                ScanData_PickReplenishmentActions: {
                    Id: action.Id,
                    LocationFrom_ConfirmedManually: "true",
                    User: self.loggedIn(),
                },
            }),
            dataType: "text",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                self.doReplenishmentLocationRequest();
            },
            error: self.handleReplenishmentError,
        });
    };

    self.confirmManuallyToLocation = function () {
        self.showLoader(true);
        var action = self.replenishmentAction();
        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_REPLENISHMENT_ACTIONS +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&Id=" +
                action.Id,
            data: JSON.stringify({
                ScanData_PickReplenishmentActions: {
                    Id: action.Id,
                    LocationTo_ConfirmedManually: "true",
                    User: self.loggedIn(),
                },
            }),
            dataType: "text",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                self.goToReplenishmentActionStep7();
                self.showLoader(false);
            },
            error: self.handleReplenishmentError,
        });
    };

    self.goToReplenishmentActionStep7 = function () {
        var action = self.replenishmentAction();

        self.showLoader(true);
        $.ajax({
            type: "GET",
            url:
                WS_ROOT +
                WS.GET_REPLENISHMENT_ACTION_QUANTITY +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&ReplenishmentActionId=" +
                action.ReplenishmentId +
                "&ScanDataId=" +
                action.Id,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                var quantityData =
                    data && data.ScanData_ReplenishmentAction_Quantities;
                if (quantityData) {
                    action.TotalOnPallets = parseInt(
                        quantityData.TotalOnPallets,
                        10
                    );
                    action.AvailableOnPallets = parseInt(
                        quantityData.AvailableOnPallets,
                        10
                    );
                    action.QuantityToReplenish = parseInt(
                        quantityData.QuantityToReplenish,
                        10
                    );

                    if (parseInt(quantityData.LastActionPerformed, 10) === 0) {
                        self.goToReplenishStep(10);
                    } else {
                        self.replenishmentAction(action);
                        self.goToReplenishStep(7);
                    }
                }
                self.showLoader(false);
            },
            error: self.handleReplenishmentError,
        });
    };

    self.goToReplenishmentActionStep8 = function () {
        var action = self.replenishmentAction();

        self.showLoader(true);
        $.ajax({
            type: "GET",
            url:
                WS_ROOT +
                WS.GET_REPLENISHMENT_ACTION_QUANTITY +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&ReplenishmentActionId=" +
                action.ReplenishmentId +
                "&ScanDataId=" +
                action.Id,
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                action.TotalOnPallets = parseInt(
                    data.ScanData_ReplenishmentAction_Quantities.TotalOnPallets,
                    10
                );
                action.AvailableOnPallets = parseInt(
                    data.ScanData_ReplenishmentAction_Quantities
                        .AvailableOnPallets,
                    10
                );
                action.QuantityToReplenish = parseInt(
                    data.ScanData_ReplenishmentAction_Quantities
                        .QuantityToReplenish,
                    10
                );

                if (action.TotalOnPallets === action.QuantityToReplenish) {
                    self.saveLastActionPerformed(4);
                    self.goToReplenishStep(10);
                } else {
                    self.saveLastActionPerformed(3);
                    self.replenishmentAction(action);
                    self.goToReplenishStep(8);
                    self.showLoader(false);
                }
            },
            error: self.handleReplenishmentError,
        });
    };

    self.cancelActionReplenishment = function () {
        self.actionIsCanceled(true);
        self.goToReplenishmentActionStep9();
    };

    self.goToReplenishmentActionStep9 = function () {
        self.goToReplenishStep(9);
    };

    self.replenishQuantityKeyUp = function (data, event) {
        var value = event.target.value;
        self.replenishQuantity(value);

        if (event.which === 13 && event.target.value) {
            self.onReplenishQuantity();
        }
    };

    self.onReplenishQuantity = function () {
        var action = self.replenishmentAction();

        if (
            parseInt(self.replenishQuantity(), 10) !== 0 &&
            self.replenishQuantity()
        ) {
            if (
                parseInt(self.replenishQuantity(), 10) >
                action.AvailableOnPallets
            ) {
                self.errorMessage(self.Dictionary[self.Lang()].quantityBigger);
                self.hideErrorMessage(5000);
            } else {
                self.showLoader(true);
                $.ajax({
                    type: "PUT",
                    url:
                        WS_ROOT +
                        WS.PUT_REPLENISHMENT_ACTION_TYPE +
                        "?ConcernCode=" +
                        self.ConcernCode +
                        "&CompanyCode=" +
                        self.CompanyCode +
                        "&UserId=" +
                        self.loggedIn(),
                    data: JSON.stringify({
                        ScanData_PickReplenishmentResponse: {
                            ReplenishmentId: action.ReplenishmentId,
                            ActionType: 5,
                            TruckId: self.replenishTruck(),
                            LocationFrom: action.LocationFromBarcode,
                            User: self.loggedIn(),
                            Warehouse: action.Warehouse,
                            Product: action.Product,
                            ReplenishedQty: self.replenishQuantity(),
                            GraspLocation: action.LocationToBarcode,
                            GraspBatchNumber: action.GraspBatchNumber,
                            GraspVGSCode: action.GraspVGSCode,
                            IntermediateLocation: action.IntermediateLocation,
                            ReplenishmentUsingIntermediateLocation:
                                action.ReplenishmentUsingIntermediateLocation,
                        },
                    }),
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        self.goToReplenishmentActionStep8();
                        self.showLoader(false);
                    },
                    error: self.handleReplenishmentError,
                });
            }
        }
    };

    self.saveLastActionPerformed = function (actionNumber, callback) {
        var action = self.replenishmentAction();
        var data = {
            Id: action.Id,
            LastActionPerformed: actionNumber,
            User: self.loggedIn(),
        };
        if (self.replenishTruck() && actionNumber > 1) {
            $.extend(data, { Truck: self.replenishTruck() });
        }

        if (actionNumber == 5 && self.actionIsCanceled() == true) {
            $.extend(data, { ActionIsCanceled: "true" });
        }

        if (
            actionNumber == 5 &&
            self.replenishmentActionIsNotAnymoreValid() == true
        ) {
            $.extend(data, {
                ReplenishmentActionIsNotValidAnymore: "true",
            });
        }

        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_REPLENISHMENT_ACTIONS +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&Id=" +
                action.Id,
            data: JSON.stringify({
                ScanData_PickReplenishmentActions: data,
            }),
            dataType: "text",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                if (callback) {
                    callback();
                }
            },
            error: self.handleReplenishmentError,
        });
    };

    self.toLocationFinalizeKeyUp = function (data, event) {
        var value = event.target.value;
        self.replenishToLocationFinalize(value);

        if (value) {
            self.replenishDisplayFinalize(true);
        } else {
            self.replenishDisplayFinalize(false);
        }

        if (event.which === 13 && event.target.value) {
            var action = self.replenishmentAction();
            console.log(
                action.LocationFromBarcode +
                    " / " +
                    self.replenishToLocationFinalize()
            );
            self.finalizeMovement();
        }
    };

    self.finalizeMovement = function () {
        self.showLoader(true);
        var action = self.replenishmentAction();
        $.ajax({
            type: "PUT",
            url:
                WS_ROOT +
                WS.PUT_REPLENISHMENT_ACTION_TYPE +
                "?ConcernCode=" +
                self.ConcernCode +
                "&CompanyCode=" +
                self.CompanyCode +
                "&UserId=" +
                self.loggedIn(),
            data: JSON.stringify({
                ScanData_PickReplenishmentResponse: {
                    ReplenishmentId: action.ReplenishmentId,
                    ActionType: 6,
                    TruckId: self.replenishTruck(),
                    LocationFrom: action.LocationFromBarcode,
                    User: self.loggedIn(),
                    Warehouse: action.Warehouse,
                    Product: action.Product,
                    EndLocation: self.replenishToLocationFinalize(),
                },
            }),
            dataType: "json",
            contentType: "application/json; charset=utf-8",
            success: function (data) {
                self.endLocationPhysical(
                    data.ScanData_PickReplenishmentResponse
                        .ScannedEndLocationPhysical
                );

                self.replenishEndLocation(
                    data.ScanData_PickReplenishmentResponse.EndLocation
                );

                if (
                    data.ScanData_PickReplenishmentResponse.EndLocation !=
                    data.ScanData_PickReplenishmentResponse.LocationFrom
                ) {
                    self.showLoader(false);
                    self.page("warningReplenishmentActions");
                } else {
                    $.ajax({
                        type: "PUT",
                        url:
                            WS_ROOT +
                            WS.PUT_REPLENISHMENT_ACTION_TYPE +
                            "?ConcernCode=" +
                            self.ConcernCode +
                            "&CompanyCode=" +
                            self.CompanyCode +
                            "&UserId=" +
                            self.loggedIn(),
                        data: JSON.stringify({
                            ScanData_PickReplenishmentResponse: {
                                ReplenishmentId: action.ReplenishmentId,
                                ActionType: 7,
                                TruckId: self.replenishTruck(),
                                LocationFrom: action.LocationFromBarcode,
                                User: self.loggedIn(),
                                Warehouse: action.Warehouse,
                                Product: action.Product,
                                EndLocation: self.replenishToLocationFinalize(),
                            },
                        }),
                        dataType: "json",
                        contentType: "application/json; charset=utf-8",
                        success: function (data) {
                            self.saveLastActionPerformed(5);
                            self.goToReplenishStep(10);
                            self.showLoader(false);
                        },
                        error: self.handleReplenishmentError,
                    });
                }
            },
            error: self.handleReplenishmentError,
        });
    };

    self.handleReplenishmentError = function (err) {
        if (err && err.responseText) {
            var message = JSON.parse(err.responseText).message;
            self.errorMessage(message);
            self.hideErrorMessage();
            self.isDoingReplenishentRequest(false);
        }
        self.showLoader(false);
    };

    self.onReplenishBackIcon = function () {
        var currentStep = this.showReplenishmentActionStep()
            ? parseInt(self.showReplenishmentActionStep(), 10)
            : 0;

        switch (currentStep) {
            case 3:
            case 4:
            case 10: {
                self.goToReplenishmentActionStep2();
                break;
            }

            case 6: {
                self.errorMessage(
                    self.Dictionary[self.Lang()].unfinishedMovement
                );
                self.hideErrorMessage(3000);
                break;
            }

            case 5:
            case 7: {
                self.goToReplenishStep(currentStep - 1);
                break;
            }
            case 2:
            default: {
                self.openMenu();
                break;
            }
        }
    };

    self.goToReplenishStep = function (step) {
        var action = self.replenishmentAction();

        self.showReplenishmentActionStep(step);
        self.replenishDisplayFinalize(false);
        self.errorMessage(null);

        switch (step) {
            case 2: {
                self.replenishMainTitle(
                    self.Dictionary[self.Lang()].chooseAction
                );
                self.showReplenishmentBackButton(true);
                break;
            }
            case 3: {
                self.replenishMainTitle(
                    self.Dictionary[self.Lang()].confirmChoice
                );
                self.showReplenishmentBackButton(true);
                break;
            }
            case 4: {
                self.replenishMainTitle(self.Dictionary[self.Lang()].getPallet);
                self.showReplenishmentBackButton(true);
                self.replenishFromLocation("");
                $("#replenish-action-location-from").val("");
                $("#replenish-action-truck").val(self.scannerDefaultTruck());
                self.replenishTruck(self.scannerDefaultTruck());
                setTimeout(function () {
                    $("#replenish-action-location-from").focus().select();
                }, 250);
                break;
            }
            case 6: {
                self.replenishMainTitle(
                    self.Dictionary[self.Lang()].placePallet
                );
                self.showReplenishmentBackButton(true);
                $("#replenish-action-location-to").val("");
                setTimeout(function () {
                    $("#replenish-action-location-to").focus().select();
                }, 250);
                break;
            }
            case 7: {
                self.replenishMainTitle(
                    self.Dictionary[self.Lang()].enterQuantity
                );
                self.showReplenishmentBackButton(true);
                $("#replenish-action-quantity").val(0);
                self.replenishQuantity(0);
                setTimeout(function () {
                    $("#replenish-action-quantity").focus().select();
                }, 250);
                break;
            }
            case 8: {
                self.replenishMainTitle(self.Dictionary[self.Lang()].finalize);
                self.showReplenishmentBackButton(false);
                break;
            }
            case 9: {
                self.replenishMainTitle(
                    self.Dictionary[self.Lang()].movePallet
                );
                self.showReplenishmentBackButton(false);
                $("#replenish-action-to-location-finalize").val("");
                self.replenishToLocationFinalize("");
                this.replenishDisplayFinalize(false);

                setTimeout(function () {
                    $("#replenish-action-to-location-finalize")
                        .focus()
                        .select();
                }, 250);
                break;
            }
            case 10: {
                self.replenishMainTitle(
                    self.Dictionary[self.Lang()].actionComplete
                );
                self.showReplenishmentBackButton(true);
                break;
            }
            default: {
                self.replenishMainTitle(
                    self.Dictionary[self.Lang()].replenishAction
                );
                self.showReplenishmentBackButton(true);
            }
        }
    };
}

$(document).ready(function () {
    $("body").on("click", ".location-count", function () {
        $(".location-count").hide();
        $(this).show();
    });

    $(".sort_button").click(function () {
        $(".filters_shown").hide();
        $(".sort_shown").slideToggle();
    });

    $(".filter_show").click(function () {
        $(".sort_shown").hide();
        $(".filters_shown").slideToggle();
    });

    $(".sort_ascending").click(function () {
        $(".sort_descending").removeClass("sort_selected");
        $(this).addClass("sort_selected");
    });

    $(".sort_descending").click(function () {
        $(".sort_ascending").removeClass("sort_selected");
        $(this).addClass("sort_selected");
    });

    $(".filter_selected").click(function (event) {
        event.stopPropagation();
    });

    $(".radio_button_1").click(function () {
        $(".radio_button_1").removeClass("radio_button_selected");
        $(this).addClass("radio_button_selected");
    });

    $("body").on("click", ".radio_button_2", function () {
        $(".radio_button_2").removeClass("radio_button_selected");
        $(this).addClass("radio_button_selected");
    });

    $("body").on("click", ".radio_button_3", function () {
        $(".radio_button_3").removeClass("radio_button_selected");
        $(this).addClass("radio_button_selected");
    });

});
